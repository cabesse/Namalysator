// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "mix-pimpl.hxx"

namespace mix
{
  // mixType_pimpl
  //

  void mixType_pimpl::
  pre ()
  {
  }

  void mixType_pimpl::
  BasicImageParameters ()
  {
  }

  void mixType_pimpl::
  ImageCreation ()
  {
  }

  void mixType_pimpl::
  ImagingPerformanceAssessment ()
  {
  }

  void mixType_pimpl::
  ChangeHistory ()
  {
  }

  void mixType_pimpl::
  post_mixType ()
  {
  }

  // BasicImageParametersType_pimpl
  //

  void BasicImageParametersType_pimpl::
  pre ()
  {
  }

  void BasicImageParametersType_pimpl::
  Format ()
  {
  }

  void BasicImageParametersType_pimpl::
  File ()
  {
  }

  void BasicImageParametersType_pimpl::
  PreferredPresentation ()
  {
  }

  void BasicImageParametersType_pimpl::
  post_BasicImageParametersType ()
  {
  }

  // ImageCreationType_pimpl
  //

  void ImageCreationType_pimpl::
  pre ()
  {
  }

  void ImageCreationType_pimpl::
  SourceType ()
  {
  }

  void ImageCreationType_pimpl::
  SourceID ()
  {
  }

  void ImageCreationType_pimpl::
  ImageProducer ()
  {
  }

  void ImageCreationType_pimpl::
  Host ()
  {
  }

  void ImageCreationType_pimpl::
  DeviceSource ()
  {
  }

  void ImageCreationType_pimpl::
  ScanningSystemCapture ()
  {
  }

  void ImageCreationType_pimpl::
  DigitalCameraCapture ()
  {
  }

  void ImageCreationType_pimpl::
  CameraCaptureSettings ()
  {
  }

  void ImageCreationType_pimpl::
  Sensor ()
  {
  }

  void ImageCreationType_pimpl::
  DateTimeCreated ()
  {
  }

  void ImageCreationType_pimpl::
  Methodology ()
  {
  }

  void ImageCreationType_pimpl::
  post_ImageCreationType ()
  {
  }

  // ImagingPerformanceAssessmentType_pimpl
  //

  void ImagingPerformanceAssessmentType_pimpl::
  pre ()
  {
  }

  void ImagingPerformanceAssessmentType_pimpl::
  SpatialMetrics ()
  {
  }

  void ImagingPerformanceAssessmentType_pimpl::
  Energetics ()
  {
  }

  void ImagingPerformanceAssessmentType_pimpl::
  TargetData ()
  {
  }

  void ImagingPerformanceAssessmentType_pimpl::
  post_ImagingPerformanceAssessmentType ()
  {
  }

  // ChangeHistoryType_pimpl
  //

  void ChangeHistoryType_pimpl::
  pre ()
  {
  }

  void ChangeHistoryType_pimpl::
  ImageProcessing ()
  {
  }

  void ChangeHistoryType_pimpl::
  PreviousImageMetadata ()
  {
  }

  void ChangeHistoryType_pimpl::
  post_ChangeHistoryType ()
  {
  }

  // FormatType_pimpl
  //

  void FormatType_pimpl::
  pre ()
  {
  }

  void FormatType_pimpl::
  post_FormatType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfFormatType_pimpl
  //

  void typeOfFormatType_pimpl::
  pre ()
  {
  }

  void typeOfFormatType_pimpl::
  use ()
  {
  }

  void typeOfFormatType_pimpl::
  post_typeOfFormatType ()
  {
    post_FormatType ();
  }

  // ByteOrderType_pimpl
  //

  void ByteOrderType_pimpl::
  pre ()
  {
  }

  void ByteOrderType_pimpl::
  post_ByteOrderType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfByteOrderType_pimpl
  //

  void typeOfByteOrderType_pimpl::
  pre ()
  {
  }

  void typeOfByteOrderType_pimpl::
  use ()
  {
  }

  void typeOfByteOrderType_pimpl::
  post_typeOfByteOrderType ()
  {
    post_ByteOrderType ();
  }

  // CompressionSchemeType_pimpl
  //

  void CompressionSchemeType_pimpl::
  pre ()
  {
  }

  void CompressionSchemeType_pimpl::
  post_CompressionSchemeType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfCompressionSchemeType_pimpl
  //

  void typeOfCompressionSchemeType_pimpl::
  pre ()
  {
  }

  void typeOfCompressionSchemeType_pimpl::
  use ()
  {
  }

  void typeOfCompressionSchemeType_pimpl::
  post_typeOfCompressionSchemeType ()
  {
    post_CompressionSchemeType ();
  }

  // CompressionLevelType_pimpl
  //

  void CompressionLevelType_pimpl::
  pre ()
  {
  }

  void CompressionLevelType_pimpl::
  post_CompressionLevelType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfCompressionLevelType_pimpl
  //

  void typeOfCompressionLevelType_pimpl::
  pre ()
  {
  }

  void typeOfCompressionLevelType_pimpl::
  use ()
  {
  }

  void typeOfCompressionLevelType_pimpl::
  post_typeOfCompressionLevelType ()
  {
    post_CompressionLevelType ();
  }

  // ColorSpaceType_pimpl
  //

  void ColorSpaceType_pimpl::
  pre ()
  {
  }

  void ColorSpaceType_pimpl::
  post_ColorSpaceType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfColorSpaceType_pimpl
  //

  void typeOfColorSpaceType_pimpl::
  pre ()
  {
  }

  void typeOfColorSpaceType_pimpl::
  use ()
  {
  }

  void typeOfColorSpaceType_pimpl::
  post_typeOfColorSpaceType ()
  {
    post_ColorSpaceType ();
  }

  // typeOfProfileNameType_pimpl
  //

  void typeOfProfileNameType_pimpl::
  pre ()
  {
  }

  void typeOfProfileNameType_pimpl::
  use ()
  {
  }

  void typeOfProfileNameType_pimpl::
  post_typeOfProfileNameType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfProfileURLType_pimpl
  //

  void typeOfProfileURLType_pimpl::
  pre ()
  {
  }

  void typeOfProfileURLType_pimpl::
  use ()
  {
  }

  void typeOfProfileURLType_pimpl::
  post_typeOfProfileURLType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // YCbCrSubSamplingType_pimpl
  //

  void YCbCrSubSamplingType_pimpl::
  pre ()
  {
  }

  void YCbCrSubSamplingType_pimpl::
  post_YCbCrSubSamplingType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfYCbCrSubSamplingType_pimpl
  //

  void typeOfYCbCrSubSamplingType_pimpl::
  pre ()
  {
  }

  void typeOfYCbCrSubSamplingType_pimpl::
  use ()
  {
  }

  void typeOfYCbCrSubSamplingType_pimpl::
  post_typeOfYCbCrSubSamplingType ()
  {
    post_YCbCrSubSamplingType ();
  }

  // YCbCrPositioningType_pimpl
  //

  void YCbCrPositioningType_pimpl::
  pre ()
  {
  }

  void YCbCrPositioningType_pimpl::
  post_YCbCrPositioningType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfYCbCrPositioningType_pimpl
  //

  void typeOfYCbCrPositioningType_pimpl::
  pre ()
  {
  }

  void typeOfYCbCrPositioningType_pimpl::
  use ()
  {
  }

  void typeOfYCbCrPositioningType_pimpl::
  post_typeOfYCbCrPositioningType ()
  {
    post_YCbCrPositioningType ();
  }

  // YcbCrCoefficientsType_pimpl
  //

  void YcbCrCoefficientsType_pimpl::
  pre ()
  {
  }

  void YcbCrCoefficientsType_pimpl::
  post_YcbCrCoefficientsType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfYcbCrCoefficientsType_pimpl
  //

  void typeOfYcbCrCoefficientsType_pimpl::
  pre ()
  {
  }

  void typeOfYcbCrCoefficientsType_pimpl::
  use ()
  {
  }

  void typeOfYcbCrCoefficientsType_pimpl::
  post_typeOfYcbCrCoefficientsType ()
  {
    post_YcbCrCoefficientsType ();
  }

  // ReferenceBlackWhiteType_pimpl
  //

  void ReferenceBlackWhiteType_pimpl::
  pre ()
  {
  }

  void ReferenceBlackWhiteType_pimpl::
  post_ReferenceBlackWhiteType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfReferenceBlackWhiteType_pimpl
  //

  void typeOfReferenceBlackWhiteType_pimpl::
  pre ()
  {
  }

  void typeOfReferenceBlackWhiteType_pimpl::
  use ()
  {
  }

  void typeOfReferenceBlackWhiteType_pimpl::
  post_typeOfReferenceBlackWhiteType ()
  {
    post_ReferenceBlackWhiteType ();
  }

  // SegmentTypeType_pimpl
  //

  void SegmentTypeType_pimpl::
  pre ()
  {
  }

  void SegmentTypeType_pimpl::
  post_SegmentTypeType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfSegmentTypeType_pimpl
  //

  void typeOfSegmentTypeType_pimpl::
  pre ()
  {
  }

  void typeOfSegmentTypeType_pimpl::
  use ()
  {
  }

  void typeOfSegmentTypeType_pimpl::
  post_typeOfSegmentTypeType ()
  {
    post_SegmentTypeType ();
  }

  // StripOffsetsType_pimpl
  //

  void StripOffsetsType_pimpl::
  pre ()
  {
  }

  void StripOffsetsType_pimpl::
  post_StripOffsetsType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfStripOffsetsType_pimpl
  //

  void typeOfStripOffsetsType_pimpl::
  pre ()
  {
  }

  void typeOfStripOffsetsType_pimpl::
  use ()
  {
  }

  void typeOfStripOffsetsType_pimpl::
  post_typeOfStripOffsetsType ()
  {
    post_StripOffsetsType ();
  }

  // RowsPerStripType_pimpl
  //

  void RowsPerStripType_pimpl::
  pre ()
  {
  }

  void RowsPerStripType_pimpl::
  post_RowsPerStripType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfRowsPerStripType_pimpl
  //

  void typeOfRowsPerStripType_pimpl::
  pre ()
  {
  }

  void typeOfRowsPerStripType_pimpl::
  use ()
  {
  }

  void typeOfRowsPerStripType_pimpl::
  post_typeOfRowsPerStripType ()
  {
    post_RowsPerStripType ();
  }

  // StripByteCountsType_pimpl
  //

  void StripByteCountsType_pimpl::
  pre ()
  {
  }

  void StripByteCountsType_pimpl::
  post_StripByteCountsType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfStripByteCountsType_pimpl
  //

  void typeOfStripByteCountsType_pimpl::
  pre ()
  {
  }

  void typeOfStripByteCountsType_pimpl::
  use ()
  {
  }

  void typeOfStripByteCountsType_pimpl::
  post_typeOfStripByteCountsType ()
  {
    post_StripByteCountsType ();
  }

  // TileWidthType_pimpl
  //

  void TileWidthType_pimpl::
  pre ()
  {
  }

  void TileWidthType_pimpl::
  post_TileWidthType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfTileWidthType_pimpl
  //

  void typeOfTileWidthType_pimpl::
  pre ()
  {
  }

  void typeOfTileWidthType_pimpl::
  use ()
  {
  }

  void typeOfTileWidthType_pimpl::
  post_typeOfTileWidthType ()
  {
    post_TileWidthType ();
  }

  // TileLengthType_pimpl
  //

  void TileLengthType_pimpl::
  pre ()
  {
  }

  void TileLengthType_pimpl::
  post_TileLengthType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfTileLengthType_pimpl
  //

  void typeOfTileLengthType_pimpl::
  pre ()
  {
  }

  void typeOfTileLengthType_pimpl::
  use ()
  {
  }

  void typeOfTileLengthType_pimpl::
  post_typeOfTileLengthType ()
  {
    post_TileLengthType ();
  }

  // TileOffsetsType_pimpl
  //

  void TileOffsetsType_pimpl::
  pre ()
  {
  }

  void TileOffsetsType_pimpl::
  post_TileOffsetsType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfTileOffsetsType_pimpl
  //

  void typeOfTileOffsetsType_pimpl::
  pre ()
  {
  }

  void typeOfTileOffsetsType_pimpl::
  use ()
  {
  }

  void typeOfTileOffsetsType_pimpl::
  post_typeOfTileOffsetsType ()
  {
    post_TileOffsetsType ();
  }

  // TileByteCountsType_pimpl
  //

  void TileByteCountsType_pimpl::
  pre ()
  {
  }

  void TileByteCountsType_pimpl::
  post_TileByteCountsType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfTileByteCountsType_pimpl
  //

  void typeOfTileByteCountsType_pimpl::
  pre ()
  {
  }

  void typeOfTileByteCountsType_pimpl::
  use ()
  {
  }

  void typeOfTileByteCountsType_pimpl::
  post_typeOfTileByteCountsType ()
  {
    post_TileByteCountsType ();
  }

  // PlanarConfigurationType_pimpl
  //

  void PlanarConfigurationType_pimpl::
  pre ()
  {
  }

  void PlanarConfigurationType_pimpl::
  post_PlanarConfigurationType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfPlanarConfigurationType_pimpl
  //

  void typeOfPlanarConfigurationType_pimpl::
  pre ()
  {
  }

  void typeOfPlanarConfigurationType_pimpl::
  use ()
  {
  }

  void typeOfPlanarConfigurationType_pimpl::
  post_typeOfPlanarConfigurationType ()
  {
    post_PlanarConfigurationType ();
  }

  // ImageIdentifierType_pimpl
  //

  void ImageIdentifierType_pimpl::
  pre ()
  {
  }

  void ImageIdentifierType_pimpl::
  post_ImageIdentifierType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfImageIdentifierType_pimpl
  //

  void typeOfImageIdentifierType_pimpl::
  pre ()
  {
  }

  void typeOfImageIdentifierType_pimpl::
  use ()
  {
  }

  void typeOfImageIdentifierType_pimpl::
  imageIdentifierLocation ()
  {
  }

  void typeOfImageIdentifierType_pimpl::
  post_typeOfImageIdentifierType ()
  {
    post_ImageIdentifierType ();
  }

  // FileSizeType_pimpl
  //

  void FileSizeType_pimpl::
  pre ()
  {
  }

  void FileSizeType_pimpl::
  post_FileSizeType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfFileSizeType_pimpl
  //

  void typeOfFileSizeType_pimpl::
  pre ()
  {
  }

  void typeOfFileSizeType_pimpl::
  use ()
  {
  }

  void typeOfFileSizeType_pimpl::
  post_typeOfFileSizeType ()
  {
    post_FileSizeType ();
  }

  // ChecksumMethodType_pimpl
  //

  void ChecksumMethodType_pimpl::
  pre ()
  {
  }

  void ChecksumMethodType_pimpl::
  post_ChecksumMethodType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfChecksumMethodType_pimpl
  //

  void typeOfChecksumMethodType_pimpl::
  pre ()
  {
  }

  void typeOfChecksumMethodType_pimpl::
  use ()
  {
  }

  void typeOfChecksumMethodType_pimpl::
  post_typeOfChecksumMethodType ()
  {
    post_ChecksumMethodType ();
  }

  // ChecksumValueType_pimpl
  //

  void ChecksumValueType_pimpl::
  pre ()
  {
  }

  void ChecksumValueType_pimpl::
  post_ChecksumValueType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfChecksumValueType_pimpl
  //

  void typeOfChecksumValueType_pimpl::
  pre ()
  {
  }

  void typeOfChecksumValueType_pimpl::
  use ()
  {
  }

  void typeOfChecksumValueType_pimpl::
  post_typeOfChecksumValueType ()
  {
    post_ChecksumValueType ();
  }

  // OrientationType_pimpl
  //

  void OrientationType_pimpl::
  pre ()
  {
  }

  void OrientationType_pimpl::
  post_OrientationType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfOrientationType_pimpl
  //

  void typeOfOrientationType_pimpl::
  pre ()
  {
  }

  void typeOfOrientationType_pimpl::
  use ()
  {
  }

  void typeOfOrientationType_pimpl::
  post_typeOfOrientationType ()
  {
    post_OrientationType ();
  }

  // DisplayOrientationType_pimpl
  //

  void DisplayOrientationType_pimpl::
  pre ()
  {
  }

  void DisplayOrientationType_pimpl::
  post_DisplayOrientationType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfDisplayOrientationType_pimpl
  //

  void typeOfDisplayOrientationType_pimpl::
  pre ()
  {
  }

  void typeOfDisplayOrientationType_pimpl::
  use ()
  {
  }

  void typeOfDisplayOrientationType_pimpl::
  post_typeOfDisplayOrientationType ()
  {
    post_DisplayOrientationType ();
  }

  // XTargetedDisplayARType_pimpl
  //

  void XTargetedDisplayARType_pimpl::
  pre ()
  {
  }

  void XTargetedDisplayARType_pimpl::
  post_XTargetedDisplayARType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfXTargetedDisplayARType_pimpl
  //

  void typeOfXTargetedDisplayARType_pimpl::
  pre ()
  {
  }

  void typeOfXTargetedDisplayARType_pimpl::
  use ()
  {
  }

  void typeOfXTargetedDisplayARType_pimpl::
  post_typeOfXTargetedDisplayARType ()
  {
    post_XTargetedDisplayARType ();
  }

  // YTargetedDisplayARType_pimpl
  //

  void YTargetedDisplayARType_pimpl::
  pre ()
  {
  }

  void YTargetedDisplayARType_pimpl::
  post_YTargetedDisplayARType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfYTargetedDisplayARType_pimpl
  //

  void typeOfYTargetedDisplayARType_pimpl::
  pre ()
  {
  }

  void typeOfYTargetedDisplayARType_pimpl::
  use ()
  {
  }

  void typeOfYTargetedDisplayARType_pimpl::
  post_typeOfYTargetedDisplayARType ()
  {
    post_YTargetedDisplayARType ();
  }

  // PreferredPresentationType_pimpl
  //

  void PreferredPresentationType_pimpl::
  pre ()
  {
  }

  void PreferredPresentationType_pimpl::
  post_PreferredPresentationType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfPreferredPresentationType_pimpl
  //

  void typeOfPreferredPresentationType_pimpl::
  pre ()
  {
  }

  void typeOfPreferredPresentationType_pimpl::
  use ()
  {
  }

  void typeOfPreferredPresentationType_pimpl::
  post_typeOfPreferredPresentationType ()
  {
    post_PreferredPresentationType ();
  }

  // SourceTypeType_pimpl
  //

  void SourceTypeType_pimpl::
  pre ()
  {
  }

  void SourceTypeType_pimpl::
  post_SourceTypeType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfSourceTypeType_pimpl
  //

  void typeOfSourceTypeType_pimpl::
  pre ()
  {
  }

  void typeOfSourceTypeType_pimpl::
  use ()
  {
  }

  void typeOfSourceTypeType_pimpl::
  post_typeOfSourceTypeType ()
  {
    post_SourceTypeType ();
  }

  // SourceIDType_pimpl
  //

  void SourceIDType_pimpl::
  pre ()
  {
  }

  void SourceIDType_pimpl::
  post_SourceIDType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfSourceIDType_pimpl
  //

  void typeOfSourceIDType_pimpl::
  pre ()
  {
  }

  void typeOfSourceIDType_pimpl::
  use ()
  {
  }

  void typeOfSourceIDType_pimpl::
  post_typeOfSourceIDType ()
  {
    post_SourceIDType ();
  }

  // ImageProducerType_pimpl
  //

  void ImageProducerType_pimpl::
  pre ()
  {
  }

  void ImageProducerType_pimpl::
  post_ImageProducerType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfImageProducerType_pimpl
  //

  void typeOfImageProducerType_pimpl::
  pre ()
  {
  }

  void typeOfImageProducerType_pimpl::
  use ()
  {
  }

  void typeOfImageProducerType_pimpl::
  post_typeOfImageProducerType ()
  {
    post_ImageProducerType ();
  }

  // SubjectDistanceType_pimpl
  //

  void SubjectDistanceType_pimpl::
  pre ()
  {
  }

  void SubjectDistanceType_pimpl::
  post_SubjectDistanceType ()
  {
    float v (post_float ());

    // TODO
    //
  }

  // typeOfSubjectDistanceType_pimpl
  //

  void typeOfSubjectDistanceType_pimpl::
  pre ()
  {
  }

  void typeOfSubjectDistanceType_pimpl::
  use ()
  {
  }

  void typeOfSubjectDistanceType_pimpl::
  min ()
  {
  }

  void typeOfSubjectDistanceType_pimpl::
  max ()
  {
  }

  void typeOfSubjectDistanceType_pimpl::
  post_typeOfSubjectDistanceType ()
  {
    post_SubjectDistanceType ();
  }

  // MeteringModeType_pimpl
  //

  void MeteringModeType_pimpl::
  pre ()
  {
  }

  void MeteringModeType_pimpl::
  post_MeteringModeType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfMeteringModeType_pimpl
  //

  void typeOfMeteringModeType_pimpl::
  pre ()
  {
  }

  void typeOfMeteringModeType_pimpl::
  use ()
  {
  }

  void typeOfMeteringModeType_pimpl::
  post_typeOfMeteringModeType ()
  {
    post_MeteringModeType ();
  }

  // SceneIlluminantType_pimpl
  //

  void SceneIlluminantType_pimpl::
  pre ()
  {
  }

  void SceneIlluminantType_pimpl::
  post_SceneIlluminantType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfSceneIlluminantType_pimpl
  //

  void typeOfSceneIlluminantType_pimpl::
  pre ()
  {
  }

  void typeOfSceneIlluminantType_pimpl::
  use ()
  {
  }

  void typeOfSceneIlluminantType_pimpl::
  post_typeOfSceneIlluminantType ()
  {
    post_SceneIlluminantType ();
  }

  // FlashType_pimpl
  //

  void FlashType_pimpl::
  pre ()
  {
  }

  void FlashType_pimpl::
  post_FlashType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfFlashType_pimpl
  //

  void typeOfFlashType_pimpl::
  pre ()
  {
  }

  void typeOfFlashType_pimpl::
  use ()
  {
  }

  void typeOfFlashType_pimpl::
  post_typeOfFlashType ()
  {
    post_FlashType ();
  }

  // FlashReturnType_pimpl
  //

  void FlashReturnType_pimpl::
  pre ()
  {
  }

  void FlashReturnType_pimpl::
  post_FlashReturnType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfFlashReturnType_pimpl
  //

  void typeOfFlashReturnType_pimpl::
  pre ()
  {
  }

  void typeOfFlashReturnType_pimpl::
  use ()
  {
  }

  void typeOfFlashReturnType_pimpl::
  post_typeOfFlashReturnType ()
  {
    post_FlashReturnType ();
  }

  // BackLightType_pimpl
  //

  void BackLightType_pimpl::
  pre ()
  {
  }

  void BackLightType_pimpl::
  post_BackLightType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfBackLightType_pimpl
  //

  void typeOfBackLightType_pimpl::
  pre ()
  {
  }

  void typeOfBackLightType_pimpl::
  use ()
  {
  }

  void typeOfBackLightType_pimpl::
  post_typeOfBackLightType ()
  {
    post_BackLightType ();
  }

  // AutoFocusType_pimpl
  //

  void AutoFocusType_pimpl::
  pre ()
  {
  }

  void AutoFocusType_pimpl::
  post_AutoFocusType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfAutoFocusType_pimpl
  //

  void typeOfAutoFocusType_pimpl::
  pre ()
  {
  }

  void typeOfAutoFocusType_pimpl::
  use ()
  {
  }

  void typeOfAutoFocusType_pimpl::
  post_typeOfAutoFocusType ()
  {
    post_AutoFocusType ();
  }

  // SensorType_pimpl
  //

  void SensorType_pimpl::
  pre ()
  {
  }

  void SensorType_pimpl::
  post_SensorType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfSensorType_pimpl
  //

  void typeOfSensorType_pimpl::
  pre ()
  {
  }

  void typeOfSensorType_pimpl::
  use ()
  {
  }

  void typeOfSensorType_pimpl::
  post_typeOfSensorType ()
  {
    post_SensorType ();
  }

  // SamplingFrequencyPlaneType_pimpl
  //

  void SamplingFrequencyPlaneType_pimpl::
  pre ()
  {
  }

  void SamplingFrequencyPlaneType_pimpl::
  post_SamplingFrequencyPlaneType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfSamplingFrequencyPlaneType_pimpl
  //

  void typeOfSamplingFrequencyPlaneType_pimpl::
  pre ()
  {
  }

  void typeOfSamplingFrequencyPlaneType_pimpl::
  use ()
  {
  }

  void typeOfSamplingFrequencyPlaneType_pimpl::
  post_typeOfSamplingFrequencyPlaneType ()
  {
    post_SamplingFrequencyPlaneType ();
  }

  // SamplingFrequencyUnitType_pimpl
  //

  void SamplingFrequencyUnitType_pimpl::
  pre ()
  {
  }

  void SamplingFrequencyUnitType_pimpl::
  post_SamplingFrequencyUnitType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfSamplingFrequencyUnitType_pimpl
  //

  void typeOfSamplingFrequencyUnitType_pimpl::
  pre ()
  {
  }

  void typeOfSamplingFrequencyUnitType_pimpl::
  use ()
  {
  }

  void typeOfSamplingFrequencyUnitType_pimpl::
  post_typeOfSamplingFrequencyUnitType ()
  {
    post_SamplingFrequencyUnitType ();
  }

  // BitsPerSampleType_pimpl
  //

  void BitsPerSampleType_pimpl::
  pre ()
  {
  }

  void BitsPerSampleType_pimpl::
  post_BitsPerSampleType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfBitsPerSampleType_pimpl
  //

  void typeOfBitsPerSampleType_pimpl::
  pre ()
  {
  }

  void typeOfBitsPerSampleType_pimpl::
  use ()
  {
  }

  void typeOfBitsPerSampleType_pimpl::
  post_typeOfBitsPerSampleType ()
  {
    post_BitsPerSampleType ();
  }

  // SamplesPerPixelType_pimpl
  //

  void SamplesPerPixelType_pimpl::
  pre ()
  {
  }

  void SamplesPerPixelType_pimpl::
  post_SamplesPerPixelType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfSamplesPerPixelType_pimpl
  //

  void typeOfSamplesPerPixelType_pimpl::
  pre ()
  {
  }

  void typeOfSamplesPerPixelType_pimpl::
  use ()
  {
  }

  void typeOfSamplesPerPixelType_pimpl::
  post_typeOfSamplesPerPixelType ()
  {
    post_SamplesPerPixelType ();
  }

  // ExtraSamplesType_pimpl
  //

  void ExtraSamplesType_pimpl::
  pre ()
  {
  }

  void ExtraSamplesType_pimpl::
  post_ExtraSamplesType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfExtraSamplesType_pimpl
  //

  void typeOfExtraSamplesType_pimpl::
  pre ()
  {
  }

  void typeOfExtraSamplesType_pimpl::
  use ()
  {
  }

  void typeOfExtraSamplesType_pimpl::
  post_typeOfExtraSamplesType ()
  {
    post_ExtraSamplesType ();
  }

  // ColormapType_pimpl
  //

  void ColormapType_pimpl::
  pre ()
  {
  }

  void ColormapType_pimpl::
  post_ColormapType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfColormapType_pimpl
  //

  void typeOfColormapType_pimpl::
  pre ()
  {
  }

  void typeOfColormapType_pimpl::
  use ()
  {
  }

  void typeOfColormapType_pimpl::
  post_typeOfColormapType ()
  {
    post_ColormapType ();
  }

  // GrayResponseCurveType_pimpl
  //

  void GrayResponseCurveType_pimpl::
  pre ()
  {
  }

  void GrayResponseCurveType_pimpl::
  post_GrayResponseCurveType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfGrayResponseCurveType_pimpl
  //

  void typeOfGrayResponseCurveType_pimpl::
  pre ()
  {
  }

  void typeOfGrayResponseCurveType_pimpl::
  use ()
  {
  }

  void typeOfGrayResponseCurveType_pimpl::
  post_typeOfGrayResponseCurveType ()
  {
    post_GrayResponseCurveType ();
  }

  // GrayResponseUnitType_pimpl
  //

  void GrayResponseUnitType_pimpl::
  pre ()
  {
  }

  void GrayResponseUnitType_pimpl::
  post_GrayResponseUnitType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfGrayResponseUnitType_pimpl
  //

  void typeOfGrayResponseUnitType_pimpl::
  pre ()
  {
  }

  void typeOfGrayResponseUnitType_pimpl::
  use ()
  {
  }

  void typeOfGrayResponseUnitType_pimpl::
  post_typeOfGrayResponseUnitType ()
  {
    post_GrayResponseUnitType ();
  }

  // CIExyType_pimpl
  //

  void CIExyType_pimpl::
  pre ()
  {
  }

  void CIExyType_pimpl::
  post_CIExyType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfCIExyType_pimpl
  //

  void typeOfCIExyType_pimpl::
  pre ()
  {
  }

  void typeOfCIExyType_pimpl::
  use ()
  {
  }

  void typeOfCIExyType_pimpl::
  post_typeOfCIExyType ()
  {
    post_CIExyType ();
  }

  // TargetTypeType_pimpl
  //

  void TargetTypeType_pimpl::
  pre ()
  {
  }

  void TargetTypeType_pimpl::
  post_TargetTypeType ()
  {
    long long v (post_integer ());

    // TODO
    //
  }

  // typeOfTargetTypeType_pimpl
  //

  void typeOfTargetTypeType_pimpl::
  pre ()
  {
  }

  void typeOfTargetTypeType_pimpl::
  use ()
  {
  }

  void typeOfTargetTypeType_pimpl::
  post_typeOfTargetTypeType ()
  {
    post_TargetTypeType ();
  }

  // typeOfPreviousImageMetadataType_pimpl
  //

  void typeOfPreviousImageMetadataType_pimpl::
  pre ()
  {
  }

  void typeOfPreviousImageMetadataType_pimpl::
  post_typeOfPreviousImageMetadataType ()
  {
  }

  // StringType_pimpl
  //

  void StringType_pimpl::
  pre ()
  {
  }

  void StringType_pimpl::
  post_StringType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // typeOfStringType_pimpl
  //

  void typeOfStringType_pimpl::
  pre ()
  {
  }

  void typeOfStringType_pimpl::
  use ()
  {
  }

  void typeOfStringType_pimpl::
  post_typeOfStringType ()
  {
    post_StringType ();
  }

  // NonNegativeRealType_pimpl
  //

  void NonNegativeRealType_pimpl::
  pre ()
  {
  }

  void NonNegativeRealType_pimpl::
  post_NonNegativeRealType ()
  {
    float v (post_float ());

    // TODO
    //
  }

  // typeOfNonNegativeRealType_pimpl
  //

  void typeOfNonNegativeRealType_pimpl::
  pre ()
  {
  }

  void typeOfNonNegativeRealType_pimpl::
  use ()
  {
  }

  void typeOfNonNegativeRealType_pimpl::
  post_typeOfNonNegativeRealType ()
  {
    post_NonNegativeRealType ();
  }

  // PositiveIntegerType_pimpl
  //

  void PositiveIntegerType_pimpl::
  pre ()
  {
  }

  void PositiveIntegerType_pimpl::
  post_PositiveIntegerType ()
  {
    unsigned long long v (post_positive_integer ());

    // TODO
    //
  }

  // typeOfPositiveIntegerType_pimpl
  //

  void typeOfPositiveIntegerType_pimpl::
  pre ()
  {
  }

  void typeOfPositiveIntegerType_pimpl::
  use ()
  {
  }

  void typeOfPositiveIntegerType_pimpl::
  post_typeOfPositiveIntegerType ()
  {
    post_PositiveIntegerType ();
  }

  // DateTimeType_pimpl
  //

  void DateTimeType_pimpl::
  pre ()
  {
  }

  void DateTimeType_pimpl::
  post_DateTimeType ()
  {
    const ::xml_schema::date_time& v (post_date_time ());

    // TODO
    //
  }

  // typeOfDateTimeType_pimpl
  //

  void typeOfDateTimeType_pimpl::
  pre ()
  {
  }

  void typeOfDateTimeType_pimpl::
  use ()
  {
  }

  void typeOfDateTimeType_pimpl::
  post_typeOfDateTimeType ()
  {
    post_DateTimeType ();
  }

  // ReferenceType_pimpl
  //

  void ReferenceType_pimpl::
  pre ()
  {
  }

  void ReferenceType_pimpl::
  post_ReferenceType ()
  {
    const ::std::string& v (post_uri ());

    // TODO
    //
  }

  // typeOfReferenceType_pimpl
  //

  void typeOfReferenceType_pimpl::
  pre ()
  {
  }

  void typeOfReferenceType_pimpl::
  use ()
  {
  }

  void typeOfReferenceType_pimpl::
  post_typeOfReferenceType ()
  {
    post_ReferenceType ();
  }

  // mix_pimpl
  //

  void mix_pimpl::
  pre ()
  {
  }

  void mix_pimpl::
  post_mix ()
  {
    post_mixType ();
  }

  // Format_pimpl
  //

  void Format_pimpl::
  pre ()
  {
  }

  void Format_pimpl::
  MIMEType ()
  {
  }

  void Format_pimpl::
  ByteOrder ()
  {
  }

  void Format_pimpl::
  Compression ()
  {
  }

  void Format_pimpl::
  PhotometricInterpretation ()
  {
  }

  void Format_pimpl::
  Segments ()
  {
  }

  void Format_pimpl::
  PlanarConfiguration ()
  {
  }

  void Format_pimpl::
  post_Format ()
  {
  }

  // File_pimpl
  //

  void File_pimpl::
  pre ()
  {
  }

  void File_pimpl::
  ImageIdentifier ()
  {
  }

  void File_pimpl::
  FileSize ()
  {
  }

  void File_pimpl::
  Checksum ()
  {
  }

  void File_pimpl::
  Orientation ()
  {
  }

  void File_pimpl::
  DisplayOrientation ()
  {
  }

  void File_pimpl::
  TargetedDisplayAR ()
  {
  }

  void File_pimpl::
  post_File ()
  {
  }

  // Host_pimpl
  //

  void Host_pimpl::
  pre ()
  {
  }

  void Host_pimpl::
  HostComputer ()
  {
  }

  void Host_pimpl::
  OperatingSystem ()
  {
  }

  void Host_pimpl::
  OSVersion ()
  {
  }

  void Host_pimpl::
  post_Host ()
  {
  }

  // ScanningSystemCapture_pimpl
  //

  void ScanningSystemCapture_pimpl::
  pre ()
  {
  }

  void ScanningSystemCapture_pimpl::
  ScanningSystemHardware ()
  {
  }

  void ScanningSystemCapture_pimpl::
  ScanningSystemSoftware ()
  {
  }

  void ScanningSystemCapture_pimpl::
  ScannerCaptureSettings ()
  {
  }

  void ScanningSystemCapture_pimpl::
  post_ScanningSystemCapture ()
  {
  }

  // DigitalCameraCapture_pimpl
  //

  void DigitalCameraCapture_pimpl::
  pre ()
  {
  }

  void DigitalCameraCapture_pimpl::
  DigitalCameraManufacturer ()
  {
  }

  void DigitalCameraCapture_pimpl::
  DigitalCameraModel ()
  {
  }

  void DigitalCameraCapture_pimpl::
  post_DigitalCameraCapture ()
  {
  }

  // CameraCaptureSettings_pimpl
  //

  void CameraCaptureSettings_pimpl::
  pre ()
  {
  }

  void CameraCaptureSettings_pimpl::
  FNumber ()
  {
  }

  void CameraCaptureSettings_pimpl::
  ExposureTime ()
  {
  }

  void CameraCaptureSettings_pimpl::
  Brightness ()
  {
  }

  void CameraCaptureSettings_pimpl::
  ExposureBias ()
  {
  }

  void CameraCaptureSettings_pimpl::
  SubjectDistance ()
  {
  }

  void CameraCaptureSettings_pimpl::
  MeteringMode ()
  {
  }

  void CameraCaptureSettings_pimpl::
  SceneIlluminant ()
  {
  }

  void CameraCaptureSettings_pimpl::
  ColorTemp ()
  {
  }

  void CameraCaptureSettings_pimpl::
  FocalLength ()
  {
  }

  void CameraCaptureSettings_pimpl::
  Flash ()
  {
  }

  void CameraCaptureSettings_pimpl::
  FlashEnergy ()
  {
  }

  void CameraCaptureSettings_pimpl::
  FlashReturn ()
  {
  }

  void CameraCaptureSettings_pimpl::
  BackLight ()
  {
  }

  void CameraCaptureSettings_pimpl::
  ExposureIndex ()
  {
  }

  void CameraCaptureSettings_pimpl::
  AutoFocus ()
  {
  }

  void CameraCaptureSettings_pimpl::
  PrintAspectRatio ()
  {
  }

  void CameraCaptureSettings_pimpl::
  post_CameraCaptureSettings ()
  {
  }

  // SpatialMetrics_pimpl
  //

  void SpatialMetrics_pimpl::
  pre ()
  {
  }

  void SpatialMetrics_pimpl::
  SamplingFrequencyPlane ()
  {
  }

  void SpatialMetrics_pimpl::
  SamplingFrequencyUnit ()
  {
  }

  void SpatialMetrics_pimpl::
  XSamplingFrequency ()
  {
  }

  void SpatialMetrics_pimpl::
  YSamplingFrequency ()
  {
  }

  void SpatialMetrics_pimpl::
  ImageWidth ()
  {
  }

  void SpatialMetrics_pimpl::
  ImageLength ()
  {
  }

  void SpatialMetrics_pimpl::
  Source_X ()
  {
  }

  void SpatialMetrics_pimpl::
  Source_Y ()
  {
  }

  void SpatialMetrics_pimpl::
  post_SpatialMetrics ()
  {
  }

  // Energetics_pimpl
  //

  void Energetics_pimpl::
  pre ()
  {
  }

  void Energetics_pimpl::
  BitsPerSample ()
  {
  }

  void Energetics_pimpl::
  SamplesPerPixel ()
  {
  }

  void Energetics_pimpl::
  ExtraSamples ()
  {
  }

  void Energetics_pimpl::
  Colormap ()
  {
  }

  void Energetics_pimpl::
  GrayResponse ()
  {
  }

  void Energetics_pimpl::
  WhitePoint ()
  {
  }

  void Energetics_pimpl::
  PrimaryChromaticities ()
  {
  }

  void Energetics_pimpl::
  post_Energetics ()
  {
  }

  // TargetData_pimpl
  //

  void TargetData_pimpl::
  pre ()
  {
  }

  void TargetData_pimpl::
  TargetType ()
  {
  }

  void TargetData_pimpl::
  TargetID ()
  {
  }

  void TargetData_pimpl::
  ImageData ()
  {
  }

  void TargetData_pimpl::
  PerformanceData ()
  {
  }

  void TargetData_pimpl::
  Profiles ()
  {
  }

  void TargetData_pimpl::
  post_TargetData ()
  {
  }

  // ImageProcessing_pimpl
  //

  void ImageProcessing_pimpl::
  pre ()
  {
  }

  void ImageProcessing_pimpl::
  DateTimeProcessed ()
  {
  }

  void ImageProcessing_pimpl::
  SourceData ()
  {
  }

  void ImageProcessing_pimpl::
  ProcessingAgency ()
  {
  }

  void ImageProcessing_pimpl::
  ProcessingSoftware ()
  {
  }

  void ImageProcessing_pimpl::
  ProcessingActions ()
  {
  }

  void ImageProcessing_pimpl::
  post_ImageProcessing ()
  {
  }

  // Compression_pimpl
  //

  void Compression_pimpl::
  pre ()
  {
  }

  void Compression_pimpl::
  CompressionScheme ()
  {
  }

  void Compression_pimpl::
  CompressionLevel ()
  {
  }

  void Compression_pimpl::
  post_Compression ()
  {
  }

  // PhotometricInterpretation_pimpl
  //

  void PhotometricInterpretation_pimpl::
  pre ()
  {
  }

  void PhotometricInterpretation_pimpl::
  ColorSpace ()
  {
  }

  void PhotometricInterpretation_pimpl::
  ICCProfile ()
  {
  }

  void PhotometricInterpretation_pimpl::
  YCbCrSubSampling ()
  {
  }

  void PhotometricInterpretation_pimpl::
  YCbCrPositioning ()
  {
  }

  void PhotometricInterpretation_pimpl::
  YcbCrCoefficients ()
  {
  }

  void PhotometricInterpretation_pimpl::
  ReferenceBlackWhite ()
  {
  }

  void PhotometricInterpretation_pimpl::
  post_PhotometricInterpretation ()
  {
  }

  // Segments_pimpl
  //

  void Segments_pimpl::
  pre ()
  {
  }

  void Segments_pimpl::
  SegmentType ()
  {
  }

  void Segments_pimpl::
  StripOffsets ()
  {
  }

  void Segments_pimpl::
  RowsPerStrip ()
  {
  }

  void Segments_pimpl::
  StripByteCounts ()
  {
  }

  void Segments_pimpl::
  TileWidth ()
  {
  }

  void Segments_pimpl::
  TileLength ()
  {
  }

  void Segments_pimpl::
  TileOffsets ()
  {
  }

  void Segments_pimpl::
  TileByteCounts ()
  {
  }

  void Segments_pimpl::
  post_Segments ()
  {
  }

  // Checksum_pimpl
  //

  void Checksum_pimpl::
  pre ()
  {
  }

  void Checksum_pimpl::
  ChecksumMethod ()
  {
  }

  void Checksum_pimpl::
  ChecksumValue ()
  {
  }

  void Checksum_pimpl::
  post_Checksum ()
  {
  }

  // TargetedDisplayAR_pimpl
  //

  void TargetedDisplayAR_pimpl::
  pre ()
  {
  }

  void TargetedDisplayAR_pimpl::
  XTargetedDisplayAR ()
  {
  }

  void TargetedDisplayAR_pimpl::
  YTargetedDisplayAR ()
  {
  }

  void TargetedDisplayAR_pimpl::
  post_TargetedDisplayAR ()
  {
  }

  // ScanningSystemHardware_pimpl
  //

  void ScanningSystemHardware_pimpl::
  pre ()
  {
  }

  void ScanningSystemHardware_pimpl::
  ScannerManufacturer ()
  {
  }

  void ScanningSystemHardware_pimpl::
  ScannerModel ()
  {
  }

  void ScanningSystemHardware_pimpl::
  post_ScanningSystemHardware ()
  {
  }

  // ScanningSystemSoftware_pimpl
  //

  void ScanningSystemSoftware_pimpl::
  pre ()
  {
  }

  void ScanningSystemSoftware_pimpl::
  ScanningSoftware ()
  {
  }

  void ScanningSystemSoftware_pimpl::
  ScanningSoftwareVersionNo ()
  {
  }

  void ScanningSystemSoftware_pimpl::
  post_ScanningSystemSoftware ()
  {
  }

  // ScannerCaptureSettings_pimpl
  //

  void ScannerCaptureSettings_pimpl::
  pre ()
  {
  }

  void ScannerCaptureSettings_pimpl::
  PixelSize ()
  {
  }

  void ScannerCaptureSettings_pimpl::
  PhysScanResolution ()
  {
  }

  void ScannerCaptureSettings_pimpl::
  post_ScannerCaptureSettings ()
  {
  }

  // PrintAspectRatio_pimpl
  //

  void PrintAspectRatio_pimpl::
  pre ()
  {
  }

  void PrintAspectRatio_pimpl::
  XPrintAspectRatio ()
  {
  }

  void PrintAspectRatio_pimpl::
  YPrintAspectRatio ()
  {
  }

  void PrintAspectRatio_pimpl::
  post_PrintAspectRatio ()
  {
  }

  // Source_X_pimpl
  //

  void Source_X_pimpl::
  pre ()
  {
  }

  void Source_X_pimpl::
  Source_Xdimension ()
  {
  }

  void Source_X_pimpl::
  Source_XdimensionUnit ()
  {
  }

  void Source_X_pimpl::
  post_Source_X ()
  {
  }

  // Source_Y_pimpl
  //

  void Source_Y_pimpl::
  pre ()
  {
  }

  void Source_Y_pimpl::
  Source_Ydimension ()
  {
  }

  void Source_Y_pimpl::
  Source_YdimensionUnit ()
  {
  }

  void Source_Y_pimpl::
  post_Source_Y ()
  {
  }

  // Colormap_pimpl
  //

  void Colormap_pimpl::
  pre ()
  {
  }

  void Colormap_pimpl::
  Colormap_BitCodeValue ()
  {
  }

  void Colormap_pimpl::
  Colormap_RedValue ()
  {
  }

  void Colormap_pimpl::
  Colormap_GreenValue ()
  {
  }

  void Colormap_pimpl::
  Colormap_BlueValue ()
  {
  }

  void Colormap_pimpl::
  post_Colormap ()
  {
  }

  // GrayResponse_pimpl
  //

  void GrayResponse_pimpl::
  pre ()
  {
  }

  void GrayResponse_pimpl::
  GrayResponseCurve ()
  {
  }

  void GrayResponse_pimpl::
  GrayResponseUnit ()
  {
  }

  void GrayResponse_pimpl::
  post_GrayResponse ()
  {
  }

  // WhitePoint_pimpl
  //

  void WhitePoint_pimpl::
  pre ()
  {
  }

  void WhitePoint_pimpl::
  WhitePoint_Xvalue ()
  {
  }

  void WhitePoint_pimpl::
  WhitePoint_Yvalue ()
  {
  }

  void WhitePoint_pimpl::
  post_WhitePoint ()
  {
  }

  // PrimaryChromaticities_pimpl
  //

  void PrimaryChromaticities_pimpl::
  pre ()
  {
  }

  void PrimaryChromaticities_pimpl::
  PrimaryChromaticities_RedX ()
  {
  }

  void PrimaryChromaticities_pimpl::
  PrimaryChromaticities_RedY ()
  {
  }

  void PrimaryChromaticities_pimpl::
  PrimaryChromaticities_GreenX ()
  {
  }

  void PrimaryChromaticities_pimpl::
  PrimaryChromaticities_GreenY ()
  {
  }

  void PrimaryChromaticities_pimpl::
  PrimaryChromaticities_BlueX ()
  {
  }

  void PrimaryChromaticities_pimpl::
  PrimaryChromaticities_BlueY ()
  {
  }

  void PrimaryChromaticities_pimpl::
  post_PrimaryChromaticities ()
  {
  }

  // TargetID_pimpl
  //

  void TargetID_pimpl::
  pre ()
  {
  }

  void TargetID_pimpl::
  TargetIDManufacturer ()
  {
  }

  void TargetID_pimpl::
  TargetIDName ()
  {
  }

  void TargetID_pimpl::
  TargetIDNo ()
  {
  }

  void TargetID_pimpl::
  TargetIDMedia ()
  {
  }

  void TargetID_pimpl::
  post_TargetID ()
  {
  }

  // ProcessingSoftware_pimpl
  //

  void ProcessingSoftware_pimpl::
  pre ()
  {
  }

  void ProcessingSoftware_pimpl::
  ProcessingSoftwareName ()
  {
  }

  void ProcessingSoftware_pimpl::
  ProcessingSoftwareVersion ()
  {
  }

  void ProcessingSoftware_pimpl::
  post_ProcessingSoftware ()
  {
  }

  // ICCProfile_pimpl
  //

  void ICCProfile_pimpl::
  pre ()
  {
  }

  void ICCProfile_pimpl::
  ProfileName ()
  {
  }

  void ICCProfile_pimpl::
  ProfileURL ()
  {
  }

  void ICCProfile_pimpl::
  post_ICCProfile ()
  {
  }

  // ScannerModel_pimpl
  //

  void ScannerModel_pimpl::
  pre ()
  {
  }

  void ScannerModel_pimpl::
  ScannerModelName ()
  {
  }

  void ScannerModel_pimpl::
  ScannerModelNumber ()
  {
  }

  void ScannerModel_pimpl::
  ScannerModelSerialNo ()
  {
  }

  void ScannerModel_pimpl::
  post_ScannerModel ()
  {
  }

  // PhysScanResolution_pimpl
  //

  void PhysScanResolution_pimpl::
  pre ()
  {
  }

  void PhysScanResolution_pimpl::
  XphysScanResolution ()
  {
  }

  void PhysScanResolution_pimpl::
  YphysScanResolution ()
  {
  }

  void PhysScanResolution_pimpl::
  post_PhysScanResolution ()
  {
  }
}

