// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_________DATA_SCHEMAS_ALTO_1_2_PSKEL_HXX
#define CXX_________DATA_SCHEMAS_ALTO_1_2_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace ALTO
{
  class BlockType_pskel;
  class StringType_pskel;
  class PageSpaceType_pskel;
  class PointsType_pskel;
  class ShapeType_pskel;
  class PolygonType_pskel;
  class EllipseType_pskel;
  class CircleType_pskel;
  class fontTypeType_pskel;
  class fontWidthType_pskel;
  class sourceImageInformationType_pskel;
  class fileIdentifierType_pskel;
  class ocrProcessingType_pskel;
  class processingStepType_pskel;
  class processingSoftwareType_pskel;
  class dateTimeType_pskel;
  class fontStylesType_base_pskel;
  class fontStylesType_pskel;
  class ComposedBlockType_pskel;
  class IllustrationType_pskel;
  class GraphicalElementType_pskel;
  class TextBlockType_pskel;
  class alto_pskel;
  class ALTERNATIVE_pskel;
  class CONTENT_pskel;
  class SUBS_TYPE_pskel;
  class WC_pskel;
  class PC_pskel;
  class TextLine_pskel;
  class Description_pskel;
  class Styles_pskel;
  class Layout_pskel;
  class fontStylesType_base_item_pskel;
  class SP_pskel;
  class HYP_pskel;
  class MeasurementUnit_pskel;
  class OCRProcessing_pskel;
  class TextStyle_pskel;
  class ParagraphStyle_pskel;
  class Page_pskel;
  class ALIGN_pskel;
  class QUALITY_pskel;
  class POSITION_pskel;
  class PC1_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

#include "xlink-pskel.hxx"

namespace ALTO
{
  class BlockType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Shape ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (int);

    virtual void
    WIDTH (int);

    virtual void
    HPOS (int);

    virtual void
    VPOS (int);

    virtual void
    ROTATION (float);

    virtual void
    IDNEXT (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    post_BlockType ();

    // Parser construction API.
    //
    void
    Shape_parser (::ALTO::ShapeType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    STYLEREFS_parser (::xml_schema::idrefs_pskel&);

    void
    HEIGHT_parser (::xml_schema::int_pskel&);

    void
    WIDTH_parser (::xml_schema::int_pskel&);

    void
    HPOS_parser (::xml_schema::int_pskel&);

    void
    VPOS_parser (::xml_schema::int_pskel&);

    void
    ROTATION_parser (::xml_schema::float_pskel&);

    void
    IDNEXT_parser (::xml_schema::idref_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    href_parser (::xml_schema::uri_pskel&);

    void
    role_parser (::xml_schema::string_pskel&);

    void
    arcrole_parser (::xml_schema::string_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    show_parser (::xlink::show_pskel&);

    void
    actuate_parser (::xlink::actuate_pskel&);

    void
    parsers (::ALTO::ShapeType_pskel& /* Shape */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */,
             ::xml_schema::int_pskel& /* HEIGHT */,
             ::xml_schema::int_pskel& /* WIDTH */,
             ::xml_schema::int_pskel& /* HPOS */,
             ::xml_schema::int_pskel& /* VPOS */,
             ::xml_schema::float_pskel& /* ROTATION */,
             ::xml_schema::idref_pskel& /* IDNEXT */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::uri_pskel& /* href */,
             ::xml_schema::string_pskel& /* role */,
             ::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */);

    // Constructor.
    //
    BlockType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::ShapeType_pskel* Shape_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::idrefs_pskel* STYLEREFS_parser_;
    ::xml_schema::int_pskel* HEIGHT_parser_;
    ::xml_schema::int_pskel* WIDTH_parser_;
    ::xml_schema::int_pskel* HPOS_parser_;
    ::xml_schema::int_pskel* VPOS_parser_;
    ::xml_schema::float_pskel* ROTATION_parser_;
    ::xml_schema::idref_pskel* IDNEXT_parser_;
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::uri_pskel* href_parser_;
    ::xml_schema::string_pskel* role_parser_;
    ::xml_schema::string_pskel* arcrole_parser_;
    ::xml_schema::string_pskel* title_parser_;
    ::xlink::show_pskel* show_parser_;
    ::xlink::actuate_pskel* actuate_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::BlockType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool ID;
      bool HEIGHT;
      bool WIDTH;
      bool HPOS;
      bool VPOS;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class StringType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ALTERNATIVE ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (float);

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    CONTENT ();

    virtual void
    STYLE ();

    virtual void
    SUBS_TYPE ();

    virtual void
    SUBS_CONTENT (const ::std::string&);

    virtual void
    WC ();

    virtual void
    CC (const ::std::string&);

    virtual void
    post_StringType ();

    // Parser construction API.
    //
    void
    ALTERNATIVE_parser (::ALTO::ALTERNATIVE_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    STYLEREFS_parser (::xml_schema::idrefs_pskel&);

    void
    HEIGHT_parser (::xml_schema::float_pskel&);

    void
    WIDTH_parser (::xml_schema::float_pskel&);

    void
    HPOS_parser (::xml_schema::float_pskel&);

    void
    VPOS_parser (::xml_schema::float_pskel&);

    void
    CONTENT_parser (::ALTO::CONTENT_pskel&);

    void
    STYLE_parser (::ALTO::fontStylesType_pskel&);

    void
    SUBS_TYPE_parser (::ALTO::SUBS_TYPE_pskel&);

    void
    SUBS_CONTENT_parser (::xml_schema::string_pskel&);

    void
    WC_parser (::ALTO::WC_pskel&);

    void
    CC_parser (::xml_schema::string_pskel&);

    void
    parsers (::ALTO::ALTERNATIVE_pskel& /* ALTERNATIVE */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */,
             ::xml_schema::float_pskel& /* HEIGHT */,
             ::xml_schema::float_pskel& /* WIDTH */,
             ::xml_schema::float_pskel& /* HPOS */,
             ::xml_schema::float_pskel& /* VPOS */,
             ::ALTO::CONTENT_pskel& /* CONTENT */,
             ::ALTO::fontStylesType_pskel& /* STYLE */,
             ::ALTO::SUBS_TYPE_pskel& /* SUBS_TYPE */,
             ::xml_schema::string_pskel& /* SUBS_CONTENT */,
             ::ALTO::WC_pskel& /* WC */,
             ::xml_schema::string_pskel& /* CC */);

    // Constructor.
    //
    StringType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::ALTERNATIVE_pskel* ALTERNATIVE_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::idrefs_pskel* STYLEREFS_parser_;
    ::xml_schema::float_pskel* HEIGHT_parser_;
    ::xml_schema::float_pskel* WIDTH_parser_;
    ::xml_schema::float_pskel* HPOS_parser_;
    ::xml_schema::float_pskel* VPOS_parser_;
    ::ALTO::CONTENT_pskel* CONTENT_parser_;
    ::ALTO::fontStylesType_pskel* STYLE_parser_;
    ::ALTO::SUBS_TYPE_pskel* SUBS_TYPE_parser_;
    ::xml_schema::string_pskel* SUBS_CONTENT_parser_;
    ::ALTO::WC_pskel* WC_parser_;
    ::xml_schema::string_pskel* CC_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::StringType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool CONTENT;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class PageSpaceType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TextBlock ();

    virtual void
    Illustration ();

    virtual void
    GraphicalElement ();

    virtual void
    ComposedBlock ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (float);

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    PC ();

    virtual void
    post_PageSpaceType ();

    // Parser construction API.
    //
    void
    TextBlock_parser (::ALTO::TextBlockType_pskel&);

    void
    Illustration_parser (::ALTO::IllustrationType_pskel&);

    void
    GraphicalElement_parser (::ALTO::GraphicalElementType_pskel&);

    void
    ComposedBlock_parser (::ALTO::ComposedBlockType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    STYLEREFS_parser (::xml_schema::idrefs_pskel&);

    void
    HEIGHT_parser (::xml_schema::float_pskel&);

    void
    WIDTH_parser (::xml_schema::float_pskel&);

    void
    HPOS_parser (::xml_schema::float_pskel&);

    void
    VPOS_parser (::xml_schema::float_pskel&);

    void
    PC_parser (::ALTO::PC_pskel&);

    void
    parsers (::ALTO::TextBlockType_pskel& /* TextBlock */,
             ::ALTO::IllustrationType_pskel& /* Illustration */,
             ::ALTO::GraphicalElementType_pskel& /* GraphicalElement */,
             ::ALTO::ComposedBlockType_pskel& /* ComposedBlock */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */,
             ::xml_schema::float_pskel& /* HEIGHT */,
             ::xml_schema::float_pskel& /* WIDTH */,
             ::xml_schema::float_pskel& /* HPOS */,
             ::xml_schema::float_pskel& /* VPOS */,
             ::ALTO::PC_pskel& /* PC */);

    // Constructor.
    //
    PageSpaceType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::TextBlockType_pskel* TextBlock_parser_;
    ::ALTO::IllustrationType_pskel* Illustration_parser_;
    ::ALTO::GraphicalElementType_pskel* GraphicalElement_parser_;
    ::ALTO::ComposedBlockType_pskel* ComposedBlock_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::idrefs_pskel* STYLEREFS_parser_;
    ::xml_schema::float_pskel* HEIGHT_parser_;
    ::xml_schema::float_pskel* WIDTH_parser_;
    ::xml_schema::float_pskel* HPOS_parser_;
    ::xml_schema::float_pskel* VPOS_parser_;
    ::ALTO::PC_pskel* PC_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::PageSpaceType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

    protected:
    struct v_state_attr_
    {
      bool HEIGHT;
      bool WIDTH;
      bool HPOS;
      bool VPOS;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class PointsType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PointsType ();
  };

  class ShapeType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Polygon ();

    virtual void
    Ellipse ();

    virtual void
    Circle ();

    virtual void
    post_ShapeType ();

    // Parser construction API.
    //
    void
    Polygon_parser (::ALTO::PolygonType_pskel&);

    void
    Ellipse_parser (::ALTO::EllipseType_pskel&);

    void
    Circle_parser (::ALTO::CircleType_pskel&);

    void
    parsers (::ALTO::PolygonType_pskel& /* Polygon */,
             ::ALTO::EllipseType_pskel& /* Ellipse */,
             ::ALTO::CircleType_pskel& /* Circle */);

    // Constructor.
    //
    ShapeType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::ALTO::PolygonType_pskel* Polygon_parser_;
    ::ALTO::EllipseType_pskel* Ellipse_parser_;
    ::ALTO::CircleType_pskel* Circle_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::ShapeType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class PolygonType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    POINTS ();

    virtual void
    post_PolygonType ();

    // Parser construction API.
    //
    void
    POINTS_parser (::ALTO::PointsType_pskel&);

    void
    parsers (::ALTO::PointsType_pskel& /* POINTS */);

    // Constructor.
    //
    PolygonType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::PointsType_pskel* POINTS_parser_;

    protected:
    struct v_state_attr_
    {
      bool POINTS;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class EllipseType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    HPOS ();

    virtual void
    VPOS ();

    virtual void
    HLENGTH ();

    virtual void
    VLENGTH ();

    virtual void
    post_EllipseType ();

    // Parser construction API.
    //
    void
    HPOS_parser (::xml_schema::any_simple_type_pskel&);

    void
    VPOS_parser (::xml_schema::any_simple_type_pskel&);

    void
    HLENGTH_parser (::xml_schema::any_simple_type_pskel&);

    void
    VLENGTH_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* HPOS */,
             ::xml_schema::any_simple_type_pskel& /* VPOS */,
             ::xml_schema::any_simple_type_pskel& /* HLENGTH */,
             ::xml_schema::any_simple_type_pskel& /* VLENGTH */);

    // Constructor.
    //
    EllipseType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* HPOS_parser_;
    ::xml_schema::any_simple_type_pskel* VPOS_parser_;
    ::xml_schema::any_simple_type_pskel* HLENGTH_parser_;
    ::xml_schema::any_simple_type_pskel* VLENGTH_parser_;
  };

  class CircleType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    HPOS ();

    virtual void
    VPOS ();

    virtual void
    RADIUS ();

    virtual void
    post_CircleType ();

    // Parser construction API.
    //
    void
    HPOS_parser (::xml_schema::any_simple_type_pskel&);

    void
    VPOS_parser (::xml_schema::any_simple_type_pskel&);

    void
    RADIUS_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* HPOS */,
             ::xml_schema::any_simple_type_pskel& /* VPOS */,
             ::xml_schema::any_simple_type_pskel& /* RADIUS */);

    // Constructor.
    //
    CircleType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* HPOS_parser_;
    ::xml_schema::any_simple_type_pskel* VPOS_parser_;
    ::xml_schema::any_simple_type_pskel* RADIUS_parser_;
  };

  class fontTypeType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_fontTypeType ();
  };

  class fontWidthType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_fontWidthType ();
  };

  class sourceImageInformationType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    fileName (const ::std::string&);

    virtual void
    fileIdentifier ();

    virtual void
    post_sourceImageInformationType ();

    // Parser construction API.
    //
    void
    fileName_parser (::xml_schema::string_pskel&);

    void
    fileIdentifier_parser (::ALTO::fileIdentifierType_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* fileName */,
             ::ALTO::fileIdentifierType_pskel& /* fileIdentifier */);

    // Constructor.
    //
    sourceImageInformationType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* fileName_parser_;
    ::ALTO::fileIdentifierType_pskel* fileIdentifier_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::sourceImageInformationType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class fileIdentifierType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    fileIdentifierLocation ();

    virtual void
    post_fileIdentifierType ();

    // Parser construction API.
    //
    void
    fileIdentifierLocation_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* fileIdentifierLocation */);

    // Constructor.
    //
    fileIdentifierType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* fileIdentifierLocation_parser_;
  };

  class ocrProcessingType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    preProcessingStep ();

    virtual void
    ocrProcessingStep ();

    virtual void
    postProcessingStep ();

    virtual void
    post_ocrProcessingType ();

    // Parser construction API.
    //
    void
    preProcessingStep_parser (::ALTO::processingStepType_pskel&);

    void
    ocrProcessingStep_parser (::ALTO::processingStepType_pskel&);

    void
    postProcessingStep_parser (::ALTO::processingStepType_pskel&);

    void
    parsers (::ALTO::processingStepType_pskel& /* preProcessingStep */,
             ::ALTO::processingStepType_pskel& /* ocrProcessingStep */,
             ::ALTO::processingStepType_pskel& /* postProcessingStep */);

    // Constructor.
    //
    ocrProcessingType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::ALTO::processingStepType_pskel* preProcessingStep_parser_;
    ::ALTO::processingStepType_pskel* ocrProcessingStep_parser_;
    ::ALTO::processingStepType_pskel* postProcessingStep_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::ocrProcessingType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class processingStepType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    processingDateTime ();

    virtual void
    processingAgency (const ::std::string&);

    virtual void
    processingStepDescription (const ::std::string&);

    virtual void
    processingStepSettings (const ::std::string&);

    virtual void
    processingSoftware ();

    virtual void
    post_processingStepType ();

    // Parser construction API.
    //
    void
    processingDateTime_parser (::ALTO::dateTimeType_pskel&);

    void
    processingAgency_parser (::xml_schema::string_pskel&);

    void
    processingStepDescription_parser (::xml_schema::string_pskel&);

    void
    processingStepSettings_parser (::xml_schema::string_pskel&);

    void
    processingSoftware_parser (::ALTO::processingSoftwareType_pskel&);

    void
    parsers (::ALTO::dateTimeType_pskel& /* processingDateTime */,
             ::xml_schema::string_pskel& /* processingAgency */,
             ::xml_schema::string_pskel& /* processingStepDescription */,
             ::xml_schema::string_pskel& /* processingStepSettings */,
             ::ALTO::processingSoftwareType_pskel& /* processingSoftware */);

    // Constructor.
    //
    processingStepType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::ALTO::dateTimeType_pskel* processingDateTime_parser_;
    ::xml_schema::string_pskel* processingAgency_parser_;
    ::xml_schema::string_pskel* processingStepDescription_parser_;
    ::xml_schema::string_pskel* processingStepSettings_parser_;
    ::ALTO::processingSoftwareType_pskel* processingSoftware_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::processingStepType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class processingSoftwareType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    softwareCreator (const ::std::string&);

    virtual void
    softwareName (const ::std::string&);

    virtual void
    softwareVersion (const ::std::string&);

    virtual void
    applicationDescription (const ::std::string&);

    virtual void
    post_processingSoftwareType ();

    // Parser construction API.
    //
    void
    softwareCreator_parser (::xml_schema::string_pskel&);

    void
    softwareName_parser (::xml_schema::string_pskel&);

    void
    softwareVersion_parser (::xml_schema::string_pskel&);

    void
    applicationDescription_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* softwareCreator */,
             ::xml_schema::string_pskel& /* softwareName */,
             ::xml_schema::string_pskel& /* softwareVersion */,
             ::xml_schema::string_pskel& /* applicationDescription */);

    // Constructor.
    //
    processingSoftwareType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* softwareCreator_parser_;
    ::xml_schema::string_pskel* softwareName_parser_;
    ::xml_schema::string_pskel* softwareVersion_parser_;
    ::xml_schema::string_pskel* applicationDescription_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::processingSoftwareType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class dateTimeType_pskel: public ::xml_schema::simple_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();
    //
    // virtual void
    // _characters (const ::xml_schema::ro_string&);

    virtual void
    post_dateTimeType ();
  };

  class fontStylesType_base_pskel: public ::xml_schema::list_base
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    item ();

    virtual void
    post_fontStylesType_base ();

    // Parser construction API.
    //
    void
    item_parser (::ALTO::fontStylesType_base_item_pskel&);

    void
    parsers (::ALTO::fontStylesType_base_item_pskel& /* item */);

    // Constructor.
    //
    fontStylesType_base_pskel ();

    // Implementation.
    //
    protected:
    virtual void
    _xsd_parse_item (const ::xml_schema::ro_string&);

    protected:
    ::ALTO::fontStylesType_base_item_pskel* _xsd_item_;
  };

  class fontStylesType_pskel: public virtual ::ALTO::fontStylesType_base_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_fontStylesType ();
  };

  class ComposedBlockType_pskel: public virtual ::ALTO::BlockType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TextBlock ();

    virtual void
    Illustration ();

    virtual void
    GraphicalElement ();

    virtual void
    ComposedBlock ();

    virtual void
    TYPE (const ::std::string&);

    virtual void
    FILEID (const ::std::string&);

    virtual void
    post_ComposedBlockType ();

    // Parser construction API.
    //
    void
    TextBlock_parser (::ALTO::TextBlockType_pskel&);

    void
    Illustration_parser (::ALTO::IllustrationType_pskel&);

    void
    GraphicalElement_parser (::ALTO::GraphicalElementType_pskel&);

    void
    ComposedBlock_parser (::ALTO::ComposedBlockType_pskel&);

    void
    TYPE_parser (::xml_schema::string_pskel&);

    void
    FILEID_parser (::xml_schema::string_pskel&);

    void
    parsers (::ALTO::ShapeType_pskel& /* Shape */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */,
             ::xml_schema::int_pskel& /* HEIGHT */,
             ::xml_schema::int_pskel& /* WIDTH */,
             ::xml_schema::int_pskel& /* HPOS */,
             ::xml_schema::int_pskel& /* VPOS */,
             ::xml_schema::float_pskel& /* ROTATION */,
             ::xml_schema::idref_pskel& /* IDNEXT */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::uri_pskel& /* href */,
             ::xml_schema::string_pskel& /* role */,
             ::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */,
             ::ALTO::TextBlockType_pskel& /* TextBlock */,
             ::ALTO::IllustrationType_pskel& /* Illustration */,
             ::ALTO::GraphicalElementType_pskel& /* GraphicalElement */,
             ::ALTO::ComposedBlockType_pskel& /* ComposedBlock */,
             ::xml_schema::string_pskel& /* TYPE */,
             ::xml_schema::string_pskel& /* FILEID */);

    // Constructor.
    //
    ComposedBlockType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::TextBlockType_pskel* TextBlock_parser_;
    ::ALTO::IllustrationType_pskel* Illustration_parser_;
    ::ALTO::GraphicalElementType_pskel* GraphicalElement_parser_;
    ::ALTO::ComposedBlockType_pskel* ComposedBlock_parser_;
    ::xml_schema::string_pskel* TYPE_parser_;
    ::xml_schema::string_pskel* FILEID_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::ComposedBlockType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class IllustrationType_pskel: public virtual ::ALTO::BlockType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TYPE (const ::std::string&);

    virtual void
    FILEID (const ::std::string&);

    virtual void
    post_IllustrationType ();

    // Parser construction API.
    //
    void
    TYPE_parser (::xml_schema::string_pskel&);

    void
    FILEID_parser (::xml_schema::string_pskel&);

    void
    parsers (::ALTO::ShapeType_pskel& /* Shape */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */,
             ::xml_schema::int_pskel& /* HEIGHT */,
             ::xml_schema::int_pskel& /* WIDTH */,
             ::xml_schema::int_pskel& /* HPOS */,
             ::xml_schema::int_pskel& /* VPOS */,
             ::xml_schema::float_pskel& /* ROTATION */,
             ::xml_schema::idref_pskel& /* IDNEXT */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::uri_pskel& /* href */,
             ::xml_schema::string_pskel& /* role */,
             ::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */,
             ::xml_schema::string_pskel& /* TYPE */,
             ::xml_schema::string_pskel& /* FILEID */);

    // Constructor.
    //
    IllustrationType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* TYPE_parser_;
    ::xml_schema::string_pskel* FILEID_parser_;
  };

  class GraphicalElementType_pskel: public virtual ::ALTO::BlockType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GraphicalElementType ();
  };

  class TextBlockType_pskel: public virtual ::ALTO::BlockType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TextLine ();

    virtual void
    language (const ::std::string&);

    virtual void
    post_TextBlockType ();

    // Parser construction API.
    //
    void
    TextLine_parser (::ALTO::TextLine_pskel&);

    void
    language_parser (::xml_schema::language_pskel&);

    void
    parsers (::ALTO::ShapeType_pskel& /* Shape */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */,
             ::xml_schema::int_pskel& /* HEIGHT */,
             ::xml_schema::int_pskel& /* WIDTH */,
             ::xml_schema::int_pskel& /* HPOS */,
             ::xml_schema::int_pskel& /* VPOS */,
             ::xml_schema::float_pskel& /* ROTATION */,
             ::xml_schema::idref_pskel& /* IDNEXT */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::uri_pskel& /* href */,
             ::xml_schema::string_pskel& /* role */,
             ::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */,
             ::ALTO::TextLine_pskel& /* TextLine */,
             ::xml_schema::language_pskel& /* language */);

    // Constructor.
    //
    TextBlockType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::TextLine_pskel* TextLine_parser_;
    ::xml_schema::language_pskel* language_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::TextBlockType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class alto_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Description ();

    virtual void
    Styles ();

    virtual void
    Layout ();

    virtual void
    post_alto ();

    // Parser construction API.
    //
    void
    Description_parser (::ALTO::Description_pskel&);

    void
    Styles_parser (::ALTO::Styles_pskel&);

    void
    Layout_parser (::ALTO::Layout_pskel&);

    void
    parsers (::ALTO::Description_pskel& /* Description */,
             ::ALTO::Styles_pskel& /* Styles */,
             ::ALTO::Layout_pskel& /* Layout */);

    // Constructor.
    //
    alto_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::ALTO::Description_pskel* Description_parser_;
    ::ALTO::Styles_pskel* Styles_parser_;
    ::ALTO::Layout_pskel* Layout_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::alto_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ALTERNATIVE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    PURPOSE (const ::std::string&);

    virtual void
    post_ALTERNATIVE ();

    // Parser construction API.
    //
    void
    PURPOSE_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* PURPOSE */);

    // Constructor.
    //
    ALTERNATIVE_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* PURPOSE_parser_;
  };

  class CONTENT_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CONTENT ();
  };

  class SUBS_TYPE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SUBS_TYPE ();
  };

  class WC_pskel: public virtual ::xml_schema::float_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_WC ();
  };

  class PC_pskel: public virtual ::xml_schema::float_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PC ();
  };

  class TextLine_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    String ();

    virtual void
    SP ();

    virtual void
    HYP ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (float);

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    BASELINE (float);

    virtual void
    CS (bool);

    virtual void
    post_TextLine ();

    // Parser construction API.
    //
    void
    String_parser (::ALTO::StringType_pskel&);

    void
    SP_parser (::ALTO::SP_pskel&);

    void
    HYP_parser (::ALTO::HYP_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    STYLEREFS_parser (::xml_schema::idrefs_pskel&);

    void
    HEIGHT_parser (::xml_schema::float_pskel&);

    void
    WIDTH_parser (::xml_schema::float_pskel&);

    void
    HPOS_parser (::xml_schema::float_pskel&);

    void
    VPOS_parser (::xml_schema::float_pskel&);

    void
    BASELINE_parser (::xml_schema::float_pskel&);

    void
    CS_parser (::xml_schema::boolean_pskel&);

    void
    parsers (::ALTO::StringType_pskel& /* String */,
             ::ALTO::SP_pskel& /* SP */,
             ::ALTO::HYP_pskel& /* HYP */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */,
             ::xml_schema::float_pskel& /* HEIGHT */,
             ::xml_schema::float_pskel& /* WIDTH */,
             ::xml_schema::float_pskel& /* HPOS */,
             ::xml_schema::float_pskel& /* VPOS */,
             ::xml_schema::float_pskel& /* BASELINE */,
             ::xml_schema::boolean_pskel& /* CS */);

    // Constructor.
    //
    TextLine_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::StringType_pskel* String_parser_;
    ::ALTO::SP_pskel* SP_parser_;
    ::ALTO::HYP_pskel* HYP_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::idrefs_pskel* STYLEREFS_parser_;
    ::xml_schema::float_pskel* HEIGHT_parser_;
    ::xml_schema::float_pskel* WIDTH_parser_;
    ::xml_schema::float_pskel* HPOS_parser_;
    ::xml_schema::float_pskel* VPOS_parser_;
    ::xml_schema::float_pskel* BASELINE_parser_;
    ::xml_schema::boolean_pskel* CS_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::TextLine_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_1 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool HEIGHT;
      bool WIDTH;
      bool HPOS;
      bool VPOS;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Description_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    MeasurementUnit ();

    virtual void
    sourceImageInformation ();

    virtual void
    OCRProcessing ();

    virtual void
    post_Description ();

    // Parser construction API.
    //
    void
    MeasurementUnit_parser (::ALTO::MeasurementUnit_pskel&);

    void
    sourceImageInformation_parser (::ALTO::sourceImageInformationType_pskel&);

    void
    OCRProcessing_parser (::ALTO::OCRProcessing_pskel&);

    void
    parsers (::ALTO::MeasurementUnit_pskel& /* MeasurementUnit */,
             ::ALTO::sourceImageInformationType_pskel& /* sourceImageInformation */,
             ::ALTO::OCRProcessing_pskel& /* OCRProcessing */);

    // Constructor.
    //
    Description_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::ALTO::MeasurementUnit_pskel* MeasurementUnit_parser_;
    ::ALTO::sourceImageInformationType_pskel* sourceImageInformation_parser_;
    ::ALTO::OCRProcessing_pskel* OCRProcessing_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::Description_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Styles_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TextStyle ();

    virtual void
    ParagraphStyle ();

    virtual void
    post_Styles ();

    // Parser construction API.
    //
    void
    TextStyle_parser (::ALTO::TextStyle_pskel&);

    void
    ParagraphStyle_parser (::ALTO::ParagraphStyle_pskel&);

    void
    parsers (::ALTO::TextStyle_pskel& /* TextStyle */,
             ::ALTO::ParagraphStyle_pskel& /* ParagraphStyle */);

    // Constructor.
    //
    Styles_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::ALTO::TextStyle_pskel* TextStyle_parser_;
    ::ALTO::ParagraphStyle_pskel* ParagraphStyle_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::Styles_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Layout_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Page ();

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    post_Layout ();

    // Parser construction API.
    //
    void
    Page_parser (::ALTO::Page_pskel&);

    void
    STYLEREFS_parser (::xml_schema::idrefs_pskel&);

    void
    parsers (::ALTO::Page_pskel& /* Page */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */);

    // Constructor.
    //
    Layout_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::Page_pskel* Page_parser_;
    ::xml_schema::idrefs_pskel* STYLEREFS_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::Layout_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class fontStylesType_base_item_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_fontStylesType_base_item ();
  };

  class SP_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    post_SP ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    WIDTH_parser (::xml_schema::float_pskel&);

    void
    HPOS_parser (::xml_schema::float_pskel&);

    void
    VPOS_parser (::xml_schema::float_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::xml_schema::float_pskel& /* WIDTH */,
             ::xml_schema::float_pskel& /* HPOS */,
             ::xml_schema::float_pskel& /* VPOS */);

    // Constructor.
    //
    SP_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::float_pskel* WIDTH_parser_;
    ::xml_schema::float_pskel* HPOS_parser_;
    ::xml_schema::float_pskel* VPOS_parser_;
  };

  class HYP_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    CONTENT ();

    virtual void
    post_HYP ();

    // Parser construction API.
    //
    void
    WIDTH_parser (::xml_schema::float_pskel&);

    void
    HPOS_parser (::xml_schema::float_pskel&);

    void
    VPOS_parser (::xml_schema::float_pskel&);

    void
    CONTENT_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::float_pskel& /* WIDTH */,
             ::xml_schema::float_pskel& /* HPOS */,
             ::xml_schema::float_pskel& /* VPOS */,
             ::xml_schema::any_simple_type_pskel& /* CONTENT */);

    // Constructor.
    //
    HYP_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::float_pskel* WIDTH_parser_;
    ::xml_schema::float_pskel* HPOS_parser_;
    ::xml_schema::float_pskel* VPOS_parser_;
    ::xml_schema::any_simple_type_pskel* CONTENT_parser_;

    protected:
    struct v_state_attr_
    {
      bool CONTENT;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class MeasurementUnit_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MeasurementUnit ();
  };

  class OCRProcessing_pskel: public virtual ::ALTO::ocrProcessingType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_OCRProcessing ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    parsers (::ALTO::processingStepType_pskel& /* preProcessingStep */,
             ::ALTO::processingStepType_pskel& /* ocrProcessingStep */,
             ::ALTO::processingStepType_pskel& /* postProcessingStep */,
             ::xml_schema::id_pskel& /* ID */);

    // Constructor.
    //
    OCRProcessing_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;

    protected:
    struct v_state_attr_
    {
      bool ID;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class TextStyle_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    FONTFAMILY (const ::std::string&);

    virtual void
    FONTTYPE ();

    virtual void
    FONTWIDTH ();

    virtual void
    FONTSIZE (float);

    virtual void
    FONTCOLOR (::std::auto_ptr< ::xml_schema::buffer >);

    virtual void
    FONTSTYLE ();

    virtual void
    post_TextStyle ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    FONTFAMILY_parser (::xml_schema::string_pskel&);

    void
    FONTTYPE_parser (::ALTO::fontTypeType_pskel&);

    void
    FONTWIDTH_parser (::ALTO::fontWidthType_pskel&);

    void
    FONTSIZE_parser (::xml_schema::float_pskel&);

    void
    FONTCOLOR_parser (::xml_schema::hex_binary_pskel&);

    void
    FONTSTYLE_parser (::ALTO::fontStylesType_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* FONTFAMILY */,
             ::ALTO::fontTypeType_pskel& /* FONTTYPE */,
             ::ALTO::fontWidthType_pskel& /* FONTWIDTH */,
             ::xml_schema::float_pskel& /* FONTSIZE */,
             ::xml_schema::hex_binary_pskel& /* FONTCOLOR */,
             ::ALTO::fontStylesType_pskel& /* FONTSTYLE */);

    // Constructor.
    //
    TextStyle_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* FONTFAMILY_parser_;
    ::ALTO::fontTypeType_pskel* FONTTYPE_parser_;
    ::ALTO::fontWidthType_pskel* FONTWIDTH_parser_;
    ::xml_schema::float_pskel* FONTSIZE_parser_;
    ::xml_schema::hex_binary_pskel* FONTCOLOR_parser_;
    ::ALTO::fontStylesType_pskel* FONTSTYLE_parser_;

    protected:
    struct v_state_attr_
    {
      bool FONTSIZE;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class ParagraphStyle_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    ALIGN ();

    virtual void
    LEFT (float);

    virtual void
    RIGHT (float);

    virtual void
    LINESPACE (float);

    virtual void
    FIRSTLINE (float);

    virtual void
    post_ParagraphStyle ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    ALIGN_parser (::ALTO::ALIGN_pskel&);

    void
    LEFT_parser (::xml_schema::float_pskel&);

    void
    RIGHT_parser (::xml_schema::float_pskel&);

    void
    LINESPACE_parser (::xml_schema::float_pskel&);

    void
    FIRSTLINE_parser (::xml_schema::float_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::ALTO::ALIGN_pskel& /* ALIGN */,
             ::xml_schema::float_pskel& /* LEFT */,
             ::xml_schema::float_pskel& /* RIGHT */,
             ::xml_schema::float_pskel& /* LINESPACE */,
             ::xml_schema::float_pskel& /* FIRSTLINE */);

    // Constructor.
    //
    ParagraphStyle_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::ALTO::ALIGN_pskel* ALIGN_parser_;
    ::xml_schema::float_pskel* LEFT_parser_;
    ::xml_schema::float_pskel* RIGHT_parser_;
    ::xml_schema::float_pskel* LINESPACE_parser_;
    ::xml_schema::float_pskel* FIRSTLINE_parser_;

    protected:
    struct v_state_attr_
    {
      bool ID;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class Page_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TopMargin ();

    virtual void
    LeftMargin ();

    virtual void
    RightMargin ();

    virtual void
    BottomMargin ();

    virtual void
    PrintSpace ();

    virtual void
    ID (const ::std::string&);

    virtual void
    PAGECLASS (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (int);

    virtual void
    WIDTH (int);

    virtual void
    PHYSICAL_IMG_NR (int);

    virtual void
    PRINTED_IMG_NR (const ::std::string&);

    virtual void
    QUALITY ();

    virtual void
    POSITION ();

    virtual void
    PROCESSING (const ::std::string&);

    virtual void
    ACCURACY (float);

    virtual void
    PC ();

    virtual void
    post_Page ();

    // Parser construction API.
    //
    void
    TopMargin_parser (::ALTO::PageSpaceType_pskel&);

    void
    LeftMargin_parser (::ALTO::PageSpaceType_pskel&);

    void
    RightMargin_parser (::ALTO::PageSpaceType_pskel&);

    void
    BottomMargin_parser (::ALTO::PageSpaceType_pskel&);

    void
    PrintSpace_parser (::ALTO::PageSpaceType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    PAGECLASS_parser (::xml_schema::string_pskel&);

    void
    STYLEREFS_parser (::xml_schema::idrefs_pskel&);

    void
    HEIGHT_parser (::xml_schema::int_pskel&);

    void
    WIDTH_parser (::xml_schema::int_pskel&);

    void
    PHYSICAL_IMG_NR_parser (::xml_schema::int_pskel&);

    void
    PRINTED_IMG_NR_parser (::xml_schema::string_pskel&);

    void
    QUALITY_parser (::ALTO::QUALITY_pskel&);

    void
    POSITION_parser (::ALTO::POSITION_pskel&);

    void
    PROCESSING_parser (::xml_schema::idref_pskel&);

    void
    ACCURACY_parser (::xml_schema::float_pskel&);

    void
    PC_parser (::ALTO::PC1_pskel&);

    void
    parsers (::ALTO::PageSpaceType_pskel& /* TopMargin */,
             ::ALTO::PageSpaceType_pskel& /* LeftMargin */,
             ::ALTO::PageSpaceType_pskel& /* RightMargin */,
             ::ALTO::PageSpaceType_pskel& /* BottomMargin */,
             ::ALTO::PageSpaceType_pskel& /* PrintSpace */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* PAGECLASS */,
             ::xml_schema::idrefs_pskel& /* STYLEREFS */,
             ::xml_schema::int_pskel& /* HEIGHT */,
             ::xml_schema::int_pskel& /* WIDTH */,
             ::xml_schema::int_pskel& /* PHYSICAL_IMG_NR */,
             ::xml_schema::string_pskel& /* PRINTED_IMG_NR */,
             ::ALTO::QUALITY_pskel& /* QUALITY */,
             ::ALTO::POSITION_pskel& /* POSITION */,
             ::xml_schema::idref_pskel& /* PROCESSING */,
             ::xml_schema::float_pskel& /* ACCURACY */,
             ::ALTO::PC1_pskel& /* PC */);

    // Constructor.
    //
    Page_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::ALTO::PageSpaceType_pskel* TopMargin_parser_;
    ::ALTO::PageSpaceType_pskel* LeftMargin_parser_;
    ::ALTO::PageSpaceType_pskel* RightMargin_parser_;
    ::ALTO::PageSpaceType_pskel* BottomMargin_parser_;
    ::ALTO::PageSpaceType_pskel* PrintSpace_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* PAGECLASS_parser_;
    ::xml_schema::idrefs_pskel* STYLEREFS_parser_;
    ::xml_schema::int_pskel* HEIGHT_parser_;
    ::xml_schema::int_pskel* WIDTH_parser_;
    ::xml_schema::int_pskel* PHYSICAL_IMG_NR_parser_;
    ::xml_schema::string_pskel* PRINTED_IMG_NR_parser_;
    ::ALTO::QUALITY_pskel* QUALITY_parser_;
    ::ALTO::POSITION_pskel* POSITION_parser_;
    ::xml_schema::idref_pskel* PROCESSING_parser_;
    ::xml_schema::float_pskel* ACCURACY_parser_;
    ::ALTO::PC1_pskel* PC_parser_;

    protected:
    struct v_state_descr_
    {
      void (::ALTO::Page_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool ID;
      bool PHYSICAL_IMG_NR;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class ALIGN_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ALIGN ();
  };

  class QUALITY_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_QUALITY ();
  };

  class POSITION_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_POSITION ();
  };

  class PC1_pskel: public virtual ::xml_schema::float_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PC1 ();
  };
}

#include "alto-1-2-pskel.ixx"
#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_________DATA_SCHEMAS_ALTO_1_2_PSKEL_HXX
