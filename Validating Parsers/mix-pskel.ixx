// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace mix
{
  // mixType_pskel
  //

  inline
  void mixType_pskel::
  BasicImageParameters_parser (::mix::BasicImageParametersType_pskel& p)
  {
    this->BasicImageParameters_parser_ = &p;
  }

  inline
  void mixType_pskel::
  ImageCreation_parser (::mix::ImageCreationType_pskel& p)
  {
    this->ImageCreation_parser_ = &p;
  }

  inline
  void mixType_pskel::
  ImagingPerformanceAssessment_parser (::mix::ImagingPerformanceAssessmentType_pskel& p)
  {
    this->ImagingPerformanceAssessment_parser_ = &p;
  }

  inline
  void mixType_pskel::
  ChangeHistory_parser (::mix::ChangeHistoryType_pskel& p)
  {
    this->ChangeHistory_parser_ = &p;
  }

  inline
  void mixType_pskel::
  parsers (::mix::BasicImageParametersType_pskel& BasicImageParameters,
           ::mix::ImageCreationType_pskel& ImageCreation,
           ::mix::ImagingPerformanceAssessmentType_pskel& ImagingPerformanceAssessment,
           ::mix::ChangeHistoryType_pskel& ChangeHistory)
  {
    this->BasicImageParameters_parser_ = &BasicImageParameters;
    this->ImageCreation_parser_ = &ImageCreation;
    this->ImagingPerformanceAssessment_parser_ = &ImagingPerformanceAssessment;
    this->ChangeHistory_parser_ = &ChangeHistory;
  }

  inline
  mixType_pskel::
  mixType_pskel ()
  : BasicImageParameters_parser_ (0),
    ImageCreation_parser_ (0),
    ImagingPerformanceAssessment_parser_ (0),
    ChangeHistory_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // BasicImageParametersType_pskel
  //

  inline
  void BasicImageParametersType_pskel::
  Format_parser (::mix::Format_pskel& p)
  {
    this->Format_parser_ = &p;
  }

  inline
  void BasicImageParametersType_pskel::
  File_parser (::mix::File_pskel& p)
  {
    this->File_parser_ = &p;
  }

  inline
  void BasicImageParametersType_pskel::
  PreferredPresentation_parser (::mix::typeOfStringType_pskel& p)
  {
    this->PreferredPresentation_parser_ = &p;
  }

  inline
  void BasicImageParametersType_pskel::
  parsers (::mix::Format_pskel& Format,
           ::mix::File_pskel& File,
           ::mix::typeOfStringType_pskel& PreferredPresentation)
  {
    this->Format_parser_ = &Format;
    this->File_parser_ = &File;
    this->PreferredPresentation_parser_ = &PreferredPresentation;
  }

  inline
  BasicImageParametersType_pskel::
  BasicImageParametersType_pskel ()
  : Format_parser_ (0),
    File_parser_ (0),
    PreferredPresentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImageCreationType_pskel
  //

  inline
  void ImageCreationType_pskel::
  SourceType_parser (::mix::typeOfStringType_pskel& p)
  {
    this->SourceType_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  SourceID_parser (::mix::typeOfStringType_pskel& p)
  {
    this->SourceID_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  ImageProducer_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ImageProducer_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  Host_parser (::mix::Host_pskel& p)
  {
    this->Host_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  DeviceSource_parser (::mix::typeOfStringType_pskel& p)
  {
    this->DeviceSource_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  ScanningSystemCapture_parser (::mix::ScanningSystemCapture_pskel& p)
  {
    this->ScanningSystemCapture_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  DigitalCameraCapture_parser (::mix::DigitalCameraCapture_pskel& p)
  {
    this->DigitalCameraCapture_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  CameraCaptureSettings_parser (::mix::CameraCaptureSettings_pskel& p)
  {
    this->CameraCaptureSettings_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  Sensor_parser (::mix::typeOfSensorType_pskel& p)
  {
    this->Sensor_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  DateTimeCreated_parser (::mix::typeOfDateTimeType_pskel& p)
  {
    this->DateTimeCreated_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  Methodology_parser (::mix::typeOfStringType_pskel& p)
  {
    this->Methodology_parser_ = &p;
  }

  inline
  void ImageCreationType_pskel::
  parsers (::mix::typeOfStringType_pskel& SourceType,
           ::mix::typeOfStringType_pskel& SourceID,
           ::mix::typeOfStringType_pskel& ImageProducer,
           ::mix::Host_pskel& Host,
           ::mix::typeOfStringType_pskel& DeviceSource,
           ::mix::ScanningSystemCapture_pskel& ScanningSystemCapture,
           ::mix::DigitalCameraCapture_pskel& DigitalCameraCapture,
           ::mix::CameraCaptureSettings_pskel& CameraCaptureSettings,
           ::mix::typeOfSensorType_pskel& Sensor,
           ::mix::typeOfDateTimeType_pskel& DateTimeCreated,
           ::mix::typeOfStringType_pskel& Methodology)
  {
    this->SourceType_parser_ = &SourceType;
    this->SourceID_parser_ = &SourceID;
    this->ImageProducer_parser_ = &ImageProducer;
    this->Host_parser_ = &Host;
    this->DeviceSource_parser_ = &DeviceSource;
    this->ScanningSystemCapture_parser_ = &ScanningSystemCapture;
    this->DigitalCameraCapture_parser_ = &DigitalCameraCapture;
    this->CameraCaptureSettings_parser_ = &CameraCaptureSettings;
    this->Sensor_parser_ = &Sensor;
    this->DateTimeCreated_parser_ = &DateTimeCreated;
    this->Methodology_parser_ = &Methodology;
  }

  inline
  ImageCreationType_pskel::
  ImageCreationType_pskel ()
  : SourceType_parser_ (0),
    SourceID_parser_ (0),
    ImageProducer_parser_ (0),
    Host_parser_ (0),
    DeviceSource_parser_ (0),
    ScanningSystemCapture_parser_ (0),
    DigitalCameraCapture_parser_ (0),
    CameraCaptureSettings_parser_ (0),
    Sensor_parser_ (0),
    DateTimeCreated_parser_ (0),
    Methodology_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImagingPerformanceAssessmentType_pskel
  //

  inline
  void ImagingPerformanceAssessmentType_pskel::
  SpatialMetrics_parser (::mix::SpatialMetrics_pskel& p)
  {
    this->SpatialMetrics_parser_ = &p;
  }

  inline
  void ImagingPerformanceAssessmentType_pskel::
  Energetics_parser (::mix::Energetics_pskel& p)
  {
    this->Energetics_parser_ = &p;
  }

  inline
  void ImagingPerformanceAssessmentType_pskel::
  TargetData_parser (::mix::TargetData_pskel& p)
  {
    this->TargetData_parser_ = &p;
  }

  inline
  void ImagingPerformanceAssessmentType_pskel::
  parsers (::mix::SpatialMetrics_pskel& SpatialMetrics,
           ::mix::Energetics_pskel& Energetics,
           ::mix::TargetData_pskel& TargetData)
  {
    this->SpatialMetrics_parser_ = &SpatialMetrics;
    this->Energetics_parser_ = &Energetics;
    this->TargetData_parser_ = &TargetData;
  }

  inline
  ImagingPerformanceAssessmentType_pskel::
  ImagingPerformanceAssessmentType_pskel ()
  : SpatialMetrics_parser_ (0),
    Energetics_parser_ (0),
    TargetData_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ChangeHistoryType_pskel
  //

  inline
  void ChangeHistoryType_pskel::
  ImageProcessing_parser (::mix::ImageProcessing_pskel& p)
  {
    this->ImageProcessing_parser_ = &p;
  }

  inline
  void ChangeHistoryType_pskel::
  PreviousImageMetadata_parser (::mix::typeOfPreviousImageMetadataType_pskel& p)
  {
    this->PreviousImageMetadata_parser_ = &p;
  }

  inline
  void ChangeHistoryType_pskel::
  parsers (::mix::ImageProcessing_pskel& ImageProcessing,
           ::mix::typeOfPreviousImageMetadataType_pskel& PreviousImageMetadata)
  {
    this->ImageProcessing_parser_ = &ImageProcessing;
    this->PreviousImageMetadata_parser_ = &PreviousImageMetadata;
  }

  inline
  ChangeHistoryType_pskel::
  ChangeHistoryType_pskel ()
  : ImageProcessing_parser_ (0),
    PreviousImageMetadata_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // typeOfFormatType_pskel
  //

  inline
  void typeOfFormatType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfFormatType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfFormatType_pskel::
  typeOfFormatType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfByteOrderType_pskel
  //

  inline
  void typeOfByteOrderType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfByteOrderType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfByteOrderType_pskel::
  typeOfByteOrderType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfCompressionSchemeType_pskel
  //

  inline
  void typeOfCompressionSchemeType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfCompressionSchemeType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfCompressionSchemeType_pskel::
  typeOfCompressionSchemeType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfCompressionLevelType_pskel
  //

  inline
  void typeOfCompressionLevelType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfCompressionLevelType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfCompressionLevelType_pskel::
  typeOfCompressionLevelType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfColorSpaceType_pskel
  //

  inline
  void typeOfColorSpaceType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfColorSpaceType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfColorSpaceType_pskel::
  typeOfColorSpaceType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfProfileNameType_pskel
  //

  inline
  void typeOfProfileNameType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfProfileNameType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfProfileNameType_pskel::
  typeOfProfileNameType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfProfileURLType_pskel
  //

  inline
  void typeOfProfileURLType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfProfileURLType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfProfileURLType_pskel::
  typeOfProfileURLType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfYCbCrSubSamplingType_pskel
  //

  inline
  void typeOfYCbCrSubSamplingType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfYCbCrSubSamplingType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfYCbCrSubSamplingType_pskel::
  typeOfYCbCrSubSamplingType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfYCbCrPositioningType_pskel
  //

  inline
  void typeOfYCbCrPositioningType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfYCbCrPositioningType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfYCbCrPositioningType_pskel::
  typeOfYCbCrPositioningType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfYcbCrCoefficientsType_pskel
  //

  inline
  void typeOfYcbCrCoefficientsType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfYcbCrCoefficientsType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfYcbCrCoefficientsType_pskel::
  typeOfYcbCrCoefficientsType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfReferenceBlackWhiteType_pskel
  //

  inline
  void typeOfReferenceBlackWhiteType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfReferenceBlackWhiteType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfReferenceBlackWhiteType_pskel::
  typeOfReferenceBlackWhiteType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSegmentTypeType_pskel
  //

  inline
  void typeOfSegmentTypeType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSegmentTypeType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfSegmentTypeType_pskel::
  typeOfSegmentTypeType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfStripOffsetsType_pskel
  //

  inline
  void typeOfStripOffsetsType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfStripOffsetsType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfStripOffsetsType_pskel::
  typeOfStripOffsetsType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfRowsPerStripType_pskel
  //

  inline
  void typeOfRowsPerStripType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfRowsPerStripType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfRowsPerStripType_pskel::
  typeOfRowsPerStripType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfStripByteCountsType_pskel
  //

  inline
  void typeOfStripByteCountsType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfStripByteCountsType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfStripByteCountsType_pskel::
  typeOfStripByteCountsType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfTileWidthType_pskel
  //

  inline
  void typeOfTileWidthType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfTileWidthType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfTileWidthType_pskel::
  typeOfTileWidthType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfTileLengthType_pskel
  //

  inline
  void typeOfTileLengthType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfTileLengthType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfTileLengthType_pskel::
  typeOfTileLengthType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfTileOffsetsType_pskel
  //

  inline
  void typeOfTileOffsetsType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfTileOffsetsType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfTileOffsetsType_pskel::
  typeOfTileOffsetsType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfTileByteCountsType_pskel
  //

  inline
  void typeOfTileByteCountsType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfTileByteCountsType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfTileByteCountsType_pskel::
  typeOfTileByteCountsType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfPlanarConfigurationType_pskel
  //

  inline
  void typeOfPlanarConfigurationType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfPlanarConfigurationType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfPlanarConfigurationType_pskel::
  typeOfPlanarConfigurationType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfImageIdentifierType_pskel
  //

  inline
  void typeOfImageIdentifierType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfImageIdentifierType_pskel::
  imageIdentifierLocation_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->imageIdentifierLocation_parser_ = &p;
  }

  inline
  void typeOfImageIdentifierType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use,
           ::xml_schema::any_simple_type_pskel& imageIdentifierLocation)
  {
    this->use_parser_ = &use;
    this->imageIdentifierLocation_parser_ = &imageIdentifierLocation;
  }

  inline
  typeOfImageIdentifierType_pskel::
  typeOfImageIdentifierType_pskel ()
  : use_parser_ (0),
    imageIdentifierLocation_parser_ (0)
  {
  }

  // typeOfFileSizeType_pskel
  //

  inline
  void typeOfFileSizeType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfFileSizeType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfFileSizeType_pskel::
  typeOfFileSizeType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfChecksumMethodType_pskel
  //

  inline
  void typeOfChecksumMethodType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfChecksumMethodType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfChecksumMethodType_pskel::
  typeOfChecksumMethodType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfChecksumValueType_pskel
  //

  inline
  void typeOfChecksumValueType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfChecksumValueType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfChecksumValueType_pskel::
  typeOfChecksumValueType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfOrientationType_pskel
  //

  inline
  void typeOfOrientationType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfOrientationType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfOrientationType_pskel::
  typeOfOrientationType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfDisplayOrientationType_pskel
  //

  inline
  void typeOfDisplayOrientationType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfDisplayOrientationType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfDisplayOrientationType_pskel::
  typeOfDisplayOrientationType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfXTargetedDisplayARType_pskel
  //

  inline
  void typeOfXTargetedDisplayARType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfXTargetedDisplayARType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfXTargetedDisplayARType_pskel::
  typeOfXTargetedDisplayARType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfYTargetedDisplayARType_pskel
  //

  inline
  void typeOfYTargetedDisplayARType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfYTargetedDisplayARType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfYTargetedDisplayARType_pskel::
  typeOfYTargetedDisplayARType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfPreferredPresentationType_pskel
  //

  inline
  void typeOfPreferredPresentationType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfPreferredPresentationType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfPreferredPresentationType_pskel::
  typeOfPreferredPresentationType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSourceTypeType_pskel
  //

  inline
  void typeOfSourceTypeType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSourceTypeType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfSourceTypeType_pskel::
  typeOfSourceTypeType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSourceIDType_pskel
  //

  inline
  void typeOfSourceIDType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSourceIDType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfSourceIDType_pskel::
  typeOfSourceIDType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfImageProducerType_pskel
  //

  inline
  void typeOfImageProducerType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfImageProducerType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfImageProducerType_pskel::
  typeOfImageProducerType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSubjectDistanceType_pskel
  //

  inline
  void typeOfSubjectDistanceType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSubjectDistanceType_pskel::
  min_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->min_parser_ = &p;
  }

  inline
  void typeOfSubjectDistanceType_pskel::
  max_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->max_parser_ = &p;
  }

  inline
  void typeOfSubjectDistanceType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use,
           ::xml_schema::any_simple_type_pskel& min,
           ::xml_schema::any_simple_type_pskel& max)
  {
    this->use_parser_ = &use;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
  }

  inline
  typeOfSubjectDistanceType_pskel::
  typeOfSubjectDistanceType_pskel ()
  : use_parser_ (0),
    min_parser_ (0),
    max_parser_ (0)
  {
  }

  // typeOfMeteringModeType_pskel
  //

  inline
  void typeOfMeteringModeType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfMeteringModeType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfMeteringModeType_pskel::
  typeOfMeteringModeType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSceneIlluminantType_pskel
  //

  inline
  void typeOfSceneIlluminantType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSceneIlluminantType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfSceneIlluminantType_pskel::
  typeOfSceneIlluminantType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfFlashType_pskel
  //

  inline
  void typeOfFlashType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfFlashType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfFlashType_pskel::
  typeOfFlashType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfFlashReturnType_pskel
  //

  inline
  void typeOfFlashReturnType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfFlashReturnType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfFlashReturnType_pskel::
  typeOfFlashReturnType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfBackLightType_pskel
  //

  inline
  void typeOfBackLightType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfBackLightType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfBackLightType_pskel::
  typeOfBackLightType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfAutoFocusType_pskel
  //

  inline
  void typeOfAutoFocusType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfAutoFocusType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfAutoFocusType_pskel::
  typeOfAutoFocusType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSensorType_pskel
  //

  inline
  void typeOfSensorType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSensorType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfSensorType_pskel::
  typeOfSensorType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSamplingFrequencyPlaneType_pskel
  //

  inline
  void typeOfSamplingFrequencyPlaneType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSamplingFrequencyPlaneType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfSamplingFrequencyPlaneType_pskel::
  typeOfSamplingFrequencyPlaneType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSamplingFrequencyUnitType_pskel
  //

  inline
  void typeOfSamplingFrequencyUnitType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSamplingFrequencyUnitType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfSamplingFrequencyUnitType_pskel::
  typeOfSamplingFrequencyUnitType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfBitsPerSampleType_pskel
  //

  inline
  void typeOfBitsPerSampleType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfBitsPerSampleType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfBitsPerSampleType_pskel::
  typeOfBitsPerSampleType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfSamplesPerPixelType_pskel
  //

  inline
  void typeOfSamplesPerPixelType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfSamplesPerPixelType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfSamplesPerPixelType_pskel::
  typeOfSamplesPerPixelType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfExtraSamplesType_pskel
  //

  inline
  void typeOfExtraSamplesType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfExtraSamplesType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfExtraSamplesType_pskel::
  typeOfExtraSamplesType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfColormapType_pskel
  //

  inline
  void typeOfColormapType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfColormapType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfColormapType_pskel::
  typeOfColormapType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfGrayResponseCurveType_pskel
  //

  inline
  void typeOfGrayResponseCurveType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfGrayResponseCurveType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfGrayResponseCurveType_pskel::
  typeOfGrayResponseCurveType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfGrayResponseUnitType_pskel
  //

  inline
  void typeOfGrayResponseUnitType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfGrayResponseUnitType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfGrayResponseUnitType_pskel::
  typeOfGrayResponseUnitType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfCIExyType_pskel
  //

  inline
  void typeOfCIExyType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfCIExyType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfCIExyType_pskel::
  typeOfCIExyType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfTargetTypeType_pskel
  //

  inline
  void typeOfTargetTypeType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfTargetTypeType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfTargetTypeType_pskel::
  typeOfTargetTypeType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfPreviousImageMetadataType_pskel
  //

  inline
  typeOfPreviousImageMetadataType_pskel::
  typeOfPreviousImageMetadataType_pskel ()
  : v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // typeOfStringType_pskel
  //

  inline
  void typeOfStringType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfStringType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfStringType_pskel::
  typeOfStringType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfNonNegativeRealType_pskel
  //

  inline
  void typeOfNonNegativeRealType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfNonNegativeRealType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfNonNegativeRealType_pskel::
  typeOfNonNegativeRealType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfPositiveIntegerType_pskel
  //

  inline
  void typeOfPositiveIntegerType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfPositiveIntegerType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfPositiveIntegerType_pskel::
  typeOfPositiveIntegerType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfDateTimeType_pskel
  //

  inline
  void typeOfDateTimeType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfDateTimeType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfDateTimeType_pskel::
  typeOfDateTimeType_pskel ()
  : use_parser_ (0)
  {
  }

  // typeOfReferenceType_pskel
  //

  inline
  void typeOfReferenceType_pskel::
  use_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->use_parser_ = &p;
  }

  inline
  void typeOfReferenceType_pskel::
  parsers (::xml_schema::any_simple_type_pskel& use)
  {
    this->use_parser_ = &use;
  }

  inline
  typeOfReferenceType_pskel::
  typeOfReferenceType_pskel ()
  : use_parser_ (0)
  {
  }

  // Format_pskel
  //

  inline
  void Format_pskel::
  MIMEType_parser (::mix::typeOfFormatType_pskel& p)
  {
    this->MIMEType_parser_ = &p;
  }

  inline
  void Format_pskel::
  ByteOrder_parser (::mix::typeOfByteOrderType_pskel& p)
  {
    this->ByteOrder_parser_ = &p;
  }

  inline
  void Format_pskel::
  Compression_parser (::mix::Compression_pskel& p)
  {
    this->Compression_parser_ = &p;
  }

  inline
  void Format_pskel::
  PhotometricInterpretation_parser (::mix::PhotometricInterpretation_pskel& p)
  {
    this->PhotometricInterpretation_parser_ = &p;
  }

  inline
  void Format_pskel::
  Segments_parser (::mix::Segments_pskel& p)
  {
    this->Segments_parser_ = &p;
  }

  inline
  void Format_pskel::
  PlanarConfiguration_parser (::mix::typeOfPlanarConfigurationType_pskel& p)
  {
    this->PlanarConfiguration_parser_ = &p;
  }

  inline
  void Format_pskel::
  parsers (::mix::typeOfFormatType_pskel& MIMEType,
           ::mix::typeOfByteOrderType_pskel& ByteOrder,
           ::mix::Compression_pskel& Compression,
           ::mix::PhotometricInterpretation_pskel& PhotometricInterpretation,
           ::mix::Segments_pskel& Segments,
           ::mix::typeOfPlanarConfigurationType_pskel& PlanarConfiguration)
  {
    this->MIMEType_parser_ = &MIMEType;
    this->ByteOrder_parser_ = &ByteOrder;
    this->Compression_parser_ = &Compression;
    this->PhotometricInterpretation_parser_ = &PhotometricInterpretation;
    this->Segments_parser_ = &Segments;
    this->PlanarConfiguration_parser_ = &PlanarConfiguration;
  }

  inline
  Format_pskel::
  Format_pskel ()
  : MIMEType_parser_ (0),
    ByteOrder_parser_ (0),
    Compression_parser_ (0),
    PhotometricInterpretation_parser_ (0),
    Segments_parser_ (0),
    PlanarConfiguration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // File_pskel
  //

  inline
  void File_pskel::
  ImageIdentifier_parser (::mix::typeOfImageIdentifierType_pskel& p)
  {
    this->ImageIdentifier_parser_ = &p;
  }

  inline
  void File_pskel::
  FileSize_parser (::mix::typeOfFileSizeType_pskel& p)
  {
    this->FileSize_parser_ = &p;
  }

  inline
  void File_pskel::
  Checksum_parser (::mix::Checksum_pskel& p)
  {
    this->Checksum_parser_ = &p;
  }

  inline
  void File_pskel::
  Orientation_parser (::mix::typeOfOrientationType_pskel& p)
  {
    this->Orientation_parser_ = &p;
  }

  inline
  void File_pskel::
  DisplayOrientation_parser (::mix::typeOfDisplayOrientationType_pskel& p)
  {
    this->DisplayOrientation_parser_ = &p;
  }

  inline
  void File_pskel::
  TargetedDisplayAR_parser (::mix::TargetedDisplayAR_pskel& p)
  {
    this->TargetedDisplayAR_parser_ = &p;
  }

  inline
  void File_pskel::
  parsers (::mix::typeOfImageIdentifierType_pskel& ImageIdentifier,
           ::mix::typeOfFileSizeType_pskel& FileSize,
           ::mix::Checksum_pskel& Checksum,
           ::mix::typeOfOrientationType_pskel& Orientation,
           ::mix::typeOfDisplayOrientationType_pskel& DisplayOrientation,
           ::mix::TargetedDisplayAR_pskel& TargetedDisplayAR)
  {
    this->ImageIdentifier_parser_ = &ImageIdentifier;
    this->FileSize_parser_ = &FileSize;
    this->Checksum_parser_ = &Checksum;
    this->Orientation_parser_ = &Orientation;
    this->DisplayOrientation_parser_ = &DisplayOrientation;
    this->TargetedDisplayAR_parser_ = &TargetedDisplayAR;
  }

  inline
  File_pskel::
  File_pskel ()
  : ImageIdentifier_parser_ (0),
    FileSize_parser_ (0),
    Checksum_parser_ (0),
    Orientation_parser_ (0),
    DisplayOrientation_parser_ (0),
    TargetedDisplayAR_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Host_pskel
  //

  inline
  void Host_pskel::
  HostComputer_parser (::mix::typeOfStringType_pskel& p)
  {
    this->HostComputer_parser_ = &p;
  }

  inline
  void Host_pskel::
  OperatingSystem_parser (::mix::typeOfStringType_pskel& p)
  {
    this->OperatingSystem_parser_ = &p;
  }

  inline
  void Host_pskel::
  OSVersion_parser (::mix::typeOfStringType_pskel& p)
  {
    this->OSVersion_parser_ = &p;
  }

  inline
  void Host_pskel::
  parsers (::mix::typeOfStringType_pskel& HostComputer,
           ::mix::typeOfStringType_pskel& OperatingSystem,
           ::mix::typeOfStringType_pskel& OSVersion)
  {
    this->HostComputer_parser_ = &HostComputer;
    this->OperatingSystem_parser_ = &OperatingSystem;
    this->OSVersion_parser_ = &OSVersion;
  }

  inline
  Host_pskel::
  Host_pskel ()
  : HostComputer_parser_ (0),
    OperatingSystem_parser_ (0),
    OSVersion_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ScanningSystemCapture_pskel
  //

  inline
  void ScanningSystemCapture_pskel::
  ScanningSystemHardware_parser (::mix::ScanningSystemHardware_pskel& p)
  {
    this->ScanningSystemHardware_parser_ = &p;
  }

  inline
  void ScanningSystemCapture_pskel::
  ScanningSystemSoftware_parser (::mix::ScanningSystemSoftware_pskel& p)
  {
    this->ScanningSystemSoftware_parser_ = &p;
  }

  inline
  void ScanningSystemCapture_pskel::
  ScannerCaptureSettings_parser (::mix::ScannerCaptureSettings_pskel& p)
  {
    this->ScannerCaptureSettings_parser_ = &p;
  }

  inline
  void ScanningSystemCapture_pskel::
  parsers (::mix::ScanningSystemHardware_pskel& ScanningSystemHardware,
           ::mix::ScanningSystemSoftware_pskel& ScanningSystemSoftware,
           ::mix::ScannerCaptureSettings_pskel& ScannerCaptureSettings)
  {
    this->ScanningSystemHardware_parser_ = &ScanningSystemHardware;
    this->ScanningSystemSoftware_parser_ = &ScanningSystemSoftware;
    this->ScannerCaptureSettings_parser_ = &ScannerCaptureSettings;
  }

  inline
  ScanningSystemCapture_pskel::
  ScanningSystemCapture_pskel ()
  : ScanningSystemHardware_parser_ (0),
    ScanningSystemSoftware_parser_ (0),
    ScannerCaptureSettings_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DigitalCameraCapture_pskel
  //

  inline
  void DigitalCameraCapture_pskel::
  DigitalCameraManufacturer_parser (::mix::typeOfStringType_pskel& p)
  {
    this->DigitalCameraManufacturer_parser_ = &p;
  }

  inline
  void DigitalCameraCapture_pskel::
  DigitalCameraModel_parser (::mix::typeOfStringType_pskel& p)
  {
    this->DigitalCameraModel_parser_ = &p;
  }

  inline
  void DigitalCameraCapture_pskel::
  parsers (::mix::typeOfStringType_pskel& DigitalCameraManufacturer,
           ::mix::typeOfStringType_pskel& DigitalCameraModel)
  {
    this->DigitalCameraManufacturer_parser_ = &DigitalCameraManufacturer;
    this->DigitalCameraModel_parser_ = &DigitalCameraModel;
  }

  inline
  DigitalCameraCapture_pskel::
  DigitalCameraCapture_pskel ()
  : DigitalCameraManufacturer_parser_ (0),
    DigitalCameraModel_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CameraCaptureSettings_pskel
  //

  inline
  void CameraCaptureSettings_pskel::
  FNumber_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->FNumber_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  ExposureTime_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->ExposureTime_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  Brightness_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->Brightness_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  ExposureBias_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->ExposureBias_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  SubjectDistance_parser (::mix::typeOfSubjectDistanceType_pskel& p)
  {
    this->SubjectDistance_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  MeteringMode_parser (::mix::typeOfMeteringModeType_pskel& p)
  {
    this->MeteringMode_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  SceneIlluminant_parser (::mix::typeOfSceneIlluminantType_pskel& p)
  {
    this->SceneIlluminant_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  ColorTemp_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->ColorTemp_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  FocalLength_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->FocalLength_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  Flash_parser (::mix::typeOfFlashType_pskel& p)
  {
    this->Flash_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  FlashEnergy_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->FlashEnergy_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  FlashReturn_parser (::mix::typeOfFlashReturnType_pskel& p)
  {
    this->FlashReturn_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  BackLight_parser (::mix::typeOfBackLightType_pskel& p)
  {
    this->BackLight_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  ExposureIndex_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->ExposureIndex_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  AutoFocus_parser (::mix::typeOfAutoFocusType_pskel& p)
  {
    this->AutoFocus_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  PrintAspectRatio_parser (::mix::PrintAspectRatio_pskel& p)
  {
    this->PrintAspectRatio_parser_ = &p;
  }

  inline
  void CameraCaptureSettings_pskel::
  parsers (::mix::typeOfNonNegativeRealType_pskel& FNumber,
           ::mix::typeOfNonNegativeRealType_pskel& ExposureTime,
           ::mix::typeOfNonNegativeRealType_pskel& Brightness,
           ::mix::typeOfNonNegativeRealType_pskel& ExposureBias,
           ::mix::typeOfSubjectDistanceType_pskel& SubjectDistance,
           ::mix::typeOfMeteringModeType_pskel& MeteringMode,
           ::mix::typeOfSceneIlluminantType_pskel& SceneIlluminant,
           ::mix::typeOfNonNegativeRealType_pskel& ColorTemp,
           ::mix::typeOfNonNegativeRealType_pskel& FocalLength,
           ::mix::typeOfFlashType_pskel& Flash,
           ::mix::typeOfNonNegativeRealType_pskel& FlashEnergy,
           ::mix::typeOfFlashReturnType_pskel& FlashReturn,
           ::mix::typeOfBackLightType_pskel& BackLight,
           ::mix::typeOfNonNegativeRealType_pskel& ExposureIndex,
           ::mix::typeOfAutoFocusType_pskel& AutoFocus,
           ::mix::PrintAspectRatio_pskel& PrintAspectRatio)
  {
    this->FNumber_parser_ = &FNumber;
    this->ExposureTime_parser_ = &ExposureTime;
    this->Brightness_parser_ = &Brightness;
    this->ExposureBias_parser_ = &ExposureBias;
    this->SubjectDistance_parser_ = &SubjectDistance;
    this->MeteringMode_parser_ = &MeteringMode;
    this->SceneIlluminant_parser_ = &SceneIlluminant;
    this->ColorTemp_parser_ = &ColorTemp;
    this->FocalLength_parser_ = &FocalLength;
    this->Flash_parser_ = &Flash;
    this->FlashEnergy_parser_ = &FlashEnergy;
    this->FlashReturn_parser_ = &FlashReturn;
    this->BackLight_parser_ = &BackLight;
    this->ExposureIndex_parser_ = &ExposureIndex;
    this->AutoFocus_parser_ = &AutoFocus;
    this->PrintAspectRatio_parser_ = &PrintAspectRatio;
  }

  inline
  CameraCaptureSettings_pskel::
  CameraCaptureSettings_pskel ()
  : FNumber_parser_ (0),
    ExposureTime_parser_ (0),
    Brightness_parser_ (0),
    ExposureBias_parser_ (0),
    SubjectDistance_parser_ (0),
    MeteringMode_parser_ (0),
    SceneIlluminant_parser_ (0),
    ColorTemp_parser_ (0),
    FocalLength_parser_ (0),
    Flash_parser_ (0),
    FlashEnergy_parser_ (0),
    FlashReturn_parser_ (0),
    BackLight_parser_ (0),
    ExposureIndex_parser_ (0),
    AutoFocus_parser_ (0),
    PrintAspectRatio_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SpatialMetrics_pskel
  //

  inline
  void SpatialMetrics_pskel::
  SamplingFrequencyPlane_parser (::mix::typeOfSamplingFrequencyPlaneType_pskel& p)
  {
    this->SamplingFrequencyPlane_parser_ = &p;
  }

  inline
  void SpatialMetrics_pskel::
  SamplingFrequencyUnit_parser (::mix::typeOfSamplingFrequencyUnitType_pskel& p)
  {
    this->SamplingFrequencyUnit_parser_ = &p;
  }

  inline
  void SpatialMetrics_pskel::
  XSamplingFrequency_parser (::mix::typeOfPositiveIntegerType_pskel& p)
  {
    this->XSamplingFrequency_parser_ = &p;
  }

  inline
  void SpatialMetrics_pskel::
  YSamplingFrequency_parser (::mix::typeOfPositiveIntegerType_pskel& p)
  {
    this->YSamplingFrequency_parser_ = &p;
  }

  inline
  void SpatialMetrics_pskel::
  ImageWidth_parser (::mix::typeOfPositiveIntegerType_pskel& p)
  {
    this->ImageWidth_parser_ = &p;
  }

  inline
  void SpatialMetrics_pskel::
  ImageLength_parser (::mix::typeOfPositiveIntegerType_pskel& p)
  {
    this->ImageLength_parser_ = &p;
  }

  inline
  void SpatialMetrics_pskel::
  Source_X_parser (::mix::Source_X_pskel& p)
  {
    this->Source_X_parser_ = &p;
  }

  inline
  void SpatialMetrics_pskel::
  Source_Y_parser (::mix::Source_Y_pskel& p)
  {
    this->Source_Y_parser_ = &p;
  }

  inline
  void SpatialMetrics_pskel::
  parsers (::mix::typeOfSamplingFrequencyPlaneType_pskel& SamplingFrequencyPlane,
           ::mix::typeOfSamplingFrequencyUnitType_pskel& SamplingFrequencyUnit,
           ::mix::typeOfPositiveIntegerType_pskel& XSamplingFrequency,
           ::mix::typeOfPositiveIntegerType_pskel& YSamplingFrequency,
           ::mix::typeOfPositiveIntegerType_pskel& ImageWidth,
           ::mix::typeOfPositiveIntegerType_pskel& ImageLength,
           ::mix::Source_X_pskel& Source_X,
           ::mix::Source_Y_pskel& Source_Y)
  {
    this->SamplingFrequencyPlane_parser_ = &SamplingFrequencyPlane;
    this->SamplingFrequencyUnit_parser_ = &SamplingFrequencyUnit;
    this->XSamplingFrequency_parser_ = &XSamplingFrequency;
    this->YSamplingFrequency_parser_ = &YSamplingFrequency;
    this->ImageWidth_parser_ = &ImageWidth;
    this->ImageLength_parser_ = &ImageLength;
    this->Source_X_parser_ = &Source_X;
    this->Source_Y_parser_ = &Source_Y;
  }

  inline
  SpatialMetrics_pskel::
  SpatialMetrics_pskel ()
  : SamplingFrequencyPlane_parser_ (0),
    SamplingFrequencyUnit_parser_ (0),
    XSamplingFrequency_parser_ (0),
    YSamplingFrequency_parser_ (0),
    ImageWidth_parser_ (0),
    ImageLength_parser_ (0),
    Source_X_parser_ (0),
    Source_Y_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Energetics_pskel
  //

  inline
  void Energetics_pskel::
  BitsPerSample_parser (::mix::typeOfBitsPerSampleType_pskel& p)
  {
    this->BitsPerSample_parser_ = &p;
  }

  inline
  void Energetics_pskel::
  SamplesPerPixel_parser (::mix::typeOfSamplesPerPixelType_pskel& p)
  {
    this->SamplesPerPixel_parser_ = &p;
  }

  inline
  void Energetics_pskel::
  ExtraSamples_parser (::mix::typeOfExtraSamplesType_pskel& p)
  {
    this->ExtraSamples_parser_ = &p;
  }

  inline
  void Energetics_pskel::
  Colormap_parser (::mix::Colormap_pskel& p)
  {
    this->Colormap_parser_ = &p;
  }

  inline
  void Energetics_pskel::
  GrayResponse_parser (::mix::GrayResponse_pskel& p)
  {
    this->GrayResponse_parser_ = &p;
  }

  inline
  void Energetics_pskel::
  WhitePoint_parser (::mix::WhitePoint_pskel& p)
  {
    this->WhitePoint_parser_ = &p;
  }

  inline
  void Energetics_pskel::
  PrimaryChromaticities_parser (::mix::PrimaryChromaticities_pskel& p)
  {
    this->PrimaryChromaticities_parser_ = &p;
  }

  inline
  void Energetics_pskel::
  parsers (::mix::typeOfBitsPerSampleType_pskel& BitsPerSample,
           ::mix::typeOfSamplesPerPixelType_pskel& SamplesPerPixel,
           ::mix::typeOfExtraSamplesType_pskel& ExtraSamples,
           ::mix::Colormap_pskel& Colormap,
           ::mix::GrayResponse_pskel& GrayResponse,
           ::mix::WhitePoint_pskel& WhitePoint,
           ::mix::PrimaryChromaticities_pskel& PrimaryChromaticities)
  {
    this->BitsPerSample_parser_ = &BitsPerSample;
    this->SamplesPerPixel_parser_ = &SamplesPerPixel;
    this->ExtraSamples_parser_ = &ExtraSamples;
    this->Colormap_parser_ = &Colormap;
    this->GrayResponse_parser_ = &GrayResponse;
    this->WhitePoint_parser_ = &WhitePoint;
    this->PrimaryChromaticities_parser_ = &PrimaryChromaticities;
  }

  inline
  Energetics_pskel::
  Energetics_pskel ()
  : BitsPerSample_parser_ (0),
    SamplesPerPixel_parser_ (0),
    ExtraSamples_parser_ (0),
    Colormap_parser_ (0),
    GrayResponse_parser_ (0),
    WhitePoint_parser_ (0),
    PrimaryChromaticities_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TargetData_pskel
  //

  inline
  void TargetData_pskel::
  TargetType_parser (::mix::typeOfTargetTypeType_pskel& p)
  {
    this->TargetType_parser_ = &p;
  }

  inline
  void TargetData_pskel::
  TargetID_parser (::mix::TargetID_pskel& p)
  {
    this->TargetID_parser_ = &p;
  }

  inline
  void TargetData_pskel::
  ImageData_parser (::mix::typeOfReferenceType_pskel& p)
  {
    this->ImageData_parser_ = &p;
  }

  inline
  void TargetData_pskel::
  PerformanceData_parser (::mix::typeOfReferenceType_pskel& p)
  {
    this->PerformanceData_parser_ = &p;
  }

  inline
  void TargetData_pskel::
  Profiles_parser (::mix::typeOfReferenceType_pskel& p)
  {
    this->Profiles_parser_ = &p;
  }

  inline
  void TargetData_pskel::
  parsers (::mix::typeOfTargetTypeType_pskel& TargetType,
           ::mix::TargetID_pskel& TargetID,
           ::mix::typeOfReferenceType_pskel& ImageData,
           ::mix::typeOfReferenceType_pskel& PerformanceData,
           ::mix::typeOfReferenceType_pskel& Profiles)
  {
    this->TargetType_parser_ = &TargetType;
    this->TargetID_parser_ = &TargetID;
    this->ImageData_parser_ = &ImageData;
    this->PerformanceData_parser_ = &PerformanceData;
    this->Profiles_parser_ = &Profiles;
  }

  inline
  TargetData_pskel::
  TargetData_pskel ()
  : TargetType_parser_ (0),
    TargetID_parser_ (0),
    ImageData_parser_ (0),
    PerformanceData_parser_ (0),
    Profiles_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImageProcessing_pskel
  //

  inline
  void ImageProcessing_pskel::
  DateTimeProcessed_parser (::mix::typeOfDateTimeType_pskel& p)
  {
    this->DateTimeProcessed_parser_ = &p;
  }

  inline
  void ImageProcessing_pskel::
  SourceData_parser (::mix::typeOfReferenceType_pskel& p)
  {
    this->SourceData_parser_ = &p;
  }

  inline
  void ImageProcessing_pskel::
  ProcessingAgency_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ProcessingAgency_parser_ = &p;
  }

  inline
  void ImageProcessing_pskel::
  ProcessingSoftware_parser (::mix::ProcessingSoftware_pskel& p)
  {
    this->ProcessingSoftware_parser_ = &p;
  }

  inline
  void ImageProcessing_pskel::
  ProcessingActions_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ProcessingActions_parser_ = &p;
  }

  inline
  void ImageProcessing_pskel::
  parsers (::mix::typeOfDateTimeType_pskel& DateTimeProcessed,
           ::mix::typeOfReferenceType_pskel& SourceData,
           ::mix::typeOfStringType_pskel& ProcessingAgency,
           ::mix::ProcessingSoftware_pskel& ProcessingSoftware,
           ::mix::typeOfStringType_pskel& ProcessingActions)
  {
    this->DateTimeProcessed_parser_ = &DateTimeProcessed;
    this->SourceData_parser_ = &SourceData;
    this->ProcessingAgency_parser_ = &ProcessingAgency;
    this->ProcessingSoftware_parser_ = &ProcessingSoftware;
    this->ProcessingActions_parser_ = &ProcessingActions;
  }

  inline
  ImageProcessing_pskel::
  ImageProcessing_pskel ()
  : DateTimeProcessed_parser_ (0),
    SourceData_parser_ (0),
    ProcessingAgency_parser_ (0),
    ProcessingSoftware_parser_ (0),
    ProcessingActions_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Compression_pskel
  //

  inline
  void Compression_pskel::
  CompressionScheme_parser (::mix::typeOfCompressionSchemeType_pskel& p)
  {
    this->CompressionScheme_parser_ = &p;
  }

  inline
  void Compression_pskel::
  CompressionLevel_parser (::mix::typeOfCompressionLevelType_pskel& p)
  {
    this->CompressionLevel_parser_ = &p;
  }

  inline
  void Compression_pskel::
  parsers (::mix::typeOfCompressionSchemeType_pskel& CompressionScheme,
           ::mix::typeOfCompressionLevelType_pskel& CompressionLevel)
  {
    this->CompressionScheme_parser_ = &CompressionScheme;
    this->CompressionLevel_parser_ = &CompressionLevel;
  }

  inline
  Compression_pskel::
  Compression_pskel ()
  : CompressionScheme_parser_ (0),
    CompressionLevel_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PhotometricInterpretation_pskel
  //

  inline
  void PhotometricInterpretation_pskel::
  ColorSpace_parser (::mix::typeOfColorSpaceType_pskel& p)
  {
    this->ColorSpace_parser_ = &p;
  }

  inline
  void PhotometricInterpretation_pskel::
  ICCProfile_parser (::mix::ICCProfile_pskel& p)
  {
    this->ICCProfile_parser_ = &p;
  }

  inline
  void PhotometricInterpretation_pskel::
  YCbCrSubSampling_parser (::mix::typeOfYCbCrSubSamplingType_pskel& p)
  {
    this->YCbCrSubSampling_parser_ = &p;
  }

  inline
  void PhotometricInterpretation_pskel::
  YCbCrPositioning_parser (::mix::typeOfYCbCrPositioningType_pskel& p)
  {
    this->YCbCrPositioning_parser_ = &p;
  }

  inline
  void PhotometricInterpretation_pskel::
  YcbCrCoefficients_parser (::mix::typeOfYcbCrCoefficientsType_pskel& p)
  {
    this->YcbCrCoefficients_parser_ = &p;
  }

  inline
  void PhotometricInterpretation_pskel::
  ReferenceBlackWhite_parser (::mix::typeOfReferenceBlackWhiteType_pskel& p)
  {
    this->ReferenceBlackWhite_parser_ = &p;
  }

  inline
  void PhotometricInterpretation_pskel::
  parsers (::mix::typeOfColorSpaceType_pskel& ColorSpace,
           ::mix::ICCProfile_pskel& ICCProfile,
           ::mix::typeOfYCbCrSubSamplingType_pskel& YCbCrSubSampling,
           ::mix::typeOfYCbCrPositioningType_pskel& YCbCrPositioning,
           ::mix::typeOfYcbCrCoefficientsType_pskel& YcbCrCoefficients,
           ::mix::typeOfReferenceBlackWhiteType_pskel& ReferenceBlackWhite)
  {
    this->ColorSpace_parser_ = &ColorSpace;
    this->ICCProfile_parser_ = &ICCProfile;
    this->YCbCrSubSampling_parser_ = &YCbCrSubSampling;
    this->YCbCrPositioning_parser_ = &YCbCrPositioning;
    this->YcbCrCoefficients_parser_ = &YcbCrCoefficients;
    this->ReferenceBlackWhite_parser_ = &ReferenceBlackWhite;
  }

  inline
  PhotometricInterpretation_pskel::
  PhotometricInterpretation_pskel ()
  : ColorSpace_parser_ (0),
    ICCProfile_parser_ (0),
    YCbCrSubSampling_parser_ (0),
    YCbCrPositioning_parser_ (0),
    YcbCrCoefficients_parser_ (0),
    ReferenceBlackWhite_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Segments_pskel
  //

  inline
  void Segments_pskel::
  SegmentType_parser (::mix::typeOfSegmentTypeType_pskel& p)
  {
    this->SegmentType_parser_ = &p;
  }

  inline
  void Segments_pskel::
  StripOffsets_parser (::mix::typeOfStripOffsetsType_pskel& p)
  {
    this->StripOffsets_parser_ = &p;
  }

  inline
  void Segments_pskel::
  RowsPerStrip_parser (::mix::typeOfRowsPerStripType_pskel& p)
  {
    this->RowsPerStrip_parser_ = &p;
  }

  inline
  void Segments_pskel::
  StripByteCounts_parser (::mix::typeOfStripByteCountsType_pskel& p)
  {
    this->StripByteCounts_parser_ = &p;
  }

  inline
  void Segments_pskel::
  TileWidth_parser (::mix::typeOfTileWidthType_pskel& p)
  {
    this->TileWidth_parser_ = &p;
  }

  inline
  void Segments_pskel::
  TileLength_parser (::mix::typeOfTileLengthType_pskel& p)
  {
    this->TileLength_parser_ = &p;
  }

  inline
  void Segments_pskel::
  TileOffsets_parser (::mix::typeOfTileOffsetsType_pskel& p)
  {
    this->TileOffsets_parser_ = &p;
  }

  inline
  void Segments_pskel::
  TileByteCounts_parser (::mix::typeOfTileByteCountsType_pskel& p)
  {
    this->TileByteCounts_parser_ = &p;
  }

  inline
  void Segments_pskel::
  parsers (::mix::typeOfSegmentTypeType_pskel& SegmentType,
           ::mix::typeOfStripOffsetsType_pskel& StripOffsets,
           ::mix::typeOfRowsPerStripType_pskel& RowsPerStrip,
           ::mix::typeOfStripByteCountsType_pskel& StripByteCounts,
           ::mix::typeOfTileWidthType_pskel& TileWidth,
           ::mix::typeOfTileLengthType_pskel& TileLength,
           ::mix::typeOfTileOffsetsType_pskel& TileOffsets,
           ::mix::typeOfTileByteCountsType_pskel& TileByteCounts)
  {
    this->SegmentType_parser_ = &SegmentType;
    this->StripOffsets_parser_ = &StripOffsets;
    this->RowsPerStrip_parser_ = &RowsPerStrip;
    this->StripByteCounts_parser_ = &StripByteCounts;
    this->TileWidth_parser_ = &TileWidth;
    this->TileLength_parser_ = &TileLength;
    this->TileOffsets_parser_ = &TileOffsets;
    this->TileByteCounts_parser_ = &TileByteCounts;
  }

  inline
  Segments_pskel::
  Segments_pskel ()
  : SegmentType_parser_ (0),
    StripOffsets_parser_ (0),
    RowsPerStrip_parser_ (0),
    StripByteCounts_parser_ (0),
    TileWidth_parser_ (0),
    TileLength_parser_ (0),
    TileOffsets_parser_ (0),
    TileByteCounts_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Checksum_pskel
  //

  inline
  void Checksum_pskel::
  ChecksumMethod_parser (::mix::typeOfChecksumMethodType_pskel& p)
  {
    this->ChecksumMethod_parser_ = &p;
  }

  inline
  void Checksum_pskel::
  ChecksumValue_parser (::mix::typeOfChecksumValueType_pskel& p)
  {
    this->ChecksumValue_parser_ = &p;
  }

  inline
  void Checksum_pskel::
  parsers (::mix::typeOfChecksumMethodType_pskel& ChecksumMethod,
           ::mix::typeOfChecksumValueType_pskel& ChecksumValue)
  {
    this->ChecksumMethod_parser_ = &ChecksumMethod;
    this->ChecksumValue_parser_ = &ChecksumValue;
  }

  inline
  Checksum_pskel::
  Checksum_pskel ()
  : ChecksumMethod_parser_ (0),
    ChecksumValue_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TargetedDisplayAR_pskel
  //

  inline
  void TargetedDisplayAR_pskel::
  XTargetedDisplayAR_parser (::mix::typeOfXTargetedDisplayARType_pskel& p)
  {
    this->XTargetedDisplayAR_parser_ = &p;
  }

  inline
  void TargetedDisplayAR_pskel::
  YTargetedDisplayAR_parser (::mix::typeOfYTargetedDisplayARType_pskel& p)
  {
    this->YTargetedDisplayAR_parser_ = &p;
  }

  inline
  void TargetedDisplayAR_pskel::
  parsers (::mix::typeOfXTargetedDisplayARType_pskel& XTargetedDisplayAR,
           ::mix::typeOfYTargetedDisplayARType_pskel& YTargetedDisplayAR)
  {
    this->XTargetedDisplayAR_parser_ = &XTargetedDisplayAR;
    this->YTargetedDisplayAR_parser_ = &YTargetedDisplayAR;
  }

  inline
  TargetedDisplayAR_pskel::
  TargetedDisplayAR_pskel ()
  : XTargetedDisplayAR_parser_ (0),
    YTargetedDisplayAR_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ScanningSystemHardware_pskel
  //

  inline
  void ScanningSystemHardware_pskel::
  ScannerManufacturer_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ScannerManufacturer_parser_ = &p;
  }

  inline
  void ScanningSystemHardware_pskel::
  ScannerModel_parser (::mix::ScannerModel_pskel& p)
  {
    this->ScannerModel_parser_ = &p;
  }

  inline
  void ScanningSystemHardware_pskel::
  parsers (::mix::typeOfStringType_pskel& ScannerManufacturer,
           ::mix::ScannerModel_pskel& ScannerModel)
  {
    this->ScannerManufacturer_parser_ = &ScannerManufacturer;
    this->ScannerModel_parser_ = &ScannerModel;
  }

  inline
  ScanningSystemHardware_pskel::
  ScanningSystemHardware_pskel ()
  : ScannerManufacturer_parser_ (0),
    ScannerModel_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ScanningSystemSoftware_pskel
  //

  inline
  void ScanningSystemSoftware_pskel::
  ScanningSoftware_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ScanningSoftware_parser_ = &p;
  }

  inline
  void ScanningSystemSoftware_pskel::
  ScanningSoftwareVersionNo_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ScanningSoftwareVersionNo_parser_ = &p;
  }

  inline
  void ScanningSystemSoftware_pskel::
  parsers (::mix::typeOfStringType_pskel& ScanningSoftware,
           ::mix::typeOfStringType_pskel& ScanningSoftwareVersionNo)
  {
    this->ScanningSoftware_parser_ = &ScanningSoftware;
    this->ScanningSoftwareVersionNo_parser_ = &ScanningSoftwareVersionNo;
  }

  inline
  ScanningSystemSoftware_pskel::
  ScanningSystemSoftware_pskel ()
  : ScanningSoftware_parser_ (0),
    ScanningSoftwareVersionNo_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ScannerCaptureSettings_pskel
  //

  inline
  void ScannerCaptureSettings_pskel::
  PixelSize_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->PixelSize_parser_ = &p;
  }

  inline
  void ScannerCaptureSettings_pskel::
  PhysScanResolution_parser (::mix::PhysScanResolution_pskel& p)
  {
    this->PhysScanResolution_parser_ = &p;
  }

  inline
  void ScannerCaptureSettings_pskel::
  parsers (::mix::typeOfNonNegativeRealType_pskel& PixelSize,
           ::mix::PhysScanResolution_pskel& PhysScanResolution)
  {
    this->PixelSize_parser_ = &PixelSize;
    this->PhysScanResolution_parser_ = &PhysScanResolution;
  }

  inline
  ScannerCaptureSettings_pskel::
  ScannerCaptureSettings_pskel ()
  : PixelSize_parser_ (0),
    PhysScanResolution_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PrintAspectRatio_pskel
  //

  inline
  void PrintAspectRatio_pskel::
  XPrintAspectRatio_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->XPrintAspectRatio_parser_ = &p;
  }

  inline
  void PrintAspectRatio_pskel::
  YPrintAspectRatio_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->YPrintAspectRatio_parser_ = &p;
  }

  inline
  void PrintAspectRatio_pskel::
  parsers (::mix::typeOfNonNegativeRealType_pskel& XPrintAspectRatio,
           ::mix::typeOfNonNegativeRealType_pskel& YPrintAspectRatio)
  {
    this->XPrintAspectRatio_parser_ = &XPrintAspectRatio;
    this->YPrintAspectRatio_parser_ = &YPrintAspectRatio;
  }

  inline
  PrintAspectRatio_pskel::
  PrintAspectRatio_pskel ()
  : XPrintAspectRatio_parser_ (0),
    YPrintAspectRatio_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Source_X_pskel
  //

  inline
  void Source_X_pskel::
  Source_Xdimension_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->Source_Xdimension_parser_ = &p;
  }

  inline
  void Source_X_pskel::
  Source_XdimensionUnit_parser (::mix::typeOfStringType_pskel& p)
  {
    this->Source_XdimensionUnit_parser_ = &p;
  }

  inline
  void Source_X_pskel::
  parsers (::mix::typeOfNonNegativeRealType_pskel& Source_Xdimension,
           ::mix::typeOfStringType_pskel& Source_XdimensionUnit)
  {
    this->Source_Xdimension_parser_ = &Source_Xdimension;
    this->Source_XdimensionUnit_parser_ = &Source_XdimensionUnit;
  }

  inline
  Source_X_pskel::
  Source_X_pskel ()
  : Source_Xdimension_parser_ (0),
    Source_XdimensionUnit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Source_Y_pskel
  //

  inline
  void Source_Y_pskel::
  Source_Ydimension_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->Source_Ydimension_parser_ = &p;
  }

  inline
  void Source_Y_pskel::
  Source_YdimensionUnit_parser (::mix::typeOfStringType_pskel& p)
  {
    this->Source_YdimensionUnit_parser_ = &p;
  }

  inline
  void Source_Y_pskel::
  parsers (::mix::typeOfNonNegativeRealType_pskel& Source_Ydimension,
           ::mix::typeOfStringType_pskel& Source_YdimensionUnit)
  {
    this->Source_Ydimension_parser_ = &Source_Ydimension;
    this->Source_YdimensionUnit_parser_ = &Source_YdimensionUnit;
  }

  inline
  Source_Y_pskel::
  Source_Y_pskel ()
  : Source_Ydimension_parser_ (0),
    Source_YdimensionUnit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Colormap_pskel
  //

  inline
  void Colormap_pskel::
  Colormap_BitCodeValue_parser (::mix::typeOfColormapType_pskel& p)
  {
    this->Colormap_BitCodeValue_parser_ = &p;
  }

  inline
  void Colormap_pskel::
  Colormap_RedValue_parser (::mix::typeOfColormapType_pskel& p)
  {
    this->Colormap_RedValue_parser_ = &p;
  }

  inline
  void Colormap_pskel::
  Colormap_GreenValue_parser (::mix::typeOfColormapType_pskel& p)
  {
    this->Colormap_GreenValue_parser_ = &p;
  }

  inline
  void Colormap_pskel::
  Colormap_BlueValue_parser (::mix::typeOfColormapType_pskel& p)
  {
    this->Colormap_BlueValue_parser_ = &p;
  }

  inline
  void Colormap_pskel::
  parsers (::mix::typeOfColormapType_pskel& Colormap_BitCodeValue,
           ::mix::typeOfColormapType_pskel& Colormap_RedValue,
           ::mix::typeOfColormapType_pskel& Colormap_GreenValue,
           ::mix::typeOfColormapType_pskel& Colormap_BlueValue)
  {
    this->Colormap_BitCodeValue_parser_ = &Colormap_BitCodeValue;
    this->Colormap_RedValue_parser_ = &Colormap_RedValue;
    this->Colormap_GreenValue_parser_ = &Colormap_GreenValue;
    this->Colormap_BlueValue_parser_ = &Colormap_BlueValue;
  }

  inline
  Colormap_pskel::
  Colormap_pskel ()
  : Colormap_BitCodeValue_parser_ (0),
    Colormap_RedValue_parser_ (0),
    Colormap_GreenValue_parser_ (0),
    Colormap_BlueValue_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // GrayResponse_pskel
  //

  inline
  void GrayResponse_pskel::
  GrayResponseCurve_parser (::mix::typeOfGrayResponseCurveType_pskel& p)
  {
    this->GrayResponseCurve_parser_ = &p;
  }

  inline
  void GrayResponse_pskel::
  GrayResponseUnit_parser (::mix::typeOfGrayResponseUnitType_pskel& p)
  {
    this->GrayResponseUnit_parser_ = &p;
  }

  inline
  void GrayResponse_pskel::
  parsers (::mix::typeOfGrayResponseCurveType_pskel& GrayResponseCurve,
           ::mix::typeOfGrayResponseUnitType_pskel& GrayResponseUnit)
  {
    this->GrayResponseCurve_parser_ = &GrayResponseCurve;
    this->GrayResponseUnit_parser_ = &GrayResponseUnit;
  }

  inline
  GrayResponse_pskel::
  GrayResponse_pskel ()
  : GrayResponseCurve_parser_ (0),
    GrayResponseUnit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // WhitePoint_pskel
  //

  inline
  void WhitePoint_pskel::
  WhitePoint_Xvalue_parser (::mix::typeOfCIExyType_pskel& p)
  {
    this->WhitePoint_Xvalue_parser_ = &p;
  }

  inline
  void WhitePoint_pskel::
  WhitePoint_Yvalue_parser (::mix::typeOfCIExyType_pskel& p)
  {
    this->WhitePoint_Yvalue_parser_ = &p;
  }

  inline
  void WhitePoint_pskel::
  parsers (::mix::typeOfCIExyType_pskel& WhitePoint_Xvalue,
           ::mix::typeOfCIExyType_pskel& WhitePoint_Yvalue)
  {
    this->WhitePoint_Xvalue_parser_ = &WhitePoint_Xvalue;
    this->WhitePoint_Yvalue_parser_ = &WhitePoint_Yvalue;
  }

  inline
  WhitePoint_pskel::
  WhitePoint_pskel ()
  : WhitePoint_Xvalue_parser_ (0),
    WhitePoint_Yvalue_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PrimaryChromaticities_pskel
  //

  inline
  void PrimaryChromaticities_pskel::
  PrimaryChromaticities_RedX_parser (::mix::typeOfCIExyType_pskel& p)
  {
    this->PrimaryChromaticities_RedX_parser_ = &p;
  }

  inline
  void PrimaryChromaticities_pskel::
  PrimaryChromaticities_RedY_parser (::mix::typeOfCIExyType_pskel& p)
  {
    this->PrimaryChromaticities_RedY_parser_ = &p;
  }

  inline
  void PrimaryChromaticities_pskel::
  PrimaryChromaticities_GreenX_parser (::mix::typeOfCIExyType_pskel& p)
  {
    this->PrimaryChromaticities_GreenX_parser_ = &p;
  }

  inline
  void PrimaryChromaticities_pskel::
  PrimaryChromaticities_GreenY_parser (::mix::typeOfCIExyType_pskel& p)
  {
    this->PrimaryChromaticities_GreenY_parser_ = &p;
  }

  inline
  void PrimaryChromaticities_pskel::
  PrimaryChromaticities_BlueX_parser (::mix::typeOfCIExyType_pskel& p)
  {
    this->PrimaryChromaticities_BlueX_parser_ = &p;
  }

  inline
  void PrimaryChromaticities_pskel::
  PrimaryChromaticities_BlueY_parser (::mix::typeOfCIExyType_pskel& p)
  {
    this->PrimaryChromaticities_BlueY_parser_ = &p;
  }

  inline
  void PrimaryChromaticities_pskel::
  parsers (::mix::typeOfCIExyType_pskel& PrimaryChromaticities_RedX,
           ::mix::typeOfCIExyType_pskel& PrimaryChromaticities_RedY,
           ::mix::typeOfCIExyType_pskel& PrimaryChromaticities_GreenX,
           ::mix::typeOfCIExyType_pskel& PrimaryChromaticities_GreenY,
           ::mix::typeOfCIExyType_pskel& PrimaryChromaticities_BlueX,
           ::mix::typeOfCIExyType_pskel& PrimaryChromaticities_BlueY)
  {
    this->PrimaryChromaticities_RedX_parser_ = &PrimaryChromaticities_RedX;
    this->PrimaryChromaticities_RedY_parser_ = &PrimaryChromaticities_RedY;
    this->PrimaryChromaticities_GreenX_parser_ = &PrimaryChromaticities_GreenX;
    this->PrimaryChromaticities_GreenY_parser_ = &PrimaryChromaticities_GreenY;
    this->PrimaryChromaticities_BlueX_parser_ = &PrimaryChromaticities_BlueX;
    this->PrimaryChromaticities_BlueY_parser_ = &PrimaryChromaticities_BlueY;
  }

  inline
  PrimaryChromaticities_pskel::
  PrimaryChromaticities_pskel ()
  : PrimaryChromaticities_RedX_parser_ (0),
    PrimaryChromaticities_RedY_parser_ (0),
    PrimaryChromaticities_GreenX_parser_ (0),
    PrimaryChromaticities_GreenY_parser_ (0),
    PrimaryChromaticities_BlueX_parser_ (0),
    PrimaryChromaticities_BlueY_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TargetID_pskel
  //

  inline
  void TargetID_pskel::
  TargetIDManufacturer_parser (::mix::typeOfStringType_pskel& p)
  {
    this->TargetIDManufacturer_parser_ = &p;
  }

  inline
  void TargetID_pskel::
  TargetIDName_parser (::mix::typeOfStringType_pskel& p)
  {
    this->TargetIDName_parser_ = &p;
  }

  inline
  void TargetID_pskel::
  TargetIDNo_parser (::mix::typeOfStringType_pskel& p)
  {
    this->TargetIDNo_parser_ = &p;
  }

  inline
  void TargetID_pskel::
  TargetIDMedia_parser (::mix::typeOfStringType_pskel& p)
  {
    this->TargetIDMedia_parser_ = &p;
  }

  inline
  void TargetID_pskel::
  parsers (::mix::typeOfStringType_pskel& TargetIDManufacturer,
           ::mix::typeOfStringType_pskel& TargetIDName,
           ::mix::typeOfStringType_pskel& TargetIDNo,
           ::mix::typeOfStringType_pskel& TargetIDMedia)
  {
    this->TargetIDManufacturer_parser_ = &TargetIDManufacturer;
    this->TargetIDName_parser_ = &TargetIDName;
    this->TargetIDNo_parser_ = &TargetIDNo;
    this->TargetIDMedia_parser_ = &TargetIDMedia;
  }

  inline
  TargetID_pskel::
  TargetID_pskel ()
  : TargetIDManufacturer_parser_ (0),
    TargetIDName_parser_ (0),
    TargetIDNo_parser_ (0),
    TargetIDMedia_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ProcessingSoftware_pskel
  //

  inline
  void ProcessingSoftware_pskel::
  ProcessingSoftwareName_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ProcessingSoftwareName_parser_ = &p;
  }

  inline
  void ProcessingSoftware_pskel::
  ProcessingSoftwareVersion_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ProcessingSoftwareVersion_parser_ = &p;
  }

  inline
  void ProcessingSoftware_pskel::
  parsers (::mix::typeOfStringType_pskel& ProcessingSoftwareName,
           ::mix::typeOfStringType_pskel& ProcessingSoftwareVersion)
  {
    this->ProcessingSoftwareName_parser_ = &ProcessingSoftwareName;
    this->ProcessingSoftwareVersion_parser_ = &ProcessingSoftwareVersion;
  }

  inline
  ProcessingSoftware_pskel::
  ProcessingSoftware_pskel ()
  : ProcessingSoftwareName_parser_ (0),
    ProcessingSoftwareVersion_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ICCProfile_pskel
  //

  inline
  void ICCProfile_pskel::
  ProfileName_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ProfileName_parser_ = &p;
  }

  inline
  void ICCProfile_pskel::
  ProfileURL_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ProfileURL_parser_ = &p;
  }

  inline
  void ICCProfile_pskel::
  parsers (::mix::typeOfStringType_pskel& ProfileName,
           ::mix::typeOfStringType_pskel& ProfileURL)
  {
    this->ProfileName_parser_ = &ProfileName;
    this->ProfileURL_parser_ = &ProfileURL;
  }

  inline
  ICCProfile_pskel::
  ICCProfile_pskel ()
  : ProfileName_parser_ (0),
    ProfileURL_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ScannerModel_pskel
  //

  inline
  void ScannerModel_pskel::
  ScannerModelName_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ScannerModelName_parser_ = &p;
  }

  inline
  void ScannerModel_pskel::
  ScannerModelNumber_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ScannerModelNumber_parser_ = &p;
  }

  inline
  void ScannerModel_pskel::
  ScannerModelSerialNo_parser (::mix::typeOfStringType_pskel& p)
  {
    this->ScannerModelSerialNo_parser_ = &p;
  }

  inline
  void ScannerModel_pskel::
  parsers (::mix::typeOfStringType_pskel& ScannerModelName,
           ::mix::typeOfStringType_pskel& ScannerModelNumber,
           ::mix::typeOfStringType_pskel& ScannerModelSerialNo)
  {
    this->ScannerModelName_parser_ = &ScannerModelName;
    this->ScannerModelNumber_parser_ = &ScannerModelNumber;
    this->ScannerModelSerialNo_parser_ = &ScannerModelSerialNo;
  }

  inline
  ScannerModel_pskel::
  ScannerModel_pskel ()
  : ScannerModelName_parser_ (0),
    ScannerModelNumber_parser_ (0),
    ScannerModelSerialNo_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PhysScanResolution_pskel
  //

  inline
  void PhysScanResolution_pskel::
  XphysScanResolution_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->XphysScanResolution_parser_ = &p;
  }

  inline
  void PhysScanResolution_pskel::
  YphysScanResolution_parser (::mix::typeOfNonNegativeRealType_pskel& p)
  {
    this->YphysScanResolution_parser_ = &p;
  }

  inline
  void PhysScanResolution_pskel::
  parsers (::mix::typeOfNonNegativeRealType_pskel& XphysScanResolution,
           ::mix::typeOfNonNegativeRealType_pskel& YphysScanResolution)
  {
    this->XphysScanResolution_parser_ = &XphysScanResolution;
    this->YphysScanResolution_parser_ = &YphysScanResolution;
  }

  inline
  PhysScanResolution_pskel::
  PhysScanResolution_pskel ()
  : XphysScanResolution_parser_ (0),
    YphysScanResolution_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

