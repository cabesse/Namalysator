// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_________DATA_SCHEMAS_METS_PSKEL_HXX
#define CXX_________DATA_SCHEMAS_METS_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace METS
{
  class metsType_pskel;
  class amdSecType_pskel;
  class fileGrpType_pskel;
  class structMapType_pskel;
  class divType_pskel;
  class seqType_pskel;
  class areaType_pskel;
  class structLinkType_pskel;
  class behaviorSecType_pskel;
  class behaviorType_pskel;
  class objectType_pskel;
  class mdSecType_pskel;
  class mets_pskel;
  class metsHdr_pskel;
  class fileSec_pskel;
  class file_pskel;
  class mptr_pskel;
  class fptr_pskel;
  class SHAPE_pskel;
  class BETYPE_pskel;
  class EXTTYPE_pskel;
  class smLink_pskel;
  class mdRef_pskel;
  class mdWrap_pskel;
  class MDTYPE_pskel;
  class LOCTYPE_pskel;
  class agent_pskel;
  class altRecordID_pskel;
  class fileGrp_pskel;
  class FLocat_pskel;
  class FContent_pskel;
  class CHECKSUMTYPE_pskel;
  class par_pskel;
  class xmlData_pskel;
  class ROLE_pskel;
  class TYPE_pskel;
  class xmlData1_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

#include "xlink-pskel.hxx"

#include "mix-pskel.hxx"

#include "rdf-pskel.hxx"

#include "mods-3-0-pskel.hxx"

namespace METS
{
  class metsType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    metsHdr ();

    virtual void
    dmdSec ();

    virtual void
    amdSec ();

    virtual void
    fileSec ();

    virtual void
    structMap ();

    virtual void
    structLink ();

    virtual void
    behaviorSec ();

    virtual void
    ID (const ::std::string&);

    virtual void
    OBJID (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    TYPE (const ::std::string&);

    virtual void
    PROFILE (const ::std::string&);

    virtual void
    post_metsType ();

    // Parser construction API.
    //
    void
    metsHdr_parser (::METS::metsHdr_pskel&);

    void
    dmdSec_parser (::METS::mdSecType_pskel&);

    void
    amdSec_parser (::METS::amdSecType_pskel&);

    void
    fileSec_parser (::METS::fileSec_pskel&);

    void
    structMap_parser (::METS::structMapType_pskel&);

    void
    structLink_parser (::METS::structLinkType_pskel&);

    void
    behaviorSec_parser (::METS::behaviorSecType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    OBJID_parser (::xml_schema::string_pskel&);

    void
    LABEL_parser (::xml_schema::string_pskel&);

    void
    TYPE_parser (::xml_schema::string_pskel&);

    void
    PROFILE_parser (::xml_schema::string_pskel&);

    void
    parsers (::METS::metsHdr_pskel& /* metsHdr */,
             ::METS::mdSecType_pskel& /* dmdSec */,
             ::METS::amdSecType_pskel& /* amdSec */,
             ::METS::fileSec_pskel& /* fileSec */,
             ::METS::structMapType_pskel& /* structMap */,
             ::METS::structLinkType_pskel& /* structLink */,
             ::METS::behaviorSecType_pskel& /* behaviorSec */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* OBJID */,
             ::xml_schema::string_pskel& /* LABEL */,
             ::xml_schema::string_pskel& /* TYPE */,
             ::xml_schema::string_pskel& /* PROFILE */);

    // Constructor.
    //
    metsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::metsHdr_pskel* metsHdr_parser_;
    ::METS::mdSecType_pskel* dmdSec_parser_;
    ::METS::amdSecType_pskel* amdSec_parser_;
    ::METS::fileSec_pskel* fileSec_parser_;
    ::METS::structMapType_pskel* structMap_parser_;
    ::METS::structLinkType_pskel* structLink_parser_;
    ::METS::behaviorSecType_pskel* behaviorSec_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* OBJID_parser_;
    ::xml_schema::string_pskel* LABEL_parser_;
    ::xml_schema::string_pskel* TYPE_parser_;
    ::xml_schema::string_pskel* PROFILE_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::metsType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class amdSecType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    techMD ();

    virtual void
    rightsMD ();

    virtual void
    sourceMD ();

    virtual void
    digiprovMD ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_amdSecType ();

    // Parser construction API.
    //
    void
    techMD_parser (::METS::mdSecType_pskel&);

    void
    rightsMD_parser (::METS::mdSecType_pskel&);

    void
    sourceMD_parser (::METS::mdSecType_pskel&);

    void
    digiprovMD_parser (::METS::mdSecType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    parsers (::METS::mdSecType_pskel& /* techMD */,
             ::METS::mdSecType_pskel& /* rightsMD */,
             ::METS::mdSecType_pskel& /* sourceMD */,
             ::METS::mdSecType_pskel& /* digiprovMD */,
             ::xml_schema::id_pskel& /* ID */);

    // Constructor.
    //
    amdSecType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::mdSecType_pskel* techMD_parser_;
    ::METS::mdSecType_pskel* rightsMD_parser_;
    ::METS::mdSecType_pskel* sourceMD_parser_;
    ::METS::mdSecType_pskel* digiprovMD_parser_;
    ::xml_schema::id_pskel* ID_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::amdSecType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class fileGrpType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    fileGrp ();

    virtual void
    file ();

    virtual void
    ID (const ::std::string&);

    virtual void
    VERSDATE (const ::xml_schema::date_time&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    USE (const ::std::string&);

    virtual void
    post_fileGrpType ();

    // Parser construction API.
    //
    void
    fileGrp_parser (::METS::fileGrpType_pskel&);

    void
    file_parser (::METS::file_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    VERSDATE_parser (::xml_schema::date_time_pskel&);

    void
    ADMID_parser (::xml_schema::idrefs_pskel&);

    void
    USE_parser (::xml_schema::string_pskel&);

    void
    parsers (::METS::fileGrpType_pskel& /* fileGrp */,
             ::METS::file_pskel& /* file */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::date_time_pskel& /* VERSDATE */,
             ::xml_schema::idrefs_pskel& /* ADMID */,
             ::xml_schema::string_pskel& /* USE */);

    // Constructor.
    //
    fileGrpType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::fileGrpType_pskel* fileGrp_parser_;
    ::METS::file_pskel* file_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::date_time_pskel* VERSDATE_parser_;
    ::xml_schema::idrefs_pskel* ADMID_parser_;
    ::xml_schema::string_pskel* USE_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::fileGrpType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class structMapType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    div ();

    virtual void
    ID (const ::std::string&);

    virtual void
    TYPE (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    post_structMapType ();

    // Parser construction API.
    //
    void
    div_parser (::METS::divType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    TYPE_parser (::xml_schema::string_pskel&);

    void
    LABEL_parser (::xml_schema::string_pskel&);

    void
    parsers (::METS::divType_pskel& /* div */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* TYPE */,
             ::xml_schema::string_pskel& /* LABEL */);

    // Constructor.
    //
    structMapType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::divType_pskel* div_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* TYPE_parser_;
    ::xml_schema::string_pskel* LABEL_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::structMapType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class divType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    mptr ();

    virtual void
    fptr ();

    virtual void
    div ();

    virtual void
    ID (const ::std::string&);

    virtual void
    ORDER (long long);

    virtual void
    ORDERLABEL (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    DMDID (const ::xml_schema::string_sequence&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    TYPE (const ::std::string&);

    virtual void
    post_divType ();

    // Parser construction API.
    //
    void
    mptr_parser (::METS::mptr_pskel&);

    void
    fptr_parser (::METS::fptr_pskel&);

    void
    div_parser (::METS::divType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    ORDER_parser (::xml_schema::integer_pskel&);

    void
    ORDERLABEL_parser (::xml_schema::string_pskel&);

    void
    LABEL_parser (::xml_schema::string_pskel&);

    void
    DMDID_parser (::xml_schema::idrefs_pskel&);

    void
    ADMID_parser (::xml_schema::idrefs_pskel&);

    void
    TYPE_parser (::xml_schema::string_pskel&);

    void
    parsers (::METS::mptr_pskel& /* mptr */,
             ::METS::fptr_pskel& /* fptr */,
             ::METS::divType_pskel& /* div */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::integer_pskel& /* ORDER */,
             ::xml_schema::string_pskel& /* ORDERLABEL */,
             ::xml_schema::string_pskel& /* LABEL */,
             ::xml_schema::idrefs_pskel& /* DMDID */,
             ::xml_schema::idrefs_pskel& /* ADMID */,
             ::xml_schema::string_pskel& /* TYPE */);

    // Constructor.
    //
    divType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::mptr_pskel* mptr_parser_;
    ::METS::fptr_pskel* fptr_parser_;
    ::METS::divType_pskel* div_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::integer_pskel* ORDER_parser_;
    ::xml_schema::string_pskel* ORDERLABEL_parser_;
    ::xml_schema::string_pskel* LABEL_parser_;
    ::xml_schema::idrefs_pskel* DMDID_parser_;
    ::xml_schema::idrefs_pskel* ADMID_parser_;
    ::xml_schema::string_pskel* TYPE_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::divType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class seqType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_seqType ();

    // Parser construction API.
    //
    void
    area_parser (::METS::areaType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    parsers (::METS::areaType_pskel& /* area */,
             ::xml_schema::id_pskel& /* ID */);

    // Constructor.
    //
    seqType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::areaType_pskel* area_parser_;
    ::xml_schema::id_pskel* ID_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::seqType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class areaType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    FILEID (const ::std::string&);

    virtual void
    SHAPE ();

    virtual void
    COORDS (const ::std::string&);

    virtual void
    BEGIN (const ::std::string&);

    virtual void
    END (const ::std::string&);

    virtual void
    BETYPE ();

    virtual void
    EXTENT (const ::std::string&);

    virtual void
    EXTTYPE ();

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    post_areaType ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    FILEID_parser (::xml_schema::idref_pskel&);

    void
    SHAPE_parser (::METS::SHAPE_pskel&);

    void
    COORDS_parser (::xml_schema::string_pskel&);

    void
    BEGIN_parser (::xml_schema::string_pskel&);

    void
    END_parser (::xml_schema::string_pskel&);

    void
    BETYPE_parser (::METS::BETYPE_pskel&);

    void
    EXTENT_parser (::xml_schema::string_pskel&);

    void
    EXTTYPE_parser (::METS::EXTTYPE_pskel&);

    void
    ADMID_parser (::xml_schema::idrefs_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idref_pskel& /* FILEID */,
             ::METS::SHAPE_pskel& /* SHAPE */,
             ::xml_schema::string_pskel& /* COORDS */,
             ::xml_schema::string_pskel& /* BEGIN */,
             ::xml_schema::string_pskel& /* END */,
             ::METS::BETYPE_pskel& /* BETYPE */,
             ::xml_schema::string_pskel& /* EXTENT */,
             ::METS::EXTTYPE_pskel& /* EXTTYPE */,
             ::xml_schema::idrefs_pskel& /* ADMID */);

    // Constructor.
    //
    areaType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::idref_pskel* FILEID_parser_;
    ::METS::SHAPE_pskel* SHAPE_parser_;
    ::xml_schema::string_pskel* COORDS_parser_;
    ::xml_schema::string_pskel* BEGIN_parser_;
    ::xml_schema::string_pskel* END_parser_;
    ::METS::BETYPE_pskel* BETYPE_parser_;
    ::xml_schema::string_pskel* EXTENT_parser_;
    ::METS::EXTTYPE_pskel* EXTTYPE_parser_;
    ::xml_schema::idrefs_pskel* ADMID_parser_;

    protected:
    struct v_state_attr_
    {
      bool FILEID;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structLinkType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    smLink ();

    virtual void
    post_structLinkType ();

    // Parser construction API.
    //
    void
    smLink_parser (::METS::smLink_pskel&);

    void
    parsers (::METS::smLink_pskel& /* smLink */);

    // Constructor.
    //
    structLinkType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::METS::smLink_pskel* smLink_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::structLinkType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class behaviorSecType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    behaviorSec ();

    virtual void
    behavior ();

    virtual void
    ID (const ::std::string&);

    virtual void
    CREATED (const ::xml_schema::date_time&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    post_behaviorSecType ();

    // Parser construction API.
    //
    void
    behaviorSec_parser (::METS::behaviorSecType_pskel&);

    void
    behavior_parser (::METS::behaviorType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    CREATED_parser (::xml_schema::date_time_pskel&);

    void
    LABEL_parser (::xml_schema::string_pskel&);

    void
    parsers (::METS::behaviorSecType_pskel& /* behaviorSec */,
             ::METS::behaviorType_pskel& /* behavior */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::date_time_pskel& /* CREATED */,
             ::xml_schema::string_pskel& /* LABEL */);

    // Constructor.
    //
    behaviorSecType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::behaviorSecType_pskel* behaviorSec_parser_;
    ::METS::behaviorType_pskel* behavior_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::date_time_pskel* CREATED_parser_;
    ::xml_schema::string_pskel* LABEL_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::behaviorSecType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class behaviorType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    interfaceDef ();

    virtual void
    mechanism ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STRUCTID (const ::xml_schema::string_sequence&);

    virtual void
    BTYPE (const ::std::string&);

    virtual void
    CREATED (const ::xml_schema::date_time&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    GROUPID (const ::std::string&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    post_behaviorType ();

    // Parser construction API.
    //
    void
    interfaceDef_parser (::METS::objectType_pskel&);

    void
    mechanism_parser (::METS::objectType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    STRUCTID_parser (::xml_schema::idrefs_pskel&);

    void
    BTYPE_parser (::xml_schema::string_pskel&);

    void
    CREATED_parser (::xml_schema::date_time_pskel&);

    void
    LABEL_parser (::xml_schema::string_pskel&);

    void
    GROUPID_parser (::xml_schema::string_pskel&);

    void
    ADMID_parser (::xml_schema::idrefs_pskel&);

    void
    parsers (::METS::objectType_pskel& /* interfaceDef */,
             ::METS::objectType_pskel& /* mechanism */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idrefs_pskel& /* STRUCTID */,
             ::xml_schema::string_pskel& /* BTYPE */,
             ::xml_schema::date_time_pskel& /* CREATED */,
             ::xml_schema::string_pskel& /* LABEL */,
             ::xml_schema::string_pskel& /* GROUPID */,
             ::xml_schema::idrefs_pskel& /* ADMID */);

    // Constructor.
    //
    behaviorType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::objectType_pskel* interfaceDef_parser_;
    ::METS::objectType_pskel* mechanism_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::idrefs_pskel* STRUCTID_parser_;
    ::xml_schema::string_pskel* BTYPE_parser_;
    ::xml_schema::date_time_pskel* CREATED_parser_;
    ::xml_schema::string_pskel* LABEL_parser_;
    ::xml_schema::string_pskel* GROUPID_parser_;
    ::xml_schema::idrefs_pskel* ADMID_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::behaviorType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool ID;
      bool STRUCTID;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class objectType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    LOCTYPE ();

    virtual void
    OTHERLOCTYPE (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    post_objectType ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    LABEL_parser (::xml_schema::string_pskel&);

    void
    LOCTYPE_parser (::METS::LOCTYPE_pskel&);

    void
    OTHERLOCTYPE_parser (::xml_schema::string_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    href_parser (::xml_schema::uri_pskel&);

    void
    role_parser (::xml_schema::string_pskel&);

    void
    arcrole_parser (::xml_schema::string_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    show_parser (::xlink::show_pskel&);

    void
    actuate_parser (::xlink::actuate_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* LABEL */,
             ::METS::LOCTYPE_pskel& /* LOCTYPE */,
             ::xml_schema::string_pskel& /* OTHERLOCTYPE */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::uri_pskel& /* href */,
             ::xml_schema::string_pskel& /* role */,
             ::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */);

    // Constructor.
    //
    objectType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* LABEL_parser_;
    ::METS::LOCTYPE_pskel* LOCTYPE_parser_;
    ::xml_schema::string_pskel* OTHERLOCTYPE_parser_;
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::uri_pskel* href_parser_;
    ::xml_schema::string_pskel* role_parser_;
    ::xml_schema::string_pskel* arcrole_parser_;
    ::xml_schema::string_pskel* title_parser_;
    ::xlink::show_pskel* show_parser_;
    ::xlink::actuate_pskel* actuate_parser_;

    protected:
    struct v_state_attr_
    {
      bool LOCTYPE;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class mdSecType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    mdRef ();

    virtual void
    mdWrap ();

    virtual void
    ID (const ::std::string&);

    virtual void
    GROUPID (const ::std::string&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    CREATED (const ::xml_schema::date_time&);

    virtual void
    STATUS (const ::std::string&);

    virtual void
    post_mdSecType ();

    // Parser construction API.
    //
    void
    mdRef_parser (::METS::mdRef_pskel&);

    void
    mdWrap_parser (::METS::mdWrap_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    GROUPID_parser (::xml_schema::string_pskel&);

    void
    ADMID_parser (::xml_schema::idrefs_pskel&);

    void
    CREATED_parser (::xml_schema::date_time_pskel&);

    void
    STATUS_parser (::xml_schema::string_pskel&);

    void
    parsers (::METS::mdRef_pskel& /* mdRef */,
             ::METS::mdWrap_pskel& /* mdWrap */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* GROUPID */,
             ::xml_schema::idrefs_pskel& /* ADMID */,
             ::xml_schema::date_time_pskel& /* CREATED */,
             ::xml_schema::string_pskel& /* STATUS */);

    // Constructor.
    //
    mdSecType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::mdRef_pskel* mdRef_parser_;
    ::METS::mdWrap_pskel* mdWrap_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* GROUPID_parser_;
    ::xml_schema::idrefs_pskel* ADMID_parser_;
    ::xml_schema::date_time_pskel* CREATED_parser_;
    ::xml_schema::string_pskel* STATUS_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::mdSecType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long& state,
           unsigned char* count,
           const ::xml_schema::ro_string& ns,
           const ::xml_schema::ro_string& n,
           const ::xml_schema::ro_string* t,
           bool start);

    unsigned char v_all_first_[2UL];
    ::xsd::cxx::parser::validating::all_stack v_all_count_;

    protected:
    struct v_state_attr_
    {
      bool ID;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class mets_pskel: public virtual ::METS::metsType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_mets ();
  };

  class metsHdr_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    agent ();

    virtual void
    altRecordID ();

    virtual void
    ID (const ::std::string&);

    virtual void
    CREATEDATE (const ::xml_schema::date_time&);

    virtual void
    LASTMODDATE (const ::xml_schema::date_time&);

    virtual void
    RECORDSTATUS (const ::std::string&);

    virtual void
    post_metsHdr ();

    // Parser construction API.
    //
    void
    agent_parser (::METS::agent_pskel&);

    void
    altRecordID_parser (::METS::altRecordID_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    CREATEDATE_parser (::xml_schema::date_time_pskel&);

    void
    LASTMODDATE_parser (::xml_schema::date_time_pskel&);

    void
    RECORDSTATUS_parser (::xml_schema::string_pskel&);

    void
    parsers (::METS::agent_pskel& /* agent */,
             ::METS::altRecordID_pskel& /* altRecordID */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::date_time_pskel& /* CREATEDATE */,
             ::xml_schema::date_time_pskel& /* LASTMODDATE */,
             ::xml_schema::string_pskel& /* RECORDSTATUS */);

    // Constructor.
    //
    metsHdr_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::agent_pskel* agent_parser_;
    ::METS::altRecordID_pskel* altRecordID_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::date_time_pskel* CREATEDATE_parser_;
    ::xml_schema::date_time_pskel* LASTMODDATE_parser_;
    ::xml_schema::string_pskel* RECORDSTATUS_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::metsHdr_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class fileSec_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    fileGrp ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_fileSec ();

    // Parser construction API.
    //
    void
    fileGrp_parser (::METS::fileGrp_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    parsers (::METS::fileGrp_pskel& /* fileGrp */,
             ::xml_schema::id_pskel& /* ID */);

    // Constructor.
    //
    fileSec_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::fileGrp_pskel* fileGrp_parser_;
    ::xml_schema::id_pskel* ID_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::fileSec_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class file_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FLocat ();

    virtual void
    FContent ();

    virtual void
    ID (const ::std::string&);

    virtual void
    MIMETYPE (const ::std::string&);

    virtual void
    SEQ (int);

    virtual void
    SIZE (long long);

    virtual void
    CREATED (const ::xml_schema::date_time&);

    virtual void
    CHECKSUM (const ::std::string&);

    virtual void
    CHECKSUMTYPE ();

    virtual void
    OWNERID (const ::std::string&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    DMDID (const ::xml_schema::string_sequence&);

    virtual void
    GROUPID (const ::std::string&);

    virtual void
    USE (const ::std::string&);

    virtual void
    post_file ();

    // Parser construction API.
    //
    void
    FLocat_parser (::METS::FLocat_pskel&);

    void
    FContent_parser (::METS::FContent_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    MIMETYPE_parser (::xml_schema::string_pskel&);

    void
    SEQ_parser (::xml_schema::int_pskel&);

    void
    SIZE_parser (::xml_schema::long_pskel&);

    void
    CREATED_parser (::xml_schema::date_time_pskel&);

    void
    CHECKSUM_parser (::xml_schema::string_pskel&);

    void
    CHECKSUMTYPE_parser (::METS::CHECKSUMTYPE_pskel&);

    void
    OWNERID_parser (::xml_schema::string_pskel&);

    void
    ADMID_parser (::xml_schema::idrefs_pskel&);

    void
    DMDID_parser (::xml_schema::idrefs_pskel&);

    void
    GROUPID_parser (::xml_schema::string_pskel&);

    void
    USE_parser (::xml_schema::string_pskel&);

    void
    parsers (::METS::FLocat_pskel& /* FLocat */,
             ::METS::FContent_pskel& /* FContent */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* MIMETYPE */,
             ::xml_schema::int_pskel& /* SEQ */,
             ::xml_schema::long_pskel& /* SIZE */,
             ::xml_schema::date_time_pskel& /* CREATED */,
             ::xml_schema::string_pskel& /* CHECKSUM */,
             ::METS::CHECKSUMTYPE_pskel& /* CHECKSUMTYPE */,
             ::xml_schema::string_pskel& /* OWNERID */,
             ::xml_schema::idrefs_pskel& /* ADMID */,
             ::xml_schema::idrefs_pskel& /* DMDID */,
             ::xml_schema::string_pskel& /* GROUPID */,
             ::xml_schema::string_pskel& /* USE */);

    // Constructor.
    //
    file_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::FLocat_pskel* FLocat_parser_;
    ::METS::FContent_pskel* FContent_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* MIMETYPE_parser_;
    ::xml_schema::int_pskel* SEQ_parser_;
    ::xml_schema::long_pskel* SIZE_parser_;
    ::xml_schema::date_time_pskel* CREATED_parser_;
    ::xml_schema::string_pskel* CHECKSUM_parser_;
    ::METS::CHECKSUMTYPE_pskel* CHECKSUMTYPE_parser_;
    ::xml_schema::string_pskel* OWNERID_parser_;
    ::xml_schema::idrefs_pskel* ADMID_parser_;
    ::xml_schema::idrefs_pskel* DMDID_parser_;
    ::xml_schema::string_pskel* GROUPID_parser_;
    ::xml_schema::string_pskel* USE_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::file_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool ID;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class mptr_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    LOCTYPE ();

    virtual void
    OTHERLOCTYPE (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    post_mptr ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    LOCTYPE_parser (::METS::LOCTYPE_pskel&);

    void
    OTHERLOCTYPE_parser (::xml_schema::string_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    href_parser (::xml_schema::uri_pskel&);

    void
    role_parser (::xml_schema::string_pskel&);

    void
    arcrole_parser (::xml_schema::string_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    show_parser (::xlink::show_pskel&);

    void
    actuate_parser (::xlink::actuate_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::METS::LOCTYPE_pskel& /* LOCTYPE */,
             ::xml_schema::string_pskel& /* OTHERLOCTYPE */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::uri_pskel& /* href */,
             ::xml_schema::string_pskel& /* role */,
             ::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */);

    // Constructor.
    //
    mptr_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::METS::LOCTYPE_pskel* LOCTYPE_parser_;
    ::xml_schema::string_pskel* OTHERLOCTYPE_parser_;
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::uri_pskel* href_parser_;
    ::xml_schema::string_pskel* role_parser_;
    ::xml_schema::string_pskel* arcrole_parser_;
    ::xml_schema::string_pskel* title_parser_;
    ::xlink::show_pskel* show_parser_;
    ::xlink::actuate_pskel* actuate_parser_;

    protected:
    struct v_state_attr_
    {
      bool LOCTYPE;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class fptr_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    par ();

    virtual void
    seq ();

    virtual void
    area ();

    virtual void
    ID (const ::std::string&);

    virtual void
    FILEID (const ::std::string&);

    virtual void
    post_fptr ();

    // Parser construction API.
    //
    void
    par_parser (::METS::par_pskel&);

    void
    seq_parser (::METS::seqType_pskel&);

    void
    area_parser (::METS::areaType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    FILEID_parser (::xml_schema::idref_pskel&);

    void
    parsers (::METS::par_pskel& /* par */,
             ::METS::seqType_pskel& /* seq */,
             ::METS::areaType_pskel& /* area */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::idref_pskel& /* FILEID */);

    // Constructor.
    //
    fptr_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::par_pskel* par_parser_;
    ::METS::seqType_pskel* seq_parser_;
    ::METS::areaType_pskel* area_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::idref_pskel* FILEID_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::fptr_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class SHAPE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SHAPE ();
  };

  class BETYPE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BETYPE ();
  };

  class EXTTYPE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EXTTYPE ();
  };

  class smLink_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    to (const ::std::string&);

    virtual void
    from (const ::std::string&);

    virtual void
    post_smLink ();

    // Parser construction API.
    //
    void
    arcrole_parser (::xml_schema::string_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    show_parser (::xlink::show_pskel&);

    void
    actuate_parser (::xlink::actuate_pskel&);

    void
    to_parser (::xml_schema::idref_pskel&);

    void
    from_parser (::xml_schema::idref_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */,
             ::xml_schema::idref_pskel& /* to */,
             ::xml_schema::idref_pskel& /* from */);

    // Constructor.
    //
    smLink_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* arcrole_parser_;
    ::xml_schema::string_pskel* title_parser_;
    ::xlink::show_pskel* show_parser_;
    ::xlink::actuate_pskel* actuate_parser_;
    ::xml_schema::idref_pskel* to_parser_;
    ::xml_schema::idref_pskel* from_parser_;
  };

  class mdRef_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    LOCTYPE ();

    virtual void
    OTHERLOCTYPE (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    MDTYPE ();

    virtual void
    OTHERMDTYPE (const ::std::string&);

    virtual void
    MIMETYPE (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    XPTR (const ::std::string&);

    virtual void
    post_mdRef ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    LOCTYPE_parser (::METS::LOCTYPE_pskel&);

    void
    OTHERLOCTYPE_parser (::xml_schema::string_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    href_parser (::xml_schema::uri_pskel&);

    void
    role_parser (::xml_schema::string_pskel&);

    void
    arcrole_parser (::xml_schema::string_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    show_parser (::xlink::show_pskel&);

    void
    actuate_parser (::xlink::actuate_pskel&);

    void
    MDTYPE_parser (::METS::MDTYPE_pskel&);

    void
    OTHERMDTYPE_parser (::xml_schema::string_pskel&);

    void
    MIMETYPE_parser (::xml_schema::string_pskel&);

    void
    LABEL_parser (::xml_schema::string_pskel&);

    void
    XPTR_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::METS::LOCTYPE_pskel& /* LOCTYPE */,
             ::xml_schema::string_pskel& /* OTHERLOCTYPE */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::uri_pskel& /* href */,
             ::xml_schema::string_pskel& /* role */,
             ::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */,
             ::METS::MDTYPE_pskel& /* MDTYPE */,
             ::xml_schema::string_pskel& /* OTHERMDTYPE */,
             ::xml_schema::string_pskel& /* MIMETYPE */,
             ::xml_schema::string_pskel& /* LABEL */,
             ::xml_schema::string_pskel& /* XPTR */);

    // Constructor.
    //
    mdRef_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::METS::LOCTYPE_pskel* LOCTYPE_parser_;
    ::xml_schema::string_pskel* OTHERLOCTYPE_parser_;
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::uri_pskel* href_parser_;
    ::xml_schema::string_pskel* role_parser_;
    ::xml_schema::string_pskel* arcrole_parser_;
    ::xml_schema::string_pskel* title_parser_;
    ::xlink::show_pskel* show_parser_;
    ::xlink::actuate_pskel* actuate_parser_;
    ::METS::MDTYPE_pskel* MDTYPE_parser_;
    ::xml_schema::string_pskel* OTHERMDTYPE_parser_;
    ::xml_schema::string_pskel* MIMETYPE_parser_;
    ::xml_schema::string_pskel* LABEL_parser_;
    ::xml_schema::string_pskel* XPTR_parser_;

    protected:
    struct v_state_attr_
    {
      bool LOCTYPE;
      bool MDTYPE;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class mdWrap_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    binData (::std::auto_ptr< ::xml_schema::buffer >);

    virtual void
    xmlData ();

    virtual void
    ID (const ::std::string&);

    virtual void
    MIMETYPE (const ::std::string&);

    virtual void
    MDTYPE ();

    virtual void
    OTHERMDTYPE (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    post_mdWrap ();

    // Parser construction API.
    //
    void
    binData_parser (::xml_schema::base64_binary_pskel&);

    void
    xmlData_parser (::METS::xmlData_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    MIMETYPE_parser (::xml_schema::string_pskel&);

    void
    MDTYPE_parser (::METS::MDTYPE_pskel&);

    void
    OTHERMDTYPE_parser (::xml_schema::string_pskel&);

    void
    LABEL_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::base64_binary_pskel& /* binData */,
             ::METS::xmlData_pskel& /* xmlData */,
             ::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* MIMETYPE */,
             ::METS::MDTYPE_pskel& /* MDTYPE */,
             ::xml_schema::string_pskel& /* OTHERMDTYPE */,
             ::xml_schema::string_pskel& /* LABEL */);

    // Constructor.
    //
    mdWrap_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::base64_binary_pskel* binData_parser_;
    ::METS::xmlData_pskel* xmlData_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* MIMETYPE_parser_;
    ::METS::MDTYPE_pskel* MDTYPE_parser_;
    ::xml_schema::string_pskel* OTHERMDTYPE_parser_;
    ::xml_schema::string_pskel* LABEL_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::mdWrap_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

    protected:
    struct v_state_attr_
    {
      bool MDTYPE;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class MDTYPE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MDTYPE ();
  };

  class LOCTYPE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LOCTYPE ();
  };

  class agent_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    note (const ::std::string&);

    virtual void
    ID (const ::std::string&);

    virtual void
    ROLE ();

    virtual void
    OTHERROLE (const ::std::string&);

    virtual void
    TYPE ();

    virtual void
    OTHERTYPE (const ::std::string&);

    virtual void
    post_agent ();

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    note_parser (::xml_schema::string_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    ROLE_parser (::METS::ROLE_pskel&);

    void
    OTHERROLE_parser (::xml_schema::string_pskel&);

    void
    TYPE_parser (::METS::TYPE_pskel&);

    void
    OTHERTYPE_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* note */,
             ::xml_schema::id_pskel& /* ID */,
             ::METS::ROLE_pskel& /* ROLE */,
             ::xml_schema::string_pskel& /* OTHERROLE */,
             ::METS::TYPE_pskel& /* TYPE */,
             ::xml_schema::string_pskel& /* OTHERTYPE */);

    // Constructor.
    //
    agent_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* note_parser_;
    ::xml_schema::id_pskel* ID_parser_;
    ::METS::ROLE_pskel* ROLE_parser_;
    ::xml_schema::string_pskel* OTHERROLE_parser_;
    ::METS::TYPE_pskel* TYPE_parser_;
    ::xml_schema::string_pskel* OTHERTYPE_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::agent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool ROLE;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class altRecordID_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    TYPE (const ::std::string&);

    virtual void
    post_altRecordID ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    TYPE_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::xml_schema::string_pskel& /* TYPE */);

    // Constructor.
    //
    altRecordID_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::xml_schema::string_pskel* TYPE_parser_;
  };

  class fileGrp_pskel: public virtual ::METS::fileGrpType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_fileGrp ();
  };

  class FLocat_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    LOCTYPE ();

    virtual void
    OTHERLOCTYPE (const ::std::string&);

    virtual void
    USE (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    post_FLocat ();

    // Parser construction API.
    //
    void
    ID_parser (::xml_schema::id_pskel&);

    void
    LOCTYPE_parser (::METS::LOCTYPE_pskel&);

    void
    OTHERLOCTYPE_parser (::xml_schema::string_pskel&);

    void
    USE_parser (::xml_schema::string_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    href_parser (::xml_schema::uri_pskel&);

    void
    role_parser (::xml_schema::string_pskel&);

    void
    arcrole_parser (::xml_schema::string_pskel&);

    void
    title_parser (::xml_schema::string_pskel&);

    void
    show_parser (::xlink::show_pskel&);

    void
    actuate_parser (::xlink::actuate_pskel&);

    void
    parsers (::xml_schema::id_pskel& /* ID */,
             ::METS::LOCTYPE_pskel& /* LOCTYPE */,
             ::xml_schema::string_pskel& /* OTHERLOCTYPE */,
             ::xml_schema::string_pskel& /* USE */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::uri_pskel& /* href */,
             ::xml_schema::string_pskel& /* role */,
             ::xml_schema::string_pskel& /* arcrole */,
             ::xml_schema::string_pskel& /* title */,
             ::xlink::show_pskel& /* show */,
             ::xlink::actuate_pskel& /* actuate */);

    // Constructor.
    //
    FLocat_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::id_pskel* ID_parser_;
    ::METS::LOCTYPE_pskel* LOCTYPE_parser_;
    ::xml_schema::string_pskel* OTHERLOCTYPE_parser_;
    ::xml_schema::string_pskel* USE_parser_;
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::uri_pskel* href_parser_;
    ::xml_schema::string_pskel* role_parser_;
    ::xml_schema::string_pskel* arcrole_parser_;
    ::xml_schema::string_pskel* title_parser_;
    ::xlink::show_pskel* show_parser_;
    ::xlink::actuate_pskel* actuate_parser_;

    protected:
    struct v_state_attr_
    {
      bool LOCTYPE;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class FContent_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    binData (::std::auto_ptr< ::xml_schema::buffer >);

    virtual void
    xmlData ();

    virtual void
    USE (const ::std::string&);

    virtual void
    post_FContent ();

    // Parser construction API.
    //
    void
    binData_parser (::xml_schema::base64_binary_pskel&);

    void
    xmlData_parser (::METS::xmlData1_pskel&);

    void
    USE_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::base64_binary_pskel& /* binData */,
             ::METS::xmlData1_pskel& /* xmlData */,
             ::xml_schema::string_pskel& /* USE */);

    // Constructor.
    //
    FContent_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::base64_binary_pskel* binData_parser_;
    ::METS::xmlData1_pskel* xmlData_parser_;
    ::xml_schema::string_pskel* USE_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::FContent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class CHECKSUMTYPE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CHECKSUMTYPE ();
  };

  class par_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    seq ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_par ();

    // Parser construction API.
    //
    void
    area_parser (::METS::areaType_pskel&);

    void
    seq_parser (::METS::seqType_pskel&);

    void
    ID_parser (::xml_schema::id_pskel&);

    void
    parsers (::METS::areaType_pskel& /* area */,
             ::METS::seqType_pskel& /* seq */,
             ::xml_schema::id_pskel& /* ID */);

    // Constructor.
    //
    par_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::METS::areaType_pskel* area_parser_;
    ::METS::seqType_pskel* seq_parser_;
    ::xml_schema::id_pskel* ID_parser_;

    protected:
    struct v_state_descr_
    {
      void (::METS::par_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class xmlData_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_xmlData ();

    // Constructor.
    //
    xmlData_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    struct v_state_descr_
    {
      void (::METS::xmlData_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ROLE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ROLE ();
  };

  class TYPE_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TYPE ();
  };

  class xmlData1_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_xmlData1 ();

    // Constructor.
    //
    xmlData1_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    struct v_state_descr_
    {
      void (::METS::xmlData1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };
}

#include "mets-pskel.ixx"
#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_________DATA_SCHEMAS_METS_PSKEL_HXX
