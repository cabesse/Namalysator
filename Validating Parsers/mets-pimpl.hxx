// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef CXX_________DATA_SCHEMAS_METS_PIMPL_HXX
#define CXX_________DATA_SCHEMAS_METS_PIMPL_HXX

#include "mets-pskel.hxx"

#include "xlink-pimpl.hxx"

#include "mix-pimpl.hxx"

#include "rdf-pimpl.hxx"

#include "mods-3-0-pimpl.hxx"

namespace METS
{
  class metsType_pimpl: public virtual metsType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    metsHdr ();

    virtual void
    dmdSec ();

    virtual void
    amdSec ();

    virtual void
    fileSec ();

    virtual void
    structMap ();

    virtual void
    structLink ();

    virtual void
    behaviorSec ();

    virtual void
    ID (const ::std::string&);

    virtual void
    OBJID (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    TYPE (const ::std::string&);

    virtual void
    PROFILE (const ::std::string&);

    virtual void
    post_metsType ();
  };

  class amdSecType_pimpl: public virtual amdSecType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    techMD ();

    virtual void
    rightsMD ();

    virtual void
    sourceMD ();

    virtual void
    digiprovMD ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_amdSecType ();
  };

  class fileGrpType_pimpl: public virtual fileGrpType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    fileGrp ();

    virtual void
    file ();

    virtual void
    ID (const ::std::string&);

    virtual void
    VERSDATE (const ::xml_schema::date_time&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    USE (const ::std::string&);

    virtual void
    post_fileGrpType ();
  };

  class structMapType_pimpl: public virtual structMapType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    div ();

    virtual void
    ID (const ::std::string&);

    virtual void
    TYPE (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    post_structMapType ();
  };

  class divType_pimpl: public virtual divType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    mptr ();

    virtual void
    fptr ();

    virtual void
    div ();

    virtual void
    ID (const ::std::string&);

    virtual void
    ORDER (long long);

    virtual void
    ORDERLABEL (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    DMDID (const ::xml_schema::string_sequence&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    TYPE (const ::std::string&);

    virtual void
    post_divType ();
  };

  class seqType_pimpl: public virtual seqType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    area ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_seqType ();
  };

  class areaType_pimpl: public virtual areaType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    FILEID (const ::std::string&);

    virtual void
    SHAPE ();

    virtual void
    COORDS (const ::std::string&);

    virtual void
    BEGIN (const ::std::string&);

    virtual void
    END (const ::std::string&);

    virtual void
    BETYPE ();

    virtual void
    EXTENT (const ::std::string&);

    virtual void
    EXTTYPE ();

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    post_areaType ();
  };

  class structLinkType_pimpl: public virtual structLinkType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    smLink ();

    virtual void
    post_structLinkType ();
  };

  class behaviorSecType_pimpl: public virtual behaviorSecType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    behaviorSec ();

    virtual void
    behavior ();

    virtual void
    ID (const ::std::string&);

    virtual void
    CREATED (const ::xml_schema::date_time&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    post_behaviorSecType ();
  };

  class behaviorType_pimpl: public virtual behaviorType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    interfaceDef ();

    virtual void
    mechanism ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STRUCTID (const ::xml_schema::string_sequence&);

    virtual void
    BTYPE (const ::std::string&);

    virtual void
    CREATED (const ::xml_schema::date_time&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    GROUPID (const ::std::string&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    post_behaviorType ();
  };

  class objectType_pimpl: public virtual objectType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    LOCTYPE ();

    virtual void
    OTHERLOCTYPE (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    post_objectType ();
  };

  class mdSecType_pimpl: public virtual mdSecType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    mdRef ();

    virtual void
    mdWrap ();

    virtual void
    ID (const ::std::string&);

    virtual void
    GROUPID (const ::std::string&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    CREATED (const ::xml_schema::date_time&);

    virtual void
    STATUS (const ::std::string&);

    virtual void
    post_mdSecType ();
  };

  class mets_pimpl: public virtual mets_pskel,
    public ::METS::metsType_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_mets ();
  };

  class metsHdr_pimpl: public virtual metsHdr_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    agent ();

    virtual void
    altRecordID ();

    virtual void
    ID (const ::std::string&);

    virtual void
    CREATEDATE (const ::xml_schema::date_time&);

    virtual void
    LASTMODDATE (const ::xml_schema::date_time&);

    virtual void
    RECORDSTATUS (const ::std::string&);

    virtual void
    post_metsHdr ();
  };

  class fileSec_pimpl: public virtual fileSec_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    fileGrp ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_fileSec ();
  };

  class file_pimpl: public virtual file_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    FLocat ();

    virtual void
    FContent ();

    virtual void
    ID (const ::std::string&);

    virtual void
    MIMETYPE (const ::std::string&);

    virtual void
    SEQ (int);

    virtual void
    SIZE (long long);

    virtual void
    CREATED (const ::xml_schema::date_time&);

    virtual void
    CHECKSUM (const ::std::string&);

    virtual void
    CHECKSUMTYPE ();

    virtual void
    OWNERID (const ::std::string&);

    virtual void
    ADMID (const ::xml_schema::string_sequence&);

    virtual void
    DMDID (const ::xml_schema::string_sequence&);

    virtual void
    GROUPID (const ::std::string&);

    virtual void
    USE (const ::std::string&);

    virtual void
    post_file ();
  };

  class mptr_pimpl: public virtual mptr_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    LOCTYPE ();

    virtual void
    OTHERLOCTYPE (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    post_mptr ();
  };

  class fptr_pimpl: public virtual fptr_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    par ();

    virtual void
    seq ();

    virtual void
    area ();

    virtual void
    ID (const ::std::string&);

    virtual void
    FILEID (const ::std::string&);

    virtual void
    post_fptr ();
  };

  class SHAPE_pimpl: public virtual SHAPE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_SHAPE ();
  };

  class BETYPE_pimpl: public virtual BETYPE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_BETYPE ();
  };

  class EXTTYPE_pimpl: public virtual EXTTYPE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_EXTTYPE ();
  };

  class smLink_pimpl: public virtual smLink_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    to (const ::std::string&);

    virtual void
    from (const ::std::string&);

    virtual void
    post_smLink ();
  };

  class mdRef_pimpl: public virtual mdRef_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    LOCTYPE ();

    virtual void
    OTHERLOCTYPE (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    MDTYPE ();

    virtual void
    OTHERMDTYPE (const ::std::string&);

    virtual void
    MIMETYPE (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    XPTR (const ::std::string&);

    virtual void
    post_mdRef ();
  };

  class mdWrap_pimpl: public virtual mdWrap_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    binData (::std::auto_ptr< ::xml_schema::buffer >);

    virtual void
    xmlData ();

    virtual void
    ID (const ::std::string&);

    virtual void
    MIMETYPE (const ::std::string&);

    virtual void
    MDTYPE ();

    virtual void
    OTHERMDTYPE (const ::std::string&);

    virtual void
    LABEL (const ::std::string&);

    virtual void
    post_mdWrap ();
  };

  class MDTYPE_pimpl: public virtual MDTYPE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_MDTYPE ();
  };

  class LOCTYPE_pimpl: public virtual LOCTYPE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_LOCTYPE ();
  };

  class agent_pimpl: public virtual agent_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    note (const ::std::string&);

    virtual void
    ID (const ::std::string&);

    virtual void
    ROLE ();

    virtual void
    OTHERROLE (const ::std::string&);

    virtual void
    TYPE ();

    virtual void
    OTHERTYPE (const ::std::string&);

    virtual void
    post_agent ();
  };

  class altRecordID_pimpl: public virtual altRecordID_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    TYPE (const ::std::string&);

    virtual void
    post_altRecordID ();
  };

  class fileGrp_pimpl: public virtual fileGrp_pskel,
    public ::METS::fileGrpType_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_fileGrp ();
  };

  class FLocat_pimpl: public virtual FLocat_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    LOCTYPE ();

    virtual void
    OTHERLOCTYPE (const ::std::string&);

    virtual void
    USE (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    post_FLocat ();
  };

  class FContent_pimpl: public virtual FContent_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    binData (::std::auto_ptr< ::xml_schema::buffer >);

    virtual void
    xmlData ();

    virtual void
    USE (const ::std::string&);

    virtual void
    post_FContent ();
  };

  class CHECKSUMTYPE_pimpl: public virtual CHECKSUMTYPE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_CHECKSUMTYPE ();
  };

  class par_pimpl: public virtual par_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    area ();

    virtual void
    seq ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_par ();
  };

  class xmlData_pimpl: public virtual xmlData_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_xmlData ();
  };

  class ROLE_pimpl: public virtual ROLE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_ROLE ();
  };

  class TYPE_pimpl: public virtual TYPE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_TYPE ();
  };

  class xmlData1_pimpl: public virtual xmlData1_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_xmlData1 ();
  };
}

#endif // CXX_________DATA_SCHEMAS_METS_PIMPL_HXX
