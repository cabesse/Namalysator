// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "mods-3-0-pimpl.hxx"

namespace mods
{
  namespace v3
  {
    // modsType_pimpl
    //

    void modsType_pimpl::
    pre ()
    {
    }

    void modsType_pimpl::
    titleInfo ()
    {
    }

    void modsType_pimpl::
    name ()
    {
    }

    void modsType_pimpl::
    typeOfResource ()
    {
    }

    void modsType_pimpl::
    genre ()
    {
    }

    void modsType_pimpl::
    originInfo ()
    {
    }

    void modsType_pimpl::
    language ()
    {
    }

    void modsType_pimpl::
    physicalDescription ()
    {
    }

    void modsType_pimpl::
    abstract ()
    {
    }

    void modsType_pimpl::
    tableOfContents ()
    {
    }

    void modsType_pimpl::
    targetAudience ()
    {
    }

    void modsType_pimpl::
    note ()
    {
    }

    void modsType_pimpl::
    subject ()
    {
    }

    void modsType_pimpl::
    classification ()
    {
    }

    void modsType_pimpl::
    relatedItem ()
    {
    }

    void modsType_pimpl::
    identifier ()
    {
    }

    void modsType_pimpl::
    location ()
    {
    }

    void modsType_pimpl::
    accessCondition ()
    {
    }

    void modsType_pimpl::
    extension ()
    {
    }

    void modsType_pimpl::
    recordInfo ()
    {
    }

    void modsType_pimpl::
    ID (const ::std::string& ID)
    {
      // TODO
      //
    }

    void modsType_pimpl::
    version ()
    {
    }

    void modsType_pimpl::
    post_modsType ()
    {
    }

    // titleInfoType_pimpl
    //

    void titleInfoType_pimpl::
    pre ()
    {
    }

    void titleInfoType_pimpl::
    title ()
    {
    }

    void titleInfoType_pimpl::
    subTitle ()
    {
    }

    void titleInfoType_pimpl::
    partNumber ()
    {
    }

    void titleInfoType_pimpl::
    partName ()
    {
    }

    void titleInfoType_pimpl::
    nonSort ()
    {
    }

    void titleInfoType_pimpl::
    ID (const ::std::string& ID)
    {
      // TODO
      //
    }

    void titleInfoType_pimpl::
    type ()
    {
    }

    void titleInfoType_pimpl::
    authority ()
    {
    }

    void titleInfoType_pimpl::
    displayLabel (const ::std::string& displayLabel)
    {
      // TODO
      //
    }

    void titleInfoType_pimpl::
    type1 (const ::std::string& type1)
    {
      // TODO
      //
    }

    void titleInfoType_pimpl::
    href (const ::std::string& href)
    {
      // TODO
      //
    }

    void titleInfoType_pimpl::
    role (const ::std::string& role)
    {
      // TODO
      //
    }

    void titleInfoType_pimpl::
    arcrole (const ::std::string& arcrole)
    {
      // TODO
      //
    }

    void titleInfoType_pimpl::
    title1 (const ::std::string& title1)
    {
      // TODO
      //
    }

    void titleInfoType_pimpl::
    show ()
    {
    }

    void titleInfoType_pimpl::
    actuate ()
    {
    }

    void titleInfoType_pimpl::
    lang ()
    {
    }

    void titleInfoType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void titleInfoType_pimpl::
    script ()
    {
    }

    void titleInfoType_pimpl::
    transliteration ()
    {
    }

    void titleInfoType_pimpl::
    post_titleInfoType ()
    {
    }

    // nameType_pimpl
    //

    void nameType_pimpl::
    pre ()
    {
    }

    void nameType_pimpl::
    namePart ()
    {
    }

    void nameType_pimpl::
    displayForm ()
    {
    }

    void nameType_pimpl::
    affiliation ()
    {
    }

    void nameType_pimpl::
    role ()
    {
    }

    void nameType_pimpl::
    description ()
    {
    }

    void nameType_pimpl::
    ID (const ::std::string& ID)
    {
      // TODO
      //
    }

    void nameType_pimpl::
    type ()
    {
    }

    void nameType_pimpl::
    authority ()
    {
    }

    void nameType_pimpl::
    type1 (const ::std::string& type1)
    {
      // TODO
      //
    }

    void nameType_pimpl::
    href (const ::std::string& href)
    {
      // TODO
      //
    }

    void nameType_pimpl::
    role1 (const ::std::string& role1)
    {
      // TODO
      //
    }

    void nameType_pimpl::
    arcrole (const ::std::string& arcrole)
    {
      // TODO
      //
    }

    void nameType_pimpl::
    title (const ::std::string& title)
    {
      // TODO
      //
    }

    void nameType_pimpl::
    show ()
    {
    }

    void nameType_pimpl::
    actuate ()
    {
    }

    void nameType_pimpl::
    lang ()
    {
    }

    void nameType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void nameType_pimpl::
    script ()
    {
    }

    void nameType_pimpl::
    transliteration ()
    {
    }

    void nameType_pimpl::
    post_nameType ()
    {
    }

    // namePartType_pimpl
    //

    void namePartType_pimpl::
    pre ()
    {
    }

    void namePartType_pimpl::
    type ()
    {
    }

    void namePartType_pimpl::
    post_namePartType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // roleType_pimpl
    //

    void roleType_pimpl::
    pre ()
    {
    }

    void roleType_pimpl::
    roleTerm ()
    {
    }

    void roleType_pimpl::
    post_roleType ()
    {
    }

    // resourceType_pimpl
    //

    void resourceType_pimpl::
    pre ()
    {
    }

    void resourceType_pimpl::
    post_resourceType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // typeOfResourceType_pimpl
    //

    void typeOfResourceType_pimpl::
    pre ()
    {
    }

    void typeOfResourceType_pimpl::
    collection ()
    {
    }

    void typeOfResourceType_pimpl::
    manuscript ()
    {
    }

    void typeOfResourceType_pimpl::
    post_typeOfResourceType ()
    {
      post_resourceType ();
    }

    // genreType_pimpl
    //

    void genreType_pimpl::
    pre ()
    {
    }

    void genreType_pimpl::
    authority ()
    {
    }

    void genreType_pimpl::
    lang ()
    {
    }

    void genreType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void genreType_pimpl::
    script ()
    {
    }

    void genreType_pimpl::
    transliteration ()
    {
    }

    void genreType_pimpl::
    post_genreType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // originInfoType_pimpl
    //

    void originInfoType_pimpl::
    pre ()
    {
    }

    void originInfoType_pimpl::
    place ()
    {
    }

    void originInfoType_pimpl::
    publisher ()
    {
    }

    void originInfoType_pimpl::
    dateIssued ()
    {
    }

    void originInfoType_pimpl::
    dateCreated ()
    {
    }

    void originInfoType_pimpl::
    dateCaptured ()
    {
    }

    void originInfoType_pimpl::
    dateValid ()
    {
    }

    void originInfoType_pimpl::
    dateModified ()
    {
    }

    void originInfoType_pimpl::
    copyrightDate ()
    {
    }

    void originInfoType_pimpl::
    dateOther ()
    {
    }

    void originInfoType_pimpl::
    edition ()
    {
    }

    void originInfoType_pimpl::
    issuance ()
    {
    }

    void originInfoType_pimpl::
    frequency ()
    {
    }

    void originInfoType_pimpl::
    lang ()
    {
    }

    void originInfoType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void originInfoType_pimpl::
    script ()
    {
    }

    void originInfoType_pimpl::
    transliteration ()
    {
    }

    void originInfoType_pimpl::
    post_originInfoType ()
    {
    }

    // placeType_pimpl
    //

    void placeType_pimpl::
    pre ()
    {
    }

    void placeType_pimpl::
    placeTerm ()
    {
    }

    void placeType_pimpl::
    post_placeType ()
    {
    }

    // placeTermType_pimpl
    //

    void placeTermType_pimpl::
    pre ()
    {
    }

    void placeTermType_pimpl::
    authority ()
    {
    }

    void placeTermType_pimpl::
    type ()
    {
    }

    void placeTermType_pimpl::
    post_placeTermType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // languageType_pimpl
    //

    void languageType_pimpl::
    pre ()
    {
    }

    void languageType_pimpl::
    languageTerm ()
    {
    }

    void languageType_pimpl::
    post_languageType ()
    {
    }

    // physicalDescriptionType_pimpl
    //

    void physicalDescriptionType_pimpl::
    pre ()
    {
    }

    void physicalDescriptionType_pimpl::
    form ()
    {
    }

    void physicalDescriptionType_pimpl::
    reformattingQuality ()
    {
    }

    void physicalDescriptionType_pimpl::
    internetMediaType ()
    {
    }

    void physicalDescriptionType_pimpl::
    extent ()
    {
    }

    void physicalDescriptionType_pimpl::
    digitalOrigin ()
    {
    }

    void physicalDescriptionType_pimpl::
    note ()
    {
    }

    void physicalDescriptionType_pimpl::
    lang ()
    {
    }

    void physicalDescriptionType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void physicalDescriptionType_pimpl::
    script ()
    {
    }

    void physicalDescriptionType_pimpl::
    transliteration ()
    {
    }

    void physicalDescriptionType_pimpl::
    post_physicalDescriptionType ()
    {
    }

    // targetAudienceType_pimpl
    //

    void targetAudienceType_pimpl::
    pre ()
    {
    }

    void targetAudienceType_pimpl::
    authority ()
    {
    }

    void targetAudienceType_pimpl::
    lang ()
    {
    }

    void targetAudienceType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void targetAudienceType_pimpl::
    script ()
    {
    }

    void targetAudienceType_pimpl::
    transliteration ()
    {
    }

    void targetAudienceType_pimpl::
    post_targetAudienceType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // subjectType_pimpl
    //

    void subjectType_pimpl::
    pre ()
    {
    }

    void subjectType_pimpl::
    topic ()
    {
    }

    void subjectType_pimpl::
    geographic ()
    {
    }

    void subjectType_pimpl::
    temporal ()
    {
    }

    void subjectType_pimpl::
    titleInfo ()
    {
    }

    void subjectType_pimpl::
    name ()
    {
    }

    void subjectType_pimpl::
    geographicCode ()
    {
    }

    void subjectType_pimpl::
    hierarchicalGeographic ()
    {
    }

    void subjectType_pimpl::
    cartographics ()
    {
    }

    void subjectType_pimpl::
    occupation ()
    {
    }

    void subjectType_pimpl::
    ID (const ::std::string& ID)
    {
      // TODO
      //
    }

    void subjectType_pimpl::
    type (const ::std::string& type)
    {
      // TODO
      //
    }

    void subjectType_pimpl::
    href (const ::std::string& href)
    {
      // TODO
      //
    }

    void subjectType_pimpl::
    role (const ::std::string& role)
    {
      // TODO
      //
    }

    void subjectType_pimpl::
    arcrole (const ::std::string& arcrole)
    {
      // TODO
      //
    }

    void subjectType_pimpl::
    title (const ::std::string& title)
    {
      // TODO
      //
    }

    void subjectType_pimpl::
    show ()
    {
    }

    void subjectType_pimpl::
    actuate ()
    {
    }

    void subjectType_pimpl::
    authority ()
    {
    }

    void subjectType_pimpl::
    lang ()
    {
    }

    void subjectType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void subjectType_pimpl::
    script ()
    {
    }

    void subjectType_pimpl::
    transliteration ()
    {
    }

    void subjectType_pimpl::
    post_subjectType ()
    {
    }

    // classificationType_pimpl
    //

    void classificationType_pimpl::
    pre ()
    {
    }

    void classificationType_pimpl::
    authority ()
    {
    }

    void classificationType_pimpl::
    edition ()
    {
    }

    void classificationType_pimpl::
    lang ()
    {
    }

    void classificationType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void classificationType_pimpl::
    script ()
    {
    }

    void classificationType_pimpl::
    transliteration ()
    {
    }

    void classificationType_pimpl::
    post_classificationType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // relatedItemType_pimpl
    //

    void relatedItemType_pimpl::
    pre ()
    {
    }

    void relatedItemType_pimpl::
    part ()
    {
    }

    void relatedItemType_pimpl::
    type ()
    {
    }

    void relatedItemType_pimpl::
    displayLabel (const ::std::string& displayLabel)
    {
      // TODO
      //
    }

    void relatedItemType_pimpl::
    type1 (const ::std::string& type1)
    {
      // TODO
      //
    }

    void relatedItemType_pimpl::
    href (const ::std::string& href)
    {
      // TODO
      //
    }

    void relatedItemType_pimpl::
    role (const ::std::string& role)
    {
      // TODO
      //
    }

    void relatedItemType_pimpl::
    arcrole (const ::std::string& arcrole)
    {
      // TODO
      //
    }

    void relatedItemType_pimpl::
    title (const ::std::string& title)
    {
      // TODO
      //
    }

    void relatedItemType_pimpl::
    show ()
    {
    }

    void relatedItemType_pimpl::
    actuate ()
    {
    }

    void relatedItemType_pimpl::
    post_relatedItemType ()
    {
      post_modsType ();
    }

    // partType_pimpl
    //

    void partType_pimpl::
    pre ()
    {
    }

    void partType_pimpl::
    detail ()
    {
    }

    void partType_pimpl::
    extent ()
    {
    }

    void partType_pimpl::
    date ()
    {
    }

    void partType_pimpl::
    text ()
    {
    }

    void partType_pimpl::
    post_partType ()
    {
    }

    // detailType_pimpl
    //

    void detailType_pimpl::
    pre ()
    {
    }

    void detailType_pimpl::
    number ()
    {
    }

    void detailType_pimpl::
    caption ()
    {
    }

    void detailType_pimpl::
    title ()
    {
    }

    void detailType_pimpl::
    type ()
    {
    }

    void detailType_pimpl::
    level (unsigned long long level)
    {
      // TODO
      //
    }

    void detailType_pimpl::
    post_detailType ()
    {
    }

    // extentType_pimpl
    //

    void extentType_pimpl::
    pre ()
    {
    }

    void extentType_pimpl::
    start ()
    {
    }

    void extentType_pimpl::
    end ()
    {
    }

    void extentType_pimpl::
    total (unsigned long long total)
    {
      // TODO
      //
    }

    void extentType_pimpl::
    list ()
    {
    }

    void extentType_pimpl::
    unit ()
    {
    }

    void extentType_pimpl::
    post_extentType ()
    {
    }

    // identifierType_pimpl
    //

    void identifierType_pimpl::
    pre ()
    {
    }

    void identifierType_pimpl::
    type ()
    {
    }

    void identifierType_pimpl::
    displayLabel ()
    {
    }

    void identifierType_pimpl::
    invalid ()
    {
    }

    void identifierType_pimpl::
    lang ()
    {
    }

    void identifierType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void identifierType_pimpl::
    script ()
    {
    }

    void identifierType_pimpl::
    transliteration ()
    {
    }

    void identifierType_pimpl::
    post_identifierType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // locationType_pimpl
    //

    void locationType_pimpl::
    pre ()
    {
    }

    void locationType_pimpl::
    physicalLocation ()
    {
    }

    void locationType_pimpl::
    url ()
    {
    }

    void locationType_pimpl::
    post_locationType ()
    {
    }

    // extensionType_pimpl
    //

    void extensionType_pimpl::
    pre ()
    {
    }

    void extensionType_pimpl::
    post_extensionType ()
    {
    }

    // recordInfoType_pimpl
    //

    void recordInfoType_pimpl::
    pre ()
    {
    }

    void recordInfoType_pimpl::
    recordContentSource ()
    {
    }

    void recordInfoType_pimpl::
    recordCreationDate ()
    {
    }

    void recordInfoType_pimpl::
    recordChangeDate ()
    {
    }

    void recordInfoType_pimpl::
    recordIdentifier ()
    {
    }

    void recordInfoType_pimpl::
    languageOfCataloging ()
    {
    }

    void recordInfoType_pimpl::
    recordOrigin ()
    {
    }

    void recordInfoType_pimpl::
    lang ()
    {
    }

    void recordInfoType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void recordInfoType_pimpl::
    script ()
    {
    }

    void recordInfoType_pimpl::
    transliteration ()
    {
    }

    void recordInfoType_pimpl::
    post_recordInfoType ()
    {
    }

    // unstructuredText_pimpl
    //

    void unstructuredText_pimpl::
    pre ()
    {
    }

    void unstructuredText_pimpl::
    type (const ::std::string& type)
    {
      // TODO
      //
    }

    void unstructuredText_pimpl::
    href (const ::std::string& href)
    {
      // TODO
      //
    }

    void unstructuredText_pimpl::
    role (const ::std::string& role)
    {
      // TODO
      //
    }

    void unstructuredText_pimpl::
    arcrole (const ::std::string& arcrole)
    {
      // TODO
      //
    }

    void unstructuredText_pimpl::
    title (const ::std::string& title)
    {
      // TODO
      //
    }

    void unstructuredText_pimpl::
    show ()
    {
    }

    void unstructuredText_pimpl::
    actuate ()
    {
    }

    void unstructuredText_pimpl::
    lang ()
    {
    }

    void unstructuredText_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void unstructuredText_pimpl::
    script ()
    {
    }

    void unstructuredText_pimpl::
    transliteration ()
    {
    }

    void unstructuredText_pimpl::
    displayLabel (const ::std::string& displayLabel)
    {
      // TODO
      //
    }

    void unstructuredText_pimpl::
    type1 (const ::std::string& type1)
    {
      // TODO
      //
    }

    void unstructuredText_pimpl::
    post_unstructuredText ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // baseDateType_pimpl
    //

    void baseDateType_pimpl::
    pre ()
    {
    }

    void baseDateType_pimpl::
    encoding ()
    {
    }

    void baseDateType_pimpl::
    qualifier ()
    {
    }

    void baseDateType_pimpl::
    point ()
    {
    }

    void baseDateType_pimpl::
    post_baseDateType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // dateType_pimpl
    //

    void dateType_pimpl::
    pre ()
    {
    }

    void dateType_pimpl::
    keyDate ()
    {
    }

    void dateType_pimpl::
    post_dateType ()
    {
      post_baseDateType ();
    }

    // sourceType_pimpl
    //

    void sourceType_pimpl::
    pre ()
    {
    }

    void sourceType_pimpl::
    authority ()
    {
    }

    void sourceType_pimpl::
    lang ()
    {
    }

    void sourceType_pimpl::
    lang1 (const ::std::string& lang1)
    {
      // TODO
      //
    }

    void sourceType_pimpl::
    script ()
    {
    }

    void sourceType_pimpl::
    transliteration ()
    {
    }

    void sourceType_pimpl::
    post_sourceType ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // codeOrText_pimpl
    //

    void codeOrText_pimpl::
    pre ()
    {
    }

    void codeOrText_pimpl::
    post_codeOrText ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // placeAuthority_pimpl
    //

    void placeAuthority_pimpl::
    pre ()
    {
    }

    void placeAuthority_pimpl::
    post_placeAuthority ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // modsCollection_pimpl
    //

    void modsCollection_pimpl::
    pre ()
    {
    }

    void modsCollection_pimpl::
    mods ()
    {
    }

    void modsCollection_pimpl::
    post_modsCollection ()
    {
    }

    // version_pimpl
    //

    void version_pimpl::
    pre ()
    {
    }

    void version_pimpl::
    post_version ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // type_pimpl
    //

    void type_pimpl::
    pre ()
    {
    }

    void type_pimpl::
    post_type ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // type1_pimpl
    //

    void type1_pimpl::
    pre ()
    {
    }

    void type1_pimpl::
    post_type1 ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // type2_pimpl
    //

    void type2_pimpl::
    pre ()
    {
    }

    void type2_pimpl::
    post_type2 ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // roleTerm_pimpl
    //

    void roleTerm_pimpl::
    pre ()
    {
    }

    void roleTerm_pimpl::
    authority ()
    {
    }

    void roleTerm_pimpl::
    type ()
    {
    }

    void roleTerm_pimpl::
    post_roleTerm ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // collection_pimpl
    //

    void collection_pimpl::
    pre ()
    {
    }

    void collection_pimpl::
    post_collection ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // manuscript_pimpl
    //

    void manuscript_pimpl::
    pre ()
    {
    }

    void manuscript_pimpl::
    post_manuscript ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // issuance_pimpl
    //

    void issuance_pimpl::
    pre ()
    {
    }

    void issuance_pimpl::
    post_issuance ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // languageTerm_pimpl
    //

    void languageTerm_pimpl::
    pre ()
    {
    }

    void languageTerm_pimpl::
    authority ()
    {
    }

    void languageTerm_pimpl::
    type ()
    {
    }

    void languageTerm_pimpl::
    post_languageTerm ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // form_pimpl
    //

    void form_pimpl::
    pre ()
    {
    }

    void form_pimpl::
    authority ()
    {
    }

    void form_pimpl::
    post_form ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // reformattingQuality_pimpl
    //

    void reformattingQuality_pimpl::
    pre ()
    {
    }

    void reformattingQuality_pimpl::
    post_reformattingQuality ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // digitalOrigin_pimpl
    //

    void digitalOrigin_pimpl::
    pre ()
    {
    }

    void digitalOrigin_pimpl::
    post_digitalOrigin ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // geographicCode_pimpl
    //

    void geographicCode_pimpl::
    pre ()
    {
    }

    void geographicCode_pimpl::
    authority ()
    {
    }

    void geographicCode_pimpl::
    post_geographicCode ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // hierarchicalGeographic_pimpl
    //

    void hierarchicalGeographic_pimpl::
    pre ()
    {
    }

    void hierarchicalGeographic_pimpl::
    continent ()
    {
    }

    void hierarchicalGeographic_pimpl::
    country ()
    {
    }

    void hierarchicalGeographic_pimpl::
    province ()
    {
    }

    void hierarchicalGeographic_pimpl::
    region ()
    {
    }

    void hierarchicalGeographic_pimpl::
    state ()
    {
    }

    void hierarchicalGeographic_pimpl::
    territory ()
    {
    }

    void hierarchicalGeographic_pimpl::
    county ()
    {
    }

    void hierarchicalGeographic_pimpl::
    city ()
    {
    }

    void hierarchicalGeographic_pimpl::
    island ()
    {
    }

    void hierarchicalGeographic_pimpl::
    area ()
    {
    }

    void hierarchicalGeographic_pimpl::
    post_hierarchicalGeographic ()
    {
    }

    // cartographics_pimpl
    //

    void cartographics_pimpl::
    pre ()
    {
    }

    void cartographics_pimpl::
    scale ()
    {
    }

    void cartographics_pimpl::
    projection ()
    {
    }

    void cartographics_pimpl::
    coordinates ()
    {
    }

    void cartographics_pimpl::
    post_cartographics ()
    {
    }

    // type3_pimpl
    //

    void type3_pimpl::
    pre ()
    {
    }

    void type3_pimpl::
    post_type3 ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // invalid_pimpl
    //

    void invalid_pimpl::
    pre ()
    {
    }

    void invalid_pimpl::
    post_invalid ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // physicalLocation_pimpl
    //

    void physicalLocation_pimpl::
    pre ()
    {
    }

    void physicalLocation_pimpl::
    displayLabel ()
    {
    }

    void physicalLocation_pimpl::
    post_physicalLocation ()
    {
      post_sourceType ();
    }

    // url_pimpl
    //

    void url_pimpl::
    pre ()
    {
    }

    void url_pimpl::
    dateLastAccessed ()
    {
    }

    void url_pimpl::
    displayLabel ()
    {
    }

    void url_pimpl::
    post_url ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // recordIdentifier_pimpl
    //

    void recordIdentifier_pimpl::
    pre ()
    {
    }

    void recordIdentifier_pimpl::
    source ()
    {
    }

    void recordIdentifier_pimpl::
    post_recordIdentifier ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // encoding_pimpl
    //

    void encoding_pimpl::
    pre ()
    {
    }

    void encoding_pimpl::
    post_encoding ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // qualifier_pimpl
    //

    void qualifier_pimpl::
    pre ()
    {
    }

    void qualifier_pimpl::
    post_qualifier ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // point_pimpl
    //

    void point_pimpl::
    pre ()
    {
    }

    void point_pimpl::
    post_point ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // keyDate_pimpl
    //

    void keyDate_pimpl::
    pre ()
    {
    }

    void keyDate_pimpl::
    post_keyDate ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }

    // authority_pimpl
    //

    void authority_pimpl::
    pre ()
    {
    }

    void authority_pimpl::
    post_authority ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
    }
  }
}

