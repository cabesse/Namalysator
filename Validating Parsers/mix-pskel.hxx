// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_________DATA_SCHEMAS_MIX_PSKEL_HXX
#define CXX_________DATA_SCHEMAS_MIX_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace mix
{
  class mixType_pskel;
  class BasicImageParametersType_pskel;
  class ImageCreationType_pskel;
  class ImagingPerformanceAssessmentType_pskel;
  class ChangeHistoryType_pskel;
  class FormatType_pskel;
  class typeOfFormatType_pskel;
  class ByteOrderType_pskel;
  class typeOfByteOrderType_pskel;
  class CompressionSchemeType_pskel;
  class typeOfCompressionSchemeType_pskel;
  class CompressionLevelType_pskel;
  class typeOfCompressionLevelType_pskel;
  class ColorSpaceType_pskel;
  class typeOfColorSpaceType_pskel;
  class typeOfProfileNameType_pskel;
  class typeOfProfileURLType_pskel;
  class YCbCrSubSamplingType_pskel;
  class typeOfYCbCrSubSamplingType_pskel;
  class YCbCrPositioningType_pskel;
  class typeOfYCbCrPositioningType_pskel;
  class YcbCrCoefficientsType_pskel;
  class typeOfYcbCrCoefficientsType_pskel;
  class ReferenceBlackWhiteType_pskel;
  class typeOfReferenceBlackWhiteType_pskel;
  class SegmentTypeType_pskel;
  class typeOfSegmentTypeType_pskel;
  class StripOffsetsType_pskel;
  class typeOfStripOffsetsType_pskel;
  class RowsPerStripType_pskel;
  class typeOfRowsPerStripType_pskel;
  class StripByteCountsType_pskel;
  class typeOfStripByteCountsType_pskel;
  class TileWidthType_pskel;
  class typeOfTileWidthType_pskel;
  class TileLengthType_pskel;
  class typeOfTileLengthType_pskel;
  class TileOffsetsType_pskel;
  class typeOfTileOffsetsType_pskel;
  class TileByteCountsType_pskel;
  class typeOfTileByteCountsType_pskel;
  class PlanarConfigurationType_pskel;
  class typeOfPlanarConfigurationType_pskel;
  class ImageIdentifierType_pskel;
  class typeOfImageIdentifierType_pskel;
  class FileSizeType_pskel;
  class typeOfFileSizeType_pskel;
  class ChecksumMethodType_pskel;
  class typeOfChecksumMethodType_pskel;
  class ChecksumValueType_pskel;
  class typeOfChecksumValueType_pskel;
  class OrientationType_pskel;
  class typeOfOrientationType_pskel;
  class DisplayOrientationType_pskel;
  class typeOfDisplayOrientationType_pskel;
  class XTargetedDisplayARType_pskel;
  class typeOfXTargetedDisplayARType_pskel;
  class YTargetedDisplayARType_pskel;
  class typeOfYTargetedDisplayARType_pskel;
  class PreferredPresentationType_pskel;
  class typeOfPreferredPresentationType_pskel;
  class SourceTypeType_pskel;
  class typeOfSourceTypeType_pskel;
  class SourceIDType_pskel;
  class typeOfSourceIDType_pskel;
  class ImageProducerType_pskel;
  class typeOfImageProducerType_pskel;
  class SubjectDistanceType_pskel;
  class typeOfSubjectDistanceType_pskel;
  class MeteringModeType_pskel;
  class typeOfMeteringModeType_pskel;
  class SceneIlluminantType_pskel;
  class typeOfSceneIlluminantType_pskel;
  class FlashType_pskel;
  class typeOfFlashType_pskel;
  class FlashReturnType_pskel;
  class typeOfFlashReturnType_pskel;
  class BackLightType_pskel;
  class typeOfBackLightType_pskel;
  class AutoFocusType_pskel;
  class typeOfAutoFocusType_pskel;
  class SensorType_pskel;
  class typeOfSensorType_pskel;
  class SamplingFrequencyPlaneType_pskel;
  class typeOfSamplingFrequencyPlaneType_pskel;
  class SamplingFrequencyUnitType_pskel;
  class typeOfSamplingFrequencyUnitType_pskel;
  class BitsPerSampleType_pskel;
  class typeOfBitsPerSampleType_pskel;
  class SamplesPerPixelType_pskel;
  class typeOfSamplesPerPixelType_pskel;
  class ExtraSamplesType_pskel;
  class typeOfExtraSamplesType_pskel;
  class ColormapType_pskel;
  class typeOfColormapType_pskel;
  class GrayResponseCurveType_pskel;
  class typeOfGrayResponseCurveType_pskel;
  class GrayResponseUnitType_pskel;
  class typeOfGrayResponseUnitType_pskel;
  class CIExyType_pskel;
  class typeOfCIExyType_pskel;
  class TargetTypeType_pskel;
  class typeOfTargetTypeType_pskel;
  class typeOfPreviousImageMetadataType_pskel;
  class StringType_pskel;
  class typeOfStringType_pskel;
  class NonNegativeRealType_pskel;
  class typeOfNonNegativeRealType_pskel;
  class PositiveIntegerType_pskel;
  class typeOfPositiveIntegerType_pskel;
  class DateTimeType_pskel;
  class typeOfDateTimeType_pskel;
  class ReferenceType_pskel;
  class typeOfReferenceType_pskel;
  class mix_pskel;
  class Format_pskel;
  class File_pskel;
  class Host_pskel;
  class ScanningSystemCapture_pskel;
  class DigitalCameraCapture_pskel;
  class CameraCaptureSettings_pskel;
  class SpatialMetrics_pskel;
  class Energetics_pskel;
  class TargetData_pskel;
  class ImageProcessing_pskel;
  class Compression_pskel;
  class PhotometricInterpretation_pskel;
  class Segments_pskel;
  class Checksum_pskel;
  class TargetedDisplayAR_pskel;
  class ScanningSystemHardware_pskel;
  class ScanningSystemSoftware_pskel;
  class ScannerCaptureSettings_pskel;
  class PrintAspectRatio_pskel;
  class Source_X_pskel;
  class Source_Y_pskel;
  class Colormap_pskel;
  class GrayResponse_pskel;
  class WhitePoint_pskel;
  class PrimaryChromaticities_pskel;
  class TargetID_pskel;
  class ProcessingSoftware_pskel;
  class ICCProfile_pskel;
  class ScannerModel_pskel;
  class PhysScanResolution_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

namespace mix
{
  class mixType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    BasicImageParameters ();

    virtual void
    ImageCreation ();

    virtual void
    ImagingPerformanceAssessment ();

    virtual void
    ChangeHistory ();

    virtual void
    post_mixType ();

    // Parser construction API.
    //
    void
    BasicImageParameters_parser (::mix::BasicImageParametersType_pskel&);

    void
    ImageCreation_parser (::mix::ImageCreationType_pskel&);

    void
    ImagingPerformanceAssessment_parser (::mix::ImagingPerformanceAssessmentType_pskel&);

    void
    ChangeHistory_parser (::mix::ChangeHistoryType_pskel&);

    void
    parsers (::mix::BasicImageParametersType_pskel& /* BasicImageParameters */,
             ::mix::ImageCreationType_pskel& /* ImageCreation */,
             ::mix::ImagingPerformanceAssessmentType_pskel& /* ImagingPerformanceAssessment */,
             ::mix::ChangeHistoryType_pskel& /* ChangeHistory */);

    // Constructor.
    //
    mixType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::BasicImageParametersType_pskel* BasicImageParameters_parser_;
    ::mix::ImageCreationType_pskel* ImageCreation_parser_;
    ::mix::ImagingPerformanceAssessmentType_pskel* ImagingPerformanceAssessment_parser_;
    ::mix::ChangeHistoryType_pskel* ChangeHistory_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::mixType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class BasicImageParametersType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Format ();

    virtual void
    File ();

    virtual void
    PreferredPresentation ();

    virtual void
    post_BasicImageParametersType ();

    // Parser construction API.
    //
    void
    Format_parser (::mix::Format_pskel&);

    void
    File_parser (::mix::File_pskel&);

    void
    PreferredPresentation_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::Format_pskel& /* Format */,
             ::mix::File_pskel& /* File */,
             ::mix::typeOfStringType_pskel& /* PreferredPresentation */);

    // Constructor.
    //
    BasicImageParametersType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::Format_pskel* Format_parser_;
    ::mix::File_pskel* File_parser_;
    ::mix::typeOfStringType_pskel* PreferredPresentation_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::BasicImageParametersType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ImageCreationType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    SourceType ();

    virtual void
    SourceID ();

    virtual void
    ImageProducer ();

    virtual void
    Host ();

    virtual void
    DeviceSource ();

    virtual void
    ScanningSystemCapture ();

    virtual void
    DigitalCameraCapture ();

    virtual void
    CameraCaptureSettings ();

    virtual void
    Sensor ();

    virtual void
    DateTimeCreated ();

    virtual void
    Methodology ();

    virtual void
    post_ImageCreationType ();

    // Parser construction API.
    //
    void
    SourceType_parser (::mix::typeOfStringType_pskel&);

    void
    SourceID_parser (::mix::typeOfStringType_pskel&);

    void
    ImageProducer_parser (::mix::typeOfStringType_pskel&);

    void
    Host_parser (::mix::Host_pskel&);

    void
    DeviceSource_parser (::mix::typeOfStringType_pskel&);

    void
    ScanningSystemCapture_parser (::mix::ScanningSystemCapture_pskel&);

    void
    DigitalCameraCapture_parser (::mix::DigitalCameraCapture_pskel&);

    void
    CameraCaptureSettings_parser (::mix::CameraCaptureSettings_pskel&);

    void
    Sensor_parser (::mix::typeOfSensorType_pskel&);

    void
    DateTimeCreated_parser (::mix::typeOfDateTimeType_pskel&);

    void
    Methodology_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* SourceType */,
             ::mix::typeOfStringType_pskel& /* SourceID */,
             ::mix::typeOfStringType_pskel& /* ImageProducer */,
             ::mix::Host_pskel& /* Host */,
             ::mix::typeOfStringType_pskel& /* DeviceSource */,
             ::mix::ScanningSystemCapture_pskel& /* ScanningSystemCapture */,
             ::mix::DigitalCameraCapture_pskel& /* DigitalCameraCapture */,
             ::mix::CameraCaptureSettings_pskel& /* CameraCaptureSettings */,
             ::mix::typeOfSensorType_pskel& /* Sensor */,
             ::mix::typeOfDateTimeType_pskel& /* DateTimeCreated */,
             ::mix::typeOfStringType_pskel& /* Methodology */);

    // Constructor.
    //
    ImageCreationType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* SourceType_parser_;
    ::mix::typeOfStringType_pskel* SourceID_parser_;
    ::mix::typeOfStringType_pskel* ImageProducer_parser_;
    ::mix::Host_pskel* Host_parser_;
    ::mix::typeOfStringType_pskel* DeviceSource_parser_;
    ::mix::ScanningSystemCapture_pskel* ScanningSystemCapture_parser_;
    ::mix::DigitalCameraCapture_pskel* DigitalCameraCapture_parser_;
    ::mix::CameraCaptureSettings_pskel* CameraCaptureSettings_parser_;
    ::mix::typeOfSensorType_pskel* Sensor_parser_;
    ::mix::typeOfDateTimeType_pskel* DateTimeCreated_parser_;
    ::mix::typeOfStringType_pskel* Methodology_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ImageCreationType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ImagingPerformanceAssessmentType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    SpatialMetrics ();

    virtual void
    Energetics ();

    virtual void
    TargetData ();

    virtual void
    post_ImagingPerformanceAssessmentType ();

    // Parser construction API.
    //
    void
    SpatialMetrics_parser (::mix::SpatialMetrics_pskel&);

    void
    Energetics_parser (::mix::Energetics_pskel&);

    void
    TargetData_parser (::mix::TargetData_pskel&);

    void
    parsers (::mix::SpatialMetrics_pskel& /* SpatialMetrics */,
             ::mix::Energetics_pskel& /* Energetics */,
             ::mix::TargetData_pskel& /* TargetData */);

    // Constructor.
    //
    ImagingPerformanceAssessmentType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::SpatialMetrics_pskel* SpatialMetrics_parser_;
    ::mix::Energetics_pskel* Energetics_parser_;
    ::mix::TargetData_pskel* TargetData_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ImagingPerformanceAssessmentType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ChangeHistoryType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ImageProcessing ();

    virtual void
    PreviousImageMetadata ();

    virtual void
    post_ChangeHistoryType ();

    // Parser construction API.
    //
    void
    ImageProcessing_parser (::mix::ImageProcessing_pskel&);

    void
    PreviousImageMetadata_parser (::mix::typeOfPreviousImageMetadataType_pskel&);

    void
    parsers (::mix::ImageProcessing_pskel& /* ImageProcessing */,
             ::mix::typeOfPreviousImageMetadataType_pskel& /* PreviousImageMetadata */);

    // Constructor.
    //
    ChangeHistoryType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::ImageProcessing_pskel* ImageProcessing_parser_;
    ::mix::typeOfPreviousImageMetadataType_pskel* PreviousImageMetadata_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ChangeHistoryType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class FormatType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FormatType ();
  };

  class typeOfFormatType_pskel: public virtual ::mix::FormatType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfFormatType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfFormatType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ByteOrderType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ByteOrderType ();
  };

  class typeOfByteOrderType_pskel: public virtual ::mix::ByteOrderType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfByteOrderType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfByteOrderType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class CompressionSchemeType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CompressionSchemeType ();
  };

  class typeOfCompressionSchemeType_pskel: public virtual ::mix::CompressionSchemeType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfCompressionSchemeType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfCompressionSchemeType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class CompressionLevelType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CompressionLevelType ();
  };

  class typeOfCompressionLevelType_pskel: public virtual ::mix::CompressionLevelType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfCompressionLevelType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfCompressionLevelType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ColorSpaceType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ColorSpaceType ();
  };

  class typeOfColorSpaceType_pskel: public virtual ::mix::ColorSpaceType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfColorSpaceType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfColorSpaceType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class typeOfProfileNameType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfProfileNameType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfProfileNameType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class typeOfProfileURLType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfProfileURLType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfProfileURLType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class YCbCrSubSamplingType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_YCbCrSubSamplingType ();
  };

  class typeOfYCbCrSubSamplingType_pskel: public virtual ::mix::YCbCrSubSamplingType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfYCbCrSubSamplingType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfYCbCrSubSamplingType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class YCbCrPositioningType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_YCbCrPositioningType ();
  };

  class typeOfYCbCrPositioningType_pskel: public virtual ::mix::YCbCrPositioningType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfYCbCrPositioningType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfYCbCrPositioningType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class YcbCrCoefficientsType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_YcbCrCoefficientsType ();
  };

  class typeOfYcbCrCoefficientsType_pskel: public virtual ::mix::YcbCrCoefficientsType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfYcbCrCoefficientsType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfYcbCrCoefficientsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ReferenceBlackWhiteType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ReferenceBlackWhiteType ();
  };

  class typeOfReferenceBlackWhiteType_pskel: public virtual ::mix::ReferenceBlackWhiteType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfReferenceBlackWhiteType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfReferenceBlackWhiteType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SegmentTypeType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SegmentTypeType ();
  };

  class typeOfSegmentTypeType_pskel: public virtual ::mix::SegmentTypeType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfSegmentTypeType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfSegmentTypeType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class StripOffsetsType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StripOffsetsType ();
  };

  class typeOfStripOffsetsType_pskel: public virtual ::mix::StripOffsetsType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfStripOffsetsType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfStripOffsetsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class RowsPerStripType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RowsPerStripType ();
  };

  class typeOfRowsPerStripType_pskel: public virtual ::mix::RowsPerStripType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfRowsPerStripType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfRowsPerStripType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class StripByteCountsType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StripByteCountsType ();
  };

  class typeOfStripByteCountsType_pskel: public virtual ::mix::StripByteCountsType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfStripByteCountsType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfStripByteCountsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class TileWidthType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TileWidthType ();
  };

  class typeOfTileWidthType_pskel: public virtual ::mix::TileWidthType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfTileWidthType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfTileWidthType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class TileLengthType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TileLengthType ();
  };

  class typeOfTileLengthType_pskel: public virtual ::mix::TileLengthType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfTileLengthType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfTileLengthType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class TileOffsetsType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TileOffsetsType ();
  };

  class typeOfTileOffsetsType_pskel: public virtual ::mix::TileOffsetsType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfTileOffsetsType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfTileOffsetsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class TileByteCountsType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TileByteCountsType ();
  };

  class typeOfTileByteCountsType_pskel: public virtual ::mix::TileByteCountsType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfTileByteCountsType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfTileByteCountsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class PlanarConfigurationType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PlanarConfigurationType ();
  };

  class typeOfPlanarConfigurationType_pskel: public virtual ::mix::PlanarConfigurationType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfPlanarConfigurationType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfPlanarConfigurationType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ImageIdentifierType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ImageIdentifierType ();
  };

  class typeOfImageIdentifierType_pskel: public virtual ::mix::ImageIdentifierType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    imageIdentifierLocation ();

    virtual void
    post_typeOfImageIdentifierType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    imageIdentifierLocation_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */,
             ::xml_schema::any_simple_type_pskel& /* imageIdentifierLocation */);

    // Constructor.
    //
    typeOfImageIdentifierType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
    ::xml_schema::any_simple_type_pskel* imageIdentifierLocation_parser_;
  };

  class FileSizeType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FileSizeType ();
  };

  class typeOfFileSizeType_pskel: public virtual ::mix::FileSizeType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfFileSizeType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfFileSizeType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ChecksumMethodType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ChecksumMethodType ();
  };

  class typeOfChecksumMethodType_pskel: public virtual ::mix::ChecksumMethodType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfChecksumMethodType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfChecksumMethodType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ChecksumValueType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ChecksumValueType ();
  };

  class typeOfChecksumValueType_pskel: public virtual ::mix::ChecksumValueType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfChecksumValueType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfChecksumValueType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class OrientationType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_OrientationType ();
  };

  class typeOfOrientationType_pskel: public virtual ::mix::OrientationType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfOrientationType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfOrientationType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class DisplayOrientationType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DisplayOrientationType ();
  };

  class typeOfDisplayOrientationType_pskel: public virtual ::mix::DisplayOrientationType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfDisplayOrientationType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfDisplayOrientationType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class XTargetedDisplayARType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_XTargetedDisplayARType ();
  };

  class typeOfXTargetedDisplayARType_pskel: public virtual ::mix::XTargetedDisplayARType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfXTargetedDisplayARType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfXTargetedDisplayARType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class YTargetedDisplayARType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_YTargetedDisplayARType ();
  };

  class typeOfYTargetedDisplayARType_pskel: public virtual ::mix::YTargetedDisplayARType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfYTargetedDisplayARType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfYTargetedDisplayARType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class PreferredPresentationType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PreferredPresentationType ();
  };

  class typeOfPreferredPresentationType_pskel: public virtual ::mix::PreferredPresentationType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfPreferredPresentationType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfPreferredPresentationType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SourceTypeType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SourceTypeType ();
  };

  class typeOfSourceTypeType_pskel: public virtual ::mix::SourceTypeType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfSourceTypeType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfSourceTypeType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SourceIDType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SourceIDType ();
  };

  class typeOfSourceIDType_pskel: public virtual ::mix::SourceIDType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfSourceIDType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfSourceIDType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ImageProducerType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ImageProducerType ();
  };

  class typeOfImageProducerType_pskel: public virtual ::mix::ImageProducerType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfImageProducerType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfImageProducerType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SubjectDistanceType_pskel: public virtual ::xml_schema::float_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SubjectDistanceType ();
  };

  class typeOfSubjectDistanceType_pskel: public virtual ::mix::SubjectDistanceType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    post_typeOfSubjectDistanceType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    min_parser (::xml_schema::any_simple_type_pskel&);

    void
    max_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */,
             ::xml_schema::any_simple_type_pskel& /* min */,
             ::xml_schema::any_simple_type_pskel& /* max */);

    // Constructor.
    //
    typeOfSubjectDistanceType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
    ::xml_schema::any_simple_type_pskel* min_parser_;
    ::xml_schema::any_simple_type_pskel* max_parser_;
  };

  class MeteringModeType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MeteringModeType ();
  };

  class typeOfMeteringModeType_pskel: public virtual ::mix::MeteringModeType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfMeteringModeType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfMeteringModeType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SceneIlluminantType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SceneIlluminantType ();
  };

  class typeOfSceneIlluminantType_pskel: public virtual ::mix::SceneIlluminantType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfSceneIlluminantType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfSceneIlluminantType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class FlashType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FlashType ();
  };

  class typeOfFlashType_pskel: public virtual ::mix::FlashType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfFlashType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfFlashType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class FlashReturnType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FlashReturnType ();
  };

  class typeOfFlashReturnType_pskel: public virtual ::mix::FlashReturnType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfFlashReturnType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfFlashReturnType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class BackLightType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BackLightType ();
  };

  class typeOfBackLightType_pskel: public virtual ::mix::BackLightType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfBackLightType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfBackLightType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class AutoFocusType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AutoFocusType ();
  };

  class typeOfAutoFocusType_pskel: public virtual ::mix::AutoFocusType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfAutoFocusType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfAutoFocusType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SensorType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SensorType ();
  };

  class typeOfSensorType_pskel: public virtual ::mix::SensorType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfSensorType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfSensorType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SamplingFrequencyPlaneType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SamplingFrequencyPlaneType ();
  };

  class typeOfSamplingFrequencyPlaneType_pskel: public virtual ::mix::SamplingFrequencyPlaneType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfSamplingFrequencyPlaneType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfSamplingFrequencyPlaneType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SamplingFrequencyUnitType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SamplingFrequencyUnitType ();
  };

  class typeOfSamplingFrequencyUnitType_pskel: public virtual ::mix::SamplingFrequencyUnitType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfSamplingFrequencyUnitType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfSamplingFrequencyUnitType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class BitsPerSampleType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BitsPerSampleType ();
  };

  class typeOfBitsPerSampleType_pskel: public virtual ::mix::BitsPerSampleType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfBitsPerSampleType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfBitsPerSampleType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class SamplesPerPixelType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SamplesPerPixelType ();
  };

  class typeOfSamplesPerPixelType_pskel: public virtual ::mix::SamplesPerPixelType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfSamplesPerPixelType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfSamplesPerPixelType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ExtraSamplesType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ExtraSamplesType ();
  };

  class typeOfExtraSamplesType_pskel: public virtual ::mix::ExtraSamplesType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfExtraSamplesType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfExtraSamplesType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ColormapType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ColormapType ();
  };

  class typeOfColormapType_pskel: public virtual ::mix::ColormapType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfColormapType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfColormapType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class GrayResponseCurveType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GrayResponseCurveType ();
  };

  class typeOfGrayResponseCurveType_pskel: public virtual ::mix::GrayResponseCurveType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfGrayResponseCurveType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfGrayResponseCurveType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class GrayResponseUnitType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GrayResponseUnitType ();
  };

  class typeOfGrayResponseUnitType_pskel: public virtual ::mix::GrayResponseUnitType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfGrayResponseUnitType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfGrayResponseUnitType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class CIExyType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CIExyType ();
  };

  class typeOfCIExyType_pskel: public virtual ::mix::CIExyType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfCIExyType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfCIExyType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class TargetTypeType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TargetTypeType ();
  };

  class typeOfTargetTypeType_pskel: public virtual ::mix::TargetTypeType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfTargetTypeType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfTargetTypeType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class typeOfPreviousImageMetadataType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_typeOfPreviousImageMetadataType ();

    // Constructor.
    //
    typeOfPreviousImageMetadataType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    struct v_state_descr_
    {
      void (::mix::typeOfPreviousImageMetadataType_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class StringType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StringType ();
  };

  class typeOfStringType_pskel: public virtual ::mix::StringType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfStringType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfStringType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class NonNegativeRealType_pskel: public virtual ::xml_schema::float_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NonNegativeRealType ();
  };

  class typeOfNonNegativeRealType_pskel: public virtual ::mix::NonNegativeRealType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfNonNegativeRealType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfNonNegativeRealType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class PositiveIntegerType_pskel: public virtual ::xml_schema::positive_integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PositiveIntegerType ();
  };

  class typeOfPositiveIntegerType_pskel: public virtual ::mix::PositiveIntegerType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfPositiveIntegerType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfPositiveIntegerType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class DateTimeType_pskel: public virtual ::xml_schema::date_time_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DateTimeType ();
  };

  class typeOfDateTimeType_pskel: public virtual ::mix::DateTimeType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfDateTimeType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfDateTimeType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class ReferenceType_pskel: public virtual ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ReferenceType ();
  };

  class typeOfReferenceType_pskel: public virtual ::mix::ReferenceType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    use ();

    virtual void
    post_typeOfReferenceType ();

    // Parser construction API.
    //
    void
    use_parser (::xml_schema::any_simple_type_pskel&);

    void
    parsers (::xml_schema::any_simple_type_pskel& /* use */);

    // Constructor.
    //
    typeOfReferenceType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::any_simple_type_pskel* use_parser_;
  };

  class mix_pskel: public virtual ::mix::mixType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_mix ();
  };

  class Format_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    MIMEType ();

    virtual void
    ByteOrder ();

    virtual void
    Compression ();

    virtual void
    PhotometricInterpretation ();

    virtual void
    Segments ();

    virtual void
    PlanarConfiguration ();

    virtual void
    post_Format ();

    // Parser construction API.
    //
    void
    MIMEType_parser (::mix::typeOfFormatType_pskel&);

    void
    ByteOrder_parser (::mix::typeOfByteOrderType_pskel&);

    void
    Compression_parser (::mix::Compression_pskel&);

    void
    PhotometricInterpretation_parser (::mix::PhotometricInterpretation_pskel&);

    void
    Segments_parser (::mix::Segments_pskel&);

    void
    PlanarConfiguration_parser (::mix::typeOfPlanarConfigurationType_pskel&);

    void
    parsers (::mix::typeOfFormatType_pskel& /* MIMEType */,
             ::mix::typeOfByteOrderType_pskel& /* ByteOrder */,
             ::mix::Compression_pskel& /* Compression */,
             ::mix::PhotometricInterpretation_pskel& /* PhotometricInterpretation */,
             ::mix::Segments_pskel& /* Segments */,
             ::mix::typeOfPlanarConfigurationType_pskel& /* PlanarConfiguration */);

    // Constructor.
    //
    Format_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfFormatType_pskel* MIMEType_parser_;
    ::mix::typeOfByteOrderType_pskel* ByteOrder_parser_;
    ::mix::Compression_pskel* Compression_parser_;
    ::mix::PhotometricInterpretation_pskel* PhotometricInterpretation_parser_;
    ::mix::Segments_pskel* Segments_parser_;
    ::mix::typeOfPlanarConfigurationType_pskel* PlanarConfiguration_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Format_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class File_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ImageIdentifier ();

    virtual void
    FileSize ();

    virtual void
    Checksum ();

    virtual void
    Orientation ();

    virtual void
    DisplayOrientation ();

    virtual void
    TargetedDisplayAR ();

    virtual void
    post_File ();

    // Parser construction API.
    //
    void
    ImageIdentifier_parser (::mix::typeOfImageIdentifierType_pskel&);

    void
    FileSize_parser (::mix::typeOfFileSizeType_pskel&);

    void
    Checksum_parser (::mix::Checksum_pskel&);

    void
    Orientation_parser (::mix::typeOfOrientationType_pskel&);

    void
    DisplayOrientation_parser (::mix::typeOfDisplayOrientationType_pskel&);

    void
    TargetedDisplayAR_parser (::mix::TargetedDisplayAR_pskel&);

    void
    parsers (::mix::typeOfImageIdentifierType_pskel& /* ImageIdentifier */,
             ::mix::typeOfFileSizeType_pskel& /* FileSize */,
             ::mix::Checksum_pskel& /* Checksum */,
             ::mix::typeOfOrientationType_pskel& /* Orientation */,
             ::mix::typeOfDisplayOrientationType_pskel& /* DisplayOrientation */,
             ::mix::TargetedDisplayAR_pskel& /* TargetedDisplayAR */);

    // Constructor.
    //
    File_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfImageIdentifierType_pskel* ImageIdentifier_parser_;
    ::mix::typeOfFileSizeType_pskel* FileSize_parser_;
    ::mix::Checksum_pskel* Checksum_parser_;
    ::mix::typeOfOrientationType_pskel* Orientation_parser_;
    ::mix::typeOfDisplayOrientationType_pskel* DisplayOrientation_parser_;
    ::mix::TargetedDisplayAR_pskel* TargetedDisplayAR_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::File_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Host_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    HostComputer ();

    virtual void
    OperatingSystem ();

    virtual void
    OSVersion ();

    virtual void
    post_Host ();

    // Parser construction API.
    //
    void
    HostComputer_parser (::mix::typeOfStringType_pskel&);

    void
    OperatingSystem_parser (::mix::typeOfStringType_pskel&);

    void
    OSVersion_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* HostComputer */,
             ::mix::typeOfStringType_pskel& /* OperatingSystem */,
             ::mix::typeOfStringType_pskel& /* OSVersion */);

    // Constructor.
    //
    Host_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* HostComputer_parser_;
    ::mix::typeOfStringType_pskel* OperatingSystem_parser_;
    ::mix::typeOfStringType_pskel* OSVersion_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Host_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ScanningSystemCapture_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ScanningSystemHardware ();

    virtual void
    ScanningSystemSoftware ();

    virtual void
    ScannerCaptureSettings ();

    virtual void
    post_ScanningSystemCapture ();

    // Parser construction API.
    //
    void
    ScanningSystemHardware_parser (::mix::ScanningSystemHardware_pskel&);

    void
    ScanningSystemSoftware_parser (::mix::ScanningSystemSoftware_pskel&);

    void
    ScannerCaptureSettings_parser (::mix::ScannerCaptureSettings_pskel&);

    void
    parsers (::mix::ScanningSystemHardware_pskel& /* ScanningSystemHardware */,
             ::mix::ScanningSystemSoftware_pskel& /* ScanningSystemSoftware */,
             ::mix::ScannerCaptureSettings_pskel& /* ScannerCaptureSettings */);

    // Constructor.
    //
    ScanningSystemCapture_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::ScanningSystemHardware_pskel* ScanningSystemHardware_parser_;
    ::mix::ScanningSystemSoftware_pskel* ScanningSystemSoftware_parser_;
    ::mix::ScannerCaptureSettings_pskel* ScannerCaptureSettings_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ScanningSystemCapture_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class DigitalCameraCapture_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DigitalCameraManufacturer ();

    virtual void
    DigitalCameraModel ();

    virtual void
    post_DigitalCameraCapture ();

    // Parser construction API.
    //
    void
    DigitalCameraManufacturer_parser (::mix::typeOfStringType_pskel&);

    void
    DigitalCameraModel_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* DigitalCameraManufacturer */,
             ::mix::typeOfStringType_pskel& /* DigitalCameraModel */);

    // Constructor.
    //
    DigitalCameraCapture_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* DigitalCameraManufacturer_parser_;
    ::mix::typeOfStringType_pskel* DigitalCameraModel_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::DigitalCameraCapture_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class CameraCaptureSettings_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FNumber ();

    virtual void
    ExposureTime ();

    virtual void
    Brightness ();

    virtual void
    ExposureBias ();

    virtual void
    SubjectDistance ();

    virtual void
    MeteringMode ();

    virtual void
    SceneIlluminant ();

    virtual void
    ColorTemp ();

    virtual void
    FocalLength ();

    virtual void
    Flash ();

    virtual void
    FlashEnergy ();

    virtual void
    FlashReturn ();

    virtual void
    BackLight ();

    virtual void
    ExposureIndex ();

    virtual void
    AutoFocus ();

    virtual void
    PrintAspectRatio ();

    virtual void
    post_CameraCaptureSettings ();

    // Parser construction API.
    //
    void
    FNumber_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    ExposureTime_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    Brightness_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    ExposureBias_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    SubjectDistance_parser (::mix::typeOfSubjectDistanceType_pskel&);

    void
    MeteringMode_parser (::mix::typeOfMeteringModeType_pskel&);

    void
    SceneIlluminant_parser (::mix::typeOfSceneIlluminantType_pskel&);

    void
    ColorTemp_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    FocalLength_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    Flash_parser (::mix::typeOfFlashType_pskel&);

    void
    FlashEnergy_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    FlashReturn_parser (::mix::typeOfFlashReturnType_pskel&);

    void
    BackLight_parser (::mix::typeOfBackLightType_pskel&);

    void
    ExposureIndex_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    AutoFocus_parser (::mix::typeOfAutoFocusType_pskel&);

    void
    PrintAspectRatio_parser (::mix::PrintAspectRatio_pskel&);

    void
    parsers (::mix::typeOfNonNegativeRealType_pskel& /* FNumber */,
             ::mix::typeOfNonNegativeRealType_pskel& /* ExposureTime */,
             ::mix::typeOfNonNegativeRealType_pskel& /* Brightness */,
             ::mix::typeOfNonNegativeRealType_pskel& /* ExposureBias */,
             ::mix::typeOfSubjectDistanceType_pskel& /* SubjectDistance */,
             ::mix::typeOfMeteringModeType_pskel& /* MeteringMode */,
             ::mix::typeOfSceneIlluminantType_pskel& /* SceneIlluminant */,
             ::mix::typeOfNonNegativeRealType_pskel& /* ColorTemp */,
             ::mix::typeOfNonNegativeRealType_pskel& /* FocalLength */,
             ::mix::typeOfFlashType_pskel& /* Flash */,
             ::mix::typeOfNonNegativeRealType_pskel& /* FlashEnergy */,
             ::mix::typeOfFlashReturnType_pskel& /* FlashReturn */,
             ::mix::typeOfBackLightType_pskel& /* BackLight */,
             ::mix::typeOfNonNegativeRealType_pskel& /* ExposureIndex */,
             ::mix::typeOfAutoFocusType_pskel& /* AutoFocus */,
             ::mix::PrintAspectRatio_pskel& /* PrintAspectRatio */);

    // Constructor.
    //
    CameraCaptureSettings_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfNonNegativeRealType_pskel* FNumber_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* ExposureTime_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* Brightness_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* ExposureBias_parser_;
    ::mix::typeOfSubjectDistanceType_pskel* SubjectDistance_parser_;
    ::mix::typeOfMeteringModeType_pskel* MeteringMode_parser_;
    ::mix::typeOfSceneIlluminantType_pskel* SceneIlluminant_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* ColorTemp_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* FocalLength_parser_;
    ::mix::typeOfFlashType_pskel* Flash_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* FlashEnergy_parser_;
    ::mix::typeOfFlashReturnType_pskel* FlashReturn_parser_;
    ::mix::typeOfBackLightType_pskel* BackLight_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* ExposureIndex_parser_;
    ::mix::typeOfAutoFocusType_pskel* AutoFocus_parser_;
    ::mix::PrintAspectRatio_pskel* PrintAspectRatio_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::CameraCaptureSettings_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class SpatialMetrics_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    SamplingFrequencyPlane ();

    virtual void
    SamplingFrequencyUnit ();

    virtual void
    XSamplingFrequency ();

    virtual void
    YSamplingFrequency ();

    virtual void
    ImageWidth ();

    virtual void
    ImageLength ();

    virtual void
    Source_X ();

    virtual void
    Source_Y ();

    virtual void
    post_SpatialMetrics ();

    // Parser construction API.
    //
    void
    SamplingFrequencyPlane_parser (::mix::typeOfSamplingFrequencyPlaneType_pskel&);

    void
    SamplingFrequencyUnit_parser (::mix::typeOfSamplingFrequencyUnitType_pskel&);

    void
    XSamplingFrequency_parser (::mix::typeOfPositiveIntegerType_pskel&);

    void
    YSamplingFrequency_parser (::mix::typeOfPositiveIntegerType_pskel&);

    void
    ImageWidth_parser (::mix::typeOfPositiveIntegerType_pskel&);

    void
    ImageLength_parser (::mix::typeOfPositiveIntegerType_pskel&);

    void
    Source_X_parser (::mix::Source_X_pskel&);

    void
    Source_Y_parser (::mix::Source_Y_pskel&);

    void
    parsers (::mix::typeOfSamplingFrequencyPlaneType_pskel& /* SamplingFrequencyPlane */,
             ::mix::typeOfSamplingFrequencyUnitType_pskel& /* SamplingFrequencyUnit */,
             ::mix::typeOfPositiveIntegerType_pskel& /* XSamplingFrequency */,
             ::mix::typeOfPositiveIntegerType_pskel& /* YSamplingFrequency */,
             ::mix::typeOfPositiveIntegerType_pskel& /* ImageWidth */,
             ::mix::typeOfPositiveIntegerType_pskel& /* ImageLength */,
             ::mix::Source_X_pskel& /* Source_X */,
             ::mix::Source_Y_pskel& /* Source_Y */);

    // Constructor.
    //
    SpatialMetrics_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfSamplingFrequencyPlaneType_pskel* SamplingFrequencyPlane_parser_;
    ::mix::typeOfSamplingFrequencyUnitType_pskel* SamplingFrequencyUnit_parser_;
    ::mix::typeOfPositiveIntegerType_pskel* XSamplingFrequency_parser_;
    ::mix::typeOfPositiveIntegerType_pskel* YSamplingFrequency_parser_;
    ::mix::typeOfPositiveIntegerType_pskel* ImageWidth_parser_;
    ::mix::typeOfPositiveIntegerType_pskel* ImageLength_parser_;
    ::mix::Source_X_pskel* Source_X_parser_;
    ::mix::Source_Y_pskel* Source_Y_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::SpatialMetrics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Energetics_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    BitsPerSample ();

    virtual void
    SamplesPerPixel ();

    virtual void
    ExtraSamples ();

    virtual void
    Colormap ();

    virtual void
    GrayResponse ();

    virtual void
    WhitePoint ();

    virtual void
    PrimaryChromaticities ();

    virtual void
    post_Energetics ();

    // Parser construction API.
    //
    void
    BitsPerSample_parser (::mix::typeOfBitsPerSampleType_pskel&);

    void
    SamplesPerPixel_parser (::mix::typeOfSamplesPerPixelType_pskel&);

    void
    ExtraSamples_parser (::mix::typeOfExtraSamplesType_pskel&);

    void
    Colormap_parser (::mix::Colormap_pskel&);

    void
    GrayResponse_parser (::mix::GrayResponse_pskel&);

    void
    WhitePoint_parser (::mix::WhitePoint_pskel&);

    void
    PrimaryChromaticities_parser (::mix::PrimaryChromaticities_pskel&);

    void
    parsers (::mix::typeOfBitsPerSampleType_pskel& /* BitsPerSample */,
             ::mix::typeOfSamplesPerPixelType_pskel& /* SamplesPerPixel */,
             ::mix::typeOfExtraSamplesType_pskel& /* ExtraSamples */,
             ::mix::Colormap_pskel& /* Colormap */,
             ::mix::GrayResponse_pskel& /* GrayResponse */,
             ::mix::WhitePoint_pskel& /* WhitePoint */,
             ::mix::PrimaryChromaticities_pskel& /* PrimaryChromaticities */);

    // Constructor.
    //
    Energetics_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfBitsPerSampleType_pskel* BitsPerSample_parser_;
    ::mix::typeOfSamplesPerPixelType_pskel* SamplesPerPixel_parser_;
    ::mix::typeOfExtraSamplesType_pskel* ExtraSamples_parser_;
    ::mix::Colormap_pskel* Colormap_parser_;
    ::mix::GrayResponse_pskel* GrayResponse_parser_;
    ::mix::WhitePoint_pskel* WhitePoint_parser_;
    ::mix::PrimaryChromaticities_pskel* PrimaryChromaticities_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Energetics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class TargetData_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TargetType ();

    virtual void
    TargetID ();

    virtual void
    ImageData ();

    virtual void
    PerformanceData ();

    virtual void
    Profiles ();

    virtual void
    post_TargetData ();

    // Parser construction API.
    //
    void
    TargetType_parser (::mix::typeOfTargetTypeType_pskel&);

    void
    TargetID_parser (::mix::TargetID_pskel&);

    void
    ImageData_parser (::mix::typeOfReferenceType_pskel&);

    void
    PerformanceData_parser (::mix::typeOfReferenceType_pskel&);

    void
    Profiles_parser (::mix::typeOfReferenceType_pskel&);

    void
    parsers (::mix::typeOfTargetTypeType_pskel& /* TargetType */,
             ::mix::TargetID_pskel& /* TargetID */,
             ::mix::typeOfReferenceType_pskel& /* ImageData */,
             ::mix::typeOfReferenceType_pskel& /* PerformanceData */,
             ::mix::typeOfReferenceType_pskel& /* Profiles */);

    // Constructor.
    //
    TargetData_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfTargetTypeType_pskel* TargetType_parser_;
    ::mix::TargetID_pskel* TargetID_parser_;
    ::mix::typeOfReferenceType_pskel* ImageData_parser_;
    ::mix::typeOfReferenceType_pskel* PerformanceData_parser_;
    ::mix::typeOfReferenceType_pskel* Profiles_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::TargetData_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ImageProcessing_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DateTimeProcessed ();

    virtual void
    SourceData ();

    virtual void
    ProcessingAgency ();

    virtual void
    ProcessingSoftware ();

    virtual void
    ProcessingActions ();

    virtual void
    post_ImageProcessing ();

    // Parser construction API.
    //
    void
    DateTimeProcessed_parser (::mix::typeOfDateTimeType_pskel&);

    void
    SourceData_parser (::mix::typeOfReferenceType_pskel&);

    void
    ProcessingAgency_parser (::mix::typeOfStringType_pskel&);

    void
    ProcessingSoftware_parser (::mix::ProcessingSoftware_pskel&);

    void
    ProcessingActions_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfDateTimeType_pskel& /* DateTimeProcessed */,
             ::mix::typeOfReferenceType_pskel& /* SourceData */,
             ::mix::typeOfStringType_pskel& /* ProcessingAgency */,
             ::mix::ProcessingSoftware_pskel& /* ProcessingSoftware */,
             ::mix::typeOfStringType_pskel& /* ProcessingActions */);

    // Constructor.
    //
    ImageProcessing_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfDateTimeType_pskel* DateTimeProcessed_parser_;
    ::mix::typeOfReferenceType_pskel* SourceData_parser_;
    ::mix::typeOfStringType_pskel* ProcessingAgency_parser_;
    ::mix::ProcessingSoftware_pskel* ProcessingSoftware_parser_;
    ::mix::typeOfStringType_pskel* ProcessingActions_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ImageProcessing_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Compression_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    CompressionScheme ();

    virtual void
    CompressionLevel ();

    virtual void
    post_Compression ();

    // Parser construction API.
    //
    void
    CompressionScheme_parser (::mix::typeOfCompressionSchemeType_pskel&);

    void
    CompressionLevel_parser (::mix::typeOfCompressionLevelType_pskel&);

    void
    parsers (::mix::typeOfCompressionSchemeType_pskel& /* CompressionScheme */,
             ::mix::typeOfCompressionLevelType_pskel& /* CompressionLevel */);

    // Constructor.
    //
    Compression_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfCompressionSchemeType_pskel* CompressionScheme_parser_;
    ::mix::typeOfCompressionLevelType_pskel* CompressionLevel_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Compression_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class PhotometricInterpretation_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ColorSpace ();

    virtual void
    ICCProfile ();

    virtual void
    YCbCrSubSampling ();

    virtual void
    YCbCrPositioning ();

    virtual void
    YcbCrCoefficients ();

    virtual void
    ReferenceBlackWhite ();

    virtual void
    post_PhotometricInterpretation ();

    // Parser construction API.
    //
    void
    ColorSpace_parser (::mix::typeOfColorSpaceType_pskel&);

    void
    ICCProfile_parser (::mix::ICCProfile_pskel&);

    void
    YCbCrSubSampling_parser (::mix::typeOfYCbCrSubSamplingType_pskel&);

    void
    YCbCrPositioning_parser (::mix::typeOfYCbCrPositioningType_pskel&);

    void
    YcbCrCoefficients_parser (::mix::typeOfYcbCrCoefficientsType_pskel&);

    void
    ReferenceBlackWhite_parser (::mix::typeOfReferenceBlackWhiteType_pskel&);

    void
    parsers (::mix::typeOfColorSpaceType_pskel& /* ColorSpace */,
             ::mix::ICCProfile_pskel& /* ICCProfile */,
             ::mix::typeOfYCbCrSubSamplingType_pskel& /* YCbCrSubSampling */,
             ::mix::typeOfYCbCrPositioningType_pskel& /* YCbCrPositioning */,
             ::mix::typeOfYcbCrCoefficientsType_pskel& /* YcbCrCoefficients */,
             ::mix::typeOfReferenceBlackWhiteType_pskel& /* ReferenceBlackWhite */);

    // Constructor.
    //
    PhotometricInterpretation_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfColorSpaceType_pskel* ColorSpace_parser_;
    ::mix::ICCProfile_pskel* ICCProfile_parser_;
    ::mix::typeOfYCbCrSubSamplingType_pskel* YCbCrSubSampling_parser_;
    ::mix::typeOfYCbCrPositioningType_pskel* YCbCrPositioning_parser_;
    ::mix::typeOfYcbCrCoefficientsType_pskel* YcbCrCoefficients_parser_;
    ::mix::typeOfReferenceBlackWhiteType_pskel* ReferenceBlackWhite_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::PhotometricInterpretation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Segments_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    SegmentType ();

    virtual void
    StripOffsets ();

    virtual void
    RowsPerStrip ();

    virtual void
    StripByteCounts ();

    virtual void
    TileWidth ();

    virtual void
    TileLength ();

    virtual void
    TileOffsets ();

    virtual void
    TileByteCounts ();

    virtual void
    post_Segments ();

    // Parser construction API.
    //
    void
    SegmentType_parser (::mix::typeOfSegmentTypeType_pskel&);

    void
    StripOffsets_parser (::mix::typeOfStripOffsetsType_pskel&);

    void
    RowsPerStrip_parser (::mix::typeOfRowsPerStripType_pskel&);

    void
    StripByteCounts_parser (::mix::typeOfStripByteCountsType_pskel&);

    void
    TileWidth_parser (::mix::typeOfTileWidthType_pskel&);

    void
    TileLength_parser (::mix::typeOfTileLengthType_pskel&);

    void
    TileOffsets_parser (::mix::typeOfTileOffsetsType_pskel&);

    void
    TileByteCounts_parser (::mix::typeOfTileByteCountsType_pskel&);

    void
    parsers (::mix::typeOfSegmentTypeType_pskel& /* SegmentType */,
             ::mix::typeOfStripOffsetsType_pskel& /* StripOffsets */,
             ::mix::typeOfRowsPerStripType_pskel& /* RowsPerStrip */,
             ::mix::typeOfStripByteCountsType_pskel& /* StripByteCounts */,
             ::mix::typeOfTileWidthType_pskel& /* TileWidth */,
             ::mix::typeOfTileLengthType_pskel& /* TileLength */,
             ::mix::typeOfTileOffsetsType_pskel& /* TileOffsets */,
             ::mix::typeOfTileByteCountsType_pskel& /* TileByteCounts */);

    // Constructor.
    //
    Segments_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfSegmentTypeType_pskel* SegmentType_parser_;
    ::mix::typeOfStripOffsetsType_pskel* StripOffsets_parser_;
    ::mix::typeOfRowsPerStripType_pskel* RowsPerStrip_parser_;
    ::mix::typeOfStripByteCountsType_pskel* StripByteCounts_parser_;
    ::mix::typeOfTileWidthType_pskel* TileWidth_parser_;
    ::mix::typeOfTileLengthType_pskel* TileLength_parser_;
    ::mix::typeOfTileOffsetsType_pskel* TileOffsets_parser_;
    ::mix::typeOfTileByteCountsType_pskel* TileByteCounts_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Segments_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Checksum_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ChecksumMethod ();

    virtual void
    ChecksumValue ();

    virtual void
    post_Checksum ();

    // Parser construction API.
    //
    void
    ChecksumMethod_parser (::mix::typeOfChecksumMethodType_pskel&);

    void
    ChecksumValue_parser (::mix::typeOfChecksumValueType_pskel&);

    void
    parsers (::mix::typeOfChecksumMethodType_pskel& /* ChecksumMethod */,
             ::mix::typeOfChecksumValueType_pskel& /* ChecksumValue */);

    // Constructor.
    //
    Checksum_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfChecksumMethodType_pskel* ChecksumMethod_parser_;
    ::mix::typeOfChecksumValueType_pskel* ChecksumValue_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Checksum_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class TargetedDisplayAR_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    XTargetedDisplayAR ();

    virtual void
    YTargetedDisplayAR ();

    virtual void
    post_TargetedDisplayAR ();

    // Parser construction API.
    //
    void
    XTargetedDisplayAR_parser (::mix::typeOfXTargetedDisplayARType_pskel&);

    void
    YTargetedDisplayAR_parser (::mix::typeOfYTargetedDisplayARType_pskel&);

    void
    parsers (::mix::typeOfXTargetedDisplayARType_pskel& /* XTargetedDisplayAR */,
             ::mix::typeOfYTargetedDisplayARType_pskel& /* YTargetedDisplayAR */);

    // Constructor.
    //
    TargetedDisplayAR_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfXTargetedDisplayARType_pskel* XTargetedDisplayAR_parser_;
    ::mix::typeOfYTargetedDisplayARType_pskel* YTargetedDisplayAR_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::TargetedDisplayAR_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ScanningSystemHardware_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ScannerManufacturer ();

    virtual void
    ScannerModel ();

    virtual void
    post_ScanningSystemHardware ();

    // Parser construction API.
    //
    void
    ScannerManufacturer_parser (::mix::typeOfStringType_pskel&);

    void
    ScannerModel_parser (::mix::ScannerModel_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* ScannerManufacturer */,
             ::mix::ScannerModel_pskel& /* ScannerModel */);

    // Constructor.
    //
    ScanningSystemHardware_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* ScannerManufacturer_parser_;
    ::mix::ScannerModel_pskel* ScannerModel_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ScanningSystemHardware_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ScanningSystemSoftware_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ScanningSoftware ();

    virtual void
    ScanningSoftwareVersionNo ();

    virtual void
    post_ScanningSystemSoftware ();

    // Parser construction API.
    //
    void
    ScanningSoftware_parser (::mix::typeOfStringType_pskel&);

    void
    ScanningSoftwareVersionNo_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* ScanningSoftware */,
             ::mix::typeOfStringType_pskel& /* ScanningSoftwareVersionNo */);

    // Constructor.
    //
    ScanningSystemSoftware_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* ScanningSoftware_parser_;
    ::mix::typeOfStringType_pskel* ScanningSoftwareVersionNo_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ScanningSystemSoftware_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ScannerCaptureSettings_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    PixelSize ();

    virtual void
    PhysScanResolution ();

    virtual void
    post_ScannerCaptureSettings ();

    // Parser construction API.
    //
    void
    PixelSize_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    PhysScanResolution_parser (::mix::PhysScanResolution_pskel&);

    void
    parsers (::mix::typeOfNonNegativeRealType_pskel& /* PixelSize */,
             ::mix::PhysScanResolution_pskel& /* PhysScanResolution */);

    // Constructor.
    //
    ScannerCaptureSettings_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfNonNegativeRealType_pskel* PixelSize_parser_;
    ::mix::PhysScanResolution_pskel* PhysScanResolution_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ScannerCaptureSettings_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class PrintAspectRatio_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    XPrintAspectRatio ();

    virtual void
    YPrintAspectRatio ();

    virtual void
    post_PrintAspectRatio ();

    // Parser construction API.
    //
    void
    XPrintAspectRatio_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    YPrintAspectRatio_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    parsers (::mix::typeOfNonNegativeRealType_pskel& /* XPrintAspectRatio */,
             ::mix::typeOfNonNegativeRealType_pskel& /* YPrintAspectRatio */);

    // Constructor.
    //
    PrintAspectRatio_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfNonNegativeRealType_pskel* XPrintAspectRatio_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* YPrintAspectRatio_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::PrintAspectRatio_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Source_X_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Source_Xdimension ();

    virtual void
    Source_XdimensionUnit ();

    virtual void
    post_Source_X ();

    // Parser construction API.
    //
    void
    Source_Xdimension_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    Source_XdimensionUnit_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfNonNegativeRealType_pskel& /* Source_Xdimension */,
             ::mix::typeOfStringType_pskel& /* Source_XdimensionUnit */);

    // Constructor.
    //
    Source_X_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfNonNegativeRealType_pskel* Source_Xdimension_parser_;
    ::mix::typeOfStringType_pskel* Source_XdimensionUnit_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Source_X_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Source_Y_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Source_Ydimension ();

    virtual void
    Source_YdimensionUnit ();

    virtual void
    post_Source_Y ();

    // Parser construction API.
    //
    void
    Source_Ydimension_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    Source_YdimensionUnit_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfNonNegativeRealType_pskel& /* Source_Ydimension */,
             ::mix::typeOfStringType_pskel& /* Source_YdimensionUnit */);

    // Constructor.
    //
    Source_Y_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfNonNegativeRealType_pskel* Source_Ydimension_parser_;
    ::mix::typeOfStringType_pskel* Source_YdimensionUnit_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Source_Y_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Colormap_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Colormap_BitCodeValue ();

    virtual void
    Colormap_RedValue ();

    virtual void
    Colormap_GreenValue ();

    virtual void
    Colormap_BlueValue ();

    virtual void
    post_Colormap ();

    // Parser construction API.
    //
    void
    Colormap_BitCodeValue_parser (::mix::typeOfColormapType_pskel&);

    void
    Colormap_RedValue_parser (::mix::typeOfColormapType_pskel&);

    void
    Colormap_GreenValue_parser (::mix::typeOfColormapType_pskel&);

    void
    Colormap_BlueValue_parser (::mix::typeOfColormapType_pskel&);

    void
    parsers (::mix::typeOfColormapType_pskel& /* Colormap_BitCodeValue */,
             ::mix::typeOfColormapType_pskel& /* Colormap_RedValue */,
             ::mix::typeOfColormapType_pskel& /* Colormap_GreenValue */,
             ::mix::typeOfColormapType_pskel& /* Colormap_BlueValue */);

    // Constructor.
    //
    Colormap_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfColormapType_pskel* Colormap_BitCodeValue_parser_;
    ::mix::typeOfColormapType_pskel* Colormap_RedValue_parser_;
    ::mix::typeOfColormapType_pskel* Colormap_GreenValue_parser_;
    ::mix::typeOfColormapType_pskel* Colormap_BlueValue_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::Colormap_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class GrayResponse_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    GrayResponseCurve ();

    virtual void
    GrayResponseUnit ();

    virtual void
    post_GrayResponse ();

    // Parser construction API.
    //
    void
    GrayResponseCurve_parser (::mix::typeOfGrayResponseCurveType_pskel&);

    void
    GrayResponseUnit_parser (::mix::typeOfGrayResponseUnitType_pskel&);

    void
    parsers (::mix::typeOfGrayResponseCurveType_pskel& /* GrayResponseCurve */,
             ::mix::typeOfGrayResponseUnitType_pskel& /* GrayResponseUnit */);

    // Constructor.
    //
    GrayResponse_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfGrayResponseCurveType_pskel* GrayResponseCurve_parser_;
    ::mix::typeOfGrayResponseUnitType_pskel* GrayResponseUnit_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::GrayResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class WhitePoint_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    WhitePoint_Xvalue ();

    virtual void
    WhitePoint_Yvalue ();

    virtual void
    post_WhitePoint ();

    // Parser construction API.
    //
    void
    WhitePoint_Xvalue_parser (::mix::typeOfCIExyType_pskel&);

    void
    WhitePoint_Yvalue_parser (::mix::typeOfCIExyType_pskel&);

    void
    parsers (::mix::typeOfCIExyType_pskel& /* WhitePoint_Xvalue */,
             ::mix::typeOfCIExyType_pskel& /* WhitePoint_Yvalue */);

    // Constructor.
    //
    WhitePoint_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfCIExyType_pskel* WhitePoint_Xvalue_parser_;
    ::mix::typeOfCIExyType_pskel* WhitePoint_Yvalue_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::WhitePoint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class PrimaryChromaticities_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    PrimaryChromaticities_RedX ();

    virtual void
    PrimaryChromaticities_RedY ();

    virtual void
    PrimaryChromaticities_GreenX ();

    virtual void
    PrimaryChromaticities_GreenY ();

    virtual void
    PrimaryChromaticities_BlueX ();

    virtual void
    PrimaryChromaticities_BlueY ();

    virtual void
    post_PrimaryChromaticities ();

    // Parser construction API.
    //
    void
    PrimaryChromaticities_RedX_parser (::mix::typeOfCIExyType_pskel&);

    void
    PrimaryChromaticities_RedY_parser (::mix::typeOfCIExyType_pskel&);

    void
    PrimaryChromaticities_GreenX_parser (::mix::typeOfCIExyType_pskel&);

    void
    PrimaryChromaticities_GreenY_parser (::mix::typeOfCIExyType_pskel&);

    void
    PrimaryChromaticities_BlueX_parser (::mix::typeOfCIExyType_pskel&);

    void
    PrimaryChromaticities_BlueY_parser (::mix::typeOfCIExyType_pskel&);

    void
    parsers (::mix::typeOfCIExyType_pskel& /* PrimaryChromaticities_RedX */,
             ::mix::typeOfCIExyType_pskel& /* PrimaryChromaticities_RedY */,
             ::mix::typeOfCIExyType_pskel& /* PrimaryChromaticities_GreenX */,
             ::mix::typeOfCIExyType_pskel& /* PrimaryChromaticities_GreenY */,
             ::mix::typeOfCIExyType_pskel& /* PrimaryChromaticities_BlueX */,
             ::mix::typeOfCIExyType_pskel& /* PrimaryChromaticities_BlueY */);

    // Constructor.
    //
    PrimaryChromaticities_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfCIExyType_pskel* PrimaryChromaticities_RedX_parser_;
    ::mix::typeOfCIExyType_pskel* PrimaryChromaticities_RedY_parser_;
    ::mix::typeOfCIExyType_pskel* PrimaryChromaticities_GreenX_parser_;
    ::mix::typeOfCIExyType_pskel* PrimaryChromaticities_GreenY_parser_;
    ::mix::typeOfCIExyType_pskel* PrimaryChromaticities_BlueX_parser_;
    ::mix::typeOfCIExyType_pskel* PrimaryChromaticities_BlueY_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::PrimaryChromaticities_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class TargetID_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    TargetIDManufacturer ();

    virtual void
    TargetIDName ();

    virtual void
    TargetIDNo ();

    virtual void
    TargetIDMedia ();

    virtual void
    post_TargetID ();

    // Parser construction API.
    //
    void
    TargetIDManufacturer_parser (::mix::typeOfStringType_pskel&);

    void
    TargetIDName_parser (::mix::typeOfStringType_pskel&);

    void
    TargetIDNo_parser (::mix::typeOfStringType_pskel&);

    void
    TargetIDMedia_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* TargetIDManufacturer */,
             ::mix::typeOfStringType_pskel& /* TargetIDName */,
             ::mix::typeOfStringType_pskel& /* TargetIDNo */,
             ::mix::typeOfStringType_pskel& /* TargetIDMedia */);

    // Constructor.
    //
    TargetID_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* TargetIDManufacturer_parser_;
    ::mix::typeOfStringType_pskel* TargetIDName_parser_;
    ::mix::typeOfStringType_pskel* TargetIDNo_parser_;
    ::mix::typeOfStringType_pskel* TargetIDMedia_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::TargetID_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ProcessingSoftware_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ProcessingSoftwareName ();

    virtual void
    ProcessingSoftwareVersion ();

    virtual void
    post_ProcessingSoftware ();

    // Parser construction API.
    //
    void
    ProcessingSoftwareName_parser (::mix::typeOfStringType_pskel&);

    void
    ProcessingSoftwareVersion_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* ProcessingSoftwareName */,
             ::mix::typeOfStringType_pskel& /* ProcessingSoftwareVersion */);

    // Constructor.
    //
    ProcessingSoftware_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* ProcessingSoftwareName_parser_;
    ::mix::typeOfStringType_pskel* ProcessingSoftwareVersion_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ProcessingSoftware_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ICCProfile_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ProfileName ();

    virtual void
    ProfileURL ();

    virtual void
    post_ICCProfile ();

    // Parser construction API.
    //
    void
    ProfileName_parser (::mix::typeOfStringType_pskel&);

    void
    ProfileURL_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* ProfileName */,
             ::mix::typeOfStringType_pskel& /* ProfileURL */);

    // Constructor.
    //
    ICCProfile_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* ProfileName_parser_;
    ::mix::typeOfStringType_pskel* ProfileURL_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ICCProfile_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ScannerModel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ScannerModelName ();

    virtual void
    ScannerModelNumber ();

    virtual void
    ScannerModelSerialNo ();

    virtual void
    post_ScannerModel ();

    // Parser construction API.
    //
    void
    ScannerModelName_parser (::mix::typeOfStringType_pskel&);

    void
    ScannerModelNumber_parser (::mix::typeOfStringType_pskel&);

    void
    ScannerModelSerialNo_parser (::mix::typeOfStringType_pskel&);

    void
    parsers (::mix::typeOfStringType_pskel& /* ScannerModelName */,
             ::mix::typeOfStringType_pskel& /* ScannerModelNumber */,
             ::mix::typeOfStringType_pskel& /* ScannerModelSerialNo */);

    // Constructor.
    //
    ScannerModel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfStringType_pskel* ScannerModelName_parser_;
    ::mix::typeOfStringType_pskel* ScannerModelNumber_parser_;
    ::mix::typeOfStringType_pskel* ScannerModelSerialNo_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::ScannerModel_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class PhysScanResolution_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    XphysScanResolution ();

    virtual void
    YphysScanResolution ();

    virtual void
    post_PhysScanResolution ();

    // Parser construction API.
    //
    void
    XphysScanResolution_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    YphysScanResolution_parser (::mix::typeOfNonNegativeRealType_pskel&);

    void
    parsers (::mix::typeOfNonNegativeRealType_pskel& /* XphysScanResolution */,
             ::mix::typeOfNonNegativeRealType_pskel& /* YphysScanResolution */);

    // Constructor.
    //
    PhysScanResolution_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::mix::typeOfNonNegativeRealType_pskel* XphysScanResolution_parser_;
    ::mix::typeOfNonNegativeRealType_pskel* YphysScanResolution_parser_;

    protected:
    struct v_state_descr_
    {
      void (::mix::PhysScanResolution_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };
}

#include "mix-pskel.ixx"
#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_________DATA_SCHEMAS_MIX_PSKEL_HXX
