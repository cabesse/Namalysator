// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_________DATA_SCHEMAS_MODS_3_0_PSKEL_HXX
#define CXX_________DATA_SCHEMAS_MODS_3_0_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace mods
{
  namespace v3
  {
    class modsType_pskel;
    class titleInfoType_pskel;
    class nameType_pskel;
    class namePartType_pskel;
    class roleType_pskel;
    class resourceType_pskel;
    class typeOfResourceType_pskel;
    class genreType_pskel;
    class originInfoType_pskel;
    class placeType_pskel;
    class placeTermType_pskel;
    class languageType_pskel;
    class physicalDescriptionType_pskel;
    class targetAudienceType_pskel;
    class subjectType_pskel;
    class classificationType_pskel;
    class relatedItemType_pskel;
    class partType_pskel;
    class detailType_pskel;
    class extentType_pskel;
    class identifierType_pskel;
    class locationType_pskel;
    class extensionType_pskel;
    class recordInfoType_pskel;
    class unstructuredText_pskel;
    class baseDateType_pskel;
    class dateType_pskel;
    class sourceType_pskel;
    class codeOrText_pskel;
    class placeAuthority_pskel;
    class modsCollection_pskel;
    class version_pskel;
    class type_pskel;
    class type1_pskel;
    class type2_pskel;
    class roleTerm_pskel;
    class collection_pskel;
    class manuscript_pskel;
    class issuance_pskel;
    class languageTerm_pskel;
    class form_pskel;
    class reformattingQuality_pskel;
    class digitalOrigin_pskel;
    class geographicCode_pskel;
    class hierarchicalGeographic_pskel;
    class cartographics_pskel;
    class type3_pskel;
    class invalid_pskel;
    class physicalLocation_pskel;
    class url_pskel;
    class recordIdentifier_pskel;
    class encoding_pskel;
    class qualifier_pskel;
    class point_pskel;
    class keyDate_pskel;
    class authority_pskel;
  }
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

#include "xml-pskel.hxx"

#include "xlink-pskel.hxx"

namespace mods
{
  namespace v3
  {
    class modsType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      titleInfo ();

      virtual void
      name ();

      virtual void
      typeOfResource ();

      virtual void
      genre ();

      virtual void
      originInfo ();

      virtual void
      language ();

      virtual void
      physicalDescription ();

      virtual void
      abstract ();

      virtual void
      tableOfContents ();

      virtual void
      targetAudience ();

      virtual void
      note ();

      virtual void
      subject ();

      virtual void
      classification ();

      virtual void
      relatedItem ();

      virtual void
      identifier ();

      virtual void
      location ();

      virtual void
      accessCondition ();

      virtual void
      extension ();

      virtual void
      recordInfo ();

      virtual void
      ID (const ::std::string&);

      virtual void
      version ();

      virtual void
      post_modsType ();

      // Parser construction API.
      //
      void
      titleInfo_parser (::mods::v3::titleInfoType_pskel&);

      void
      name_parser (::mods::v3::nameType_pskel&);

      void
      typeOfResource_parser (::mods::v3::typeOfResourceType_pskel&);

      void
      genre_parser (::mods::v3::genreType_pskel&);

      void
      originInfo_parser (::mods::v3::originInfoType_pskel&);

      void
      language_parser (::mods::v3::languageType_pskel&);

      void
      physicalDescription_parser (::mods::v3::physicalDescriptionType_pskel&);

      void
      abstract_parser (::mods::v3::unstructuredText_pskel&);

      void
      tableOfContents_parser (::mods::v3::unstructuredText_pskel&);

      void
      targetAudience_parser (::mods::v3::targetAudienceType_pskel&);

      void
      note_parser (::mods::v3::unstructuredText_pskel&);

      void
      subject_parser (::mods::v3::subjectType_pskel&);

      void
      classification_parser (::mods::v3::classificationType_pskel&);

      void
      relatedItem_parser (::mods::v3::relatedItemType_pskel&);

      void
      identifier_parser (::mods::v3::identifierType_pskel&);

      void
      location_parser (::mods::v3::locationType_pskel&);

      void
      accessCondition_parser (::mods::v3::unstructuredText_pskel&);

      void
      extension_parser (::mods::v3::extensionType_pskel&);

      void
      recordInfo_parser (::mods::v3::recordInfoType_pskel&);

      void
      ID_parser (::xml_schema::id_pskel&);

      void
      version_parser (::mods::v3::version_pskel&);

      void
      parsers (::mods::v3::titleInfoType_pskel& /* titleInfo */,
               ::mods::v3::nameType_pskel& /* name */,
               ::mods::v3::typeOfResourceType_pskel& /* typeOfResource */,
               ::mods::v3::genreType_pskel& /* genre */,
               ::mods::v3::originInfoType_pskel& /* originInfo */,
               ::mods::v3::languageType_pskel& /* language */,
               ::mods::v3::physicalDescriptionType_pskel& /* physicalDescription */,
               ::mods::v3::unstructuredText_pskel& /* abstract */,
               ::mods::v3::unstructuredText_pskel& /* tableOfContents */,
               ::mods::v3::targetAudienceType_pskel& /* targetAudience */,
               ::mods::v3::unstructuredText_pskel& /* note */,
               ::mods::v3::subjectType_pskel& /* subject */,
               ::mods::v3::classificationType_pskel& /* classification */,
               ::mods::v3::relatedItemType_pskel& /* relatedItem */,
               ::mods::v3::identifierType_pskel& /* identifier */,
               ::mods::v3::locationType_pskel& /* location */,
               ::mods::v3::unstructuredText_pskel& /* accessCondition */,
               ::mods::v3::extensionType_pskel& /* extension */,
               ::mods::v3::recordInfoType_pskel& /* recordInfo */,
               ::xml_schema::id_pskel& /* ID */,
               ::mods::v3::version_pskel& /* version */);

      // Constructor.
      //
      modsType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::titleInfoType_pskel* titleInfo_parser_;
      ::mods::v3::nameType_pskel* name_parser_;
      ::mods::v3::typeOfResourceType_pskel* typeOfResource_parser_;
      ::mods::v3::genreType_pskel* genre_parser_;
      ::mods::v3::originInfoType_pskel* originInfo_parser_;
      ::mods::v3::languageType_pskel* language_parser_;
      ::mods::v3::physicalDescriptionType_pskel* physicalDescription_parser_;
      ::mods::v3::unstructuredText_pskel* abstract_parser_;
      ::mods::v3::unstructuredText_pskel* tableOfContents_parser_;
      ::mods::v3::targetAudienceType_pskel* targetAudience_parser_;
      ::mods::v3::unstructuredText_pskel* note_parser_;
      ::mods::v3::subjectType_pskel* subject_parser_;
      ::mods::v3::classificationType_pskel* classification_parser_;
      ::mods::v3::relatedItemType_pskel* relatedItem_parser_;
      ::mods::v3::identifierType_pskel* identifier_parser_;
      ::mods::v3::locationType_pskel* location_parser_;
      ::mods::v3::unstructuredText_pskel* accessCondition_parser_;
      ::mods::v3::extensionType_pskel* extension_parser_;
      ::mods::v3::recordInfoType_pskel* recordInfo_parser_;
      ::xml_schema::id_pskel* ID_parser_;
      ::mods::v3::version_pskel* version_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::modsType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class titleInfoType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      title ();

      virtual void
      subTitle ();

      virtual void
      partNumber ();

      virtual void
      partName ();

      virtual void
      nonSort ();

      virtual void
      ID (const ::std::string&);

      virtual void
      type ();

      virtual void
      authority ();

      virtual void
      displayLabel (const ::std::string&);

      virtual void
      type1 (const ::std::string&);

      virtual void
      href (const ::std::string&);

      virtual void
      role (const ::std::string&);

      virtual void
      arcrole (const ::std::string&);

      virtual void
      title1 (const ::std::string&);

      virtual void
      show ();

      virtual void
      actuate ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_titleInfoType ();

      // Parser construction API.
      //
      void
      title_parser (::xml_schema::any_type_pskel&);

      void
      subTitle_parser (::xml_schema::any_type_pskel&);

      void
      partNumber_parser (::xml_schema::any_type_pskel&);

      void
      partName_parser (::xml_schema::any_type_pskel&);

      void
      nonSort_parser (::xml_schema::any_type_pskel&);

      void
      ID_parser (::xml_schema::id_pskel&);

      void
      type_parser (::mods::v3::type_pskel&);

      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      displayLabel_parser (::xml_schema::string_pskel&);

      void
      type_parser1 (::xml_schema::string_pskel&);

      void
      href_parser (::xml_schema::uri_pskel&);

      void
      role_parser (::xml_schema::string_pskel&);

      void
      arcrole_parser (::xml_schema::string_pskel&);

      void
      title_parser1 (::xml_schema::string_pskel&);

      void
      show_parser (::xlink::show_pskel&);

      void
      actuate_parser (::xlink::actuate_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_type_pskel& /* title */,
               ::xml_schema::any_type_pskel& /* subTitle */,
               ::xml_schema::any_type_pskel& /* partNumber */,
               ::xml_schema::any_type_pskel& /* partName */,
               ::xml_schema::any_type_pskel& /* nonSort */,
               ::xml_schema::id_pskel& /* ID */,
               ::mods::v3::type_pskel& /* type */,
               ::xml_schema::any_simple_type_pskel& /* authority */,
               ::xml_schema::string_pskel& /* displayLabel */,
               ::xml_schema::string_pskel& /* type */,
               ::xml_schema::uri_pskel& /* href */,
               ::xml_schema::string_pskel& /* role */,
               ::xml_schema::string_pskel& /* arcrole */,
               ::xml_schema::string_pskel& /* title */,
               ::xlink::show_pskel& /* show */,
               ::xlink::actuate_pskel& /* actuate */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      titleInfoType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_type_pskel* title_parser_;
      ::xml_schema::any_type_pskel* subTitle_parser_;
      ::xml_schema::any_type_pskel* partNumber_parser_;
      ::xml_schema::any_type_pskel* partName_parser_;
      ::xml_schema::any_type_pskel* nonSort_parser_;
      ::xml_schema::id_pskel* ID_parser_;
      ::mods::v3::type_pskel* type_parser_;
      ::xml_schema::any_simple_type_pskel* authority_parser_;
      ::xml_schema::string_pskel* displayLabel_parser_;
      ::xml_schema::string_pskel* type1_parser_;
      ::xml_schema::uri_pskel* href_parser_;
      ::xml_schema::string_pskel* role_parser_;
      ::xml_schema::string_pskel* arcrole_parser_;
      ::xml_schema::string_pskel* title1_parser_;
      ::xlink::show_pskel* show_parser_;
      ::xlink::actuate_pskel* actuate_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::titleInfoType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class nameType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      namePart ();

      virtual void
      displayForm ();

      virtual void
      affiliation ();

      virtual void
      role ();

      virtual void
      description ();

      virtual void
      ID (const ::std::string&);

      virtual void
      type ();

      virtual void
      authority ();

      virtual void
      type1 (const ::std::string&);

      virtual void
      href (const ::std::string&);

      virtual void
      role1 (const ::std::string&);

      virtual void
      arcrole (const ::std::string&);

      virtual void
      title (const ::std::string&);

      virtual void
      show ();

      virtual void
      actuate ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_nameType ();

      // Parser construction API.
      //
      void
      namePart_parser (::mods::v3::namePartType_pskel&);

      void
      displayForm_parser (::xml_schema::any_type_pskel&);

      void
      affiliation_parser (::xml_schema::any_type_pskel&);

      void
      role_parser (::mods::v3::roleType_pskel&);

      void
      description_parser (::xml_schema::any_type_pskel&);

      void
      ID_parser (::xml_schema::id_pskel&);

      void
      type_parser (::mods::v3::type1_pskel&);

      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      type_parser1 (::xml_schema::string_pskel&);

      void
      href_parser (::xml_schema::uri_pskel&);

      void
      role_parser1 (::xml_schema::string_pskel&);

      void
      arcrole_parser (::xml_schema::string_pskel&);

      void
      title_parser (::xml_schema::string_pskel&);

      void
      show_parser (::xlink::show_pskel&);

      void
      actuate_parser (::xlink::actuate_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::mods::v3::namePartType_pskel& /* namePart */,
               ::xml_schema::any_type_pskel& /* displayForm */,
               ::xml_schema::any_type_pskel& /* affiliation */,
               ::mods::v3::roleType_pskel& /* role */,
               ::xml_schema::any_type_pskel& /* description */,
               ::xml_schema::id_pskel& /* ID */,
               ::mods::v3::type1_pskel& /* type */,
               ::xml_schema::any_simple_type_pskel& /* authority */,
               ::xml_schema::string_pskel& /* type */,
               ::xml_schema::uri_pskel& /* href */,
               ::xml_schema::string_pskel& /* role */,
               ::xml_schema::string_pskel& /* arcrole */,
               ::xml_schema::string_pskel& /* title */,
               ::xlink::show_pskel& /* show */,
               ::xlink::actuate_pskel& /* actuate */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      nameType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::namePartType_pskel* namePart_parser_;
      ::xml_schema::any_type_pskel* displayForm_parser_;
      ::xml_schema::any_type_pskel* affiliation_parser_;
      ::mods::v3::roleType_pskel* role_parser_;
      ::xml_schema::any_type_pskel* description_parser_;
      ::xml_schema::id_pskel* ID_parser_;
      ::mods::v3::type1_pskel* type_parser_;
      ::xml_schema::any_simple_type_pskel* authority_parser_;
      ::xml_schema::string_pskel* type1_parser_;
      ::xml_schema::uri_pskel* href_parser_;
      ::xml_schema::string_pskel* role1_parser_;
      ::xml_schema::string_pskel* arcrole_parser_;
      ::xml_schema::string_pskel* title_parser_;
      ::xlink::show_pskel* show_parser_;
      ::xlink::actuate_pskel* actuate_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::nameType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class namePartType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      type ();

      virtual void
      post_namePartType ();

      // Parser construction API.
      //
      void
      type_parser (::mods::v3::type2_pskel&);

      void
      parsers (::mods::v3::type2_pskel& /* type */);

      // Constructor.
      //
      namePartType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::type2_pskel* type_parser_;
    };

    class roleType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      roleTerm ();

      virtual void
      post_roleType ();

      // Parser construction API.
      //
      void
      roleTerm_parser (::mods::v3::roleTerm_pskel&);

      void
      parsers (::mods::v3::roleTerm_pskel& /* roleTerm */);

      // Constructor.
      //
      roleType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::mods::v3::roleTerm_pskel* roleTerm_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::roleType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class resourceType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_resourceType ();
    };

    class typeOfResourceType_pskel: public virtual ::mods::v3::resourceType_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      collection ();

      virtual void
      manuscript ();

      virtual void
      post_typeOfResourceType ();

      // Parser construction API.
      //
      void
      collection_parser (::mods::v3::collection_pskel&);

      void
      manuscript_parser (::mods::v3::manuscript_pskel&);

      void
      parsers (::mods::v3::collection_pskel& /* collection */,
               ::mods::v3::manuscript_pskel& /* manuscript */);

      // Constructor.
      //
      typeOfResourceType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::collection_pskel* collection_parser_;
      ::mods::v3::manuscript_pskel* manuscript_parser_;
    };

    class genreType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_genreType ();

      // Parser construction API.
      //
      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* authority */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      genreType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* authority_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;
    };

    class originInfoType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      place ();

      virtual void
      publisher ();

      virtual void
      dateIssued ();

      virtual void
      dateCreated ();

      virtual void
      dateCaptured ();

      virtual void
      dateValid ();

      virtual void
      dateModified ();

      virtual void
      copyrightDate ();

      virtual void
      dateOther ();

      virtual void
      edition ();

      virtual void
      issuance ();

      virtual void
      frequency ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_originInfoType ();

      // Parser construction API.
      //
      void
      place_parser (::mods::v3::placeType_pskel&);

      void
      publisher_parser (::xml_schema::any_type_pskel&);

      void
      dateIssued_parser (::mods::v3::dateType_pskel&);

      void
      dateCreated_parser (::mods::v3::dateType_pskel&);

      void
      dateCaptured_parser (::mods::v3::dateType_pskel&);

      void
      dateValid_parser (::mods::v3::dateType_pskel&);

      void
      dateModified_parser (::mods::v3::dateType_pskel&);

      void
      copyrightDate_parser (::mods::v3::dateType_pskel&);

      void
      dateOther_parser (::mods::v3::dateType_pskel&);

      void
      edition_parser (::xml_schema::any_type_pskel&);

      void
      issuance_parser (::mods::v3::issuance_pskel&);

      void
      frequency_parser (::xml_schema::any_type_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::mods::v3::placeType_pskel& /* place */,
               ::xml_schema::any_type_pskel& /* publisher */,
               ::mods::v3::dateType_pskel& /* dateIssued */,
               ::mods::v3::dateType_pskel& /* dateCreated */,
               ::mods::v3::dateType_pskel& /* dateCaptured */,
               ::mods::v3::dateType_pskel& /* dateValid */,
               ::mods::v3::dateType_pskel& /* dateModified */,
               ::mods::v3::dateType_pskel& /* copyrightDate */,
               ::mods::v3::dateType_pskel& /* dateOther */,
               ::xml_schema::any_type_pskel& /* edition */,
               ::mods::v3::issuance_pskel& /* issuance */,
               ::xml_schema::any_type_pskel& /* frequency */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      originInfoType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::placeType_pskel* place_parser_;
      ::xml_schema::any_type_pskel* publisher_parser_;
      ::mods::v3::dateType_pskel* dateIssued_parser_;
      ::mods::v3::dateType_pskel* dateCreated_parser_;
      ::mods::v3::dateType_pskel* dateCaptured_parser_;
      ::mods::v3::dateType_pskel* dateValid_parser_;
      ::mods::v3::dateType_pskel* dateModified_parser_;
      ::mods::v3::dateType_pskel* copyrightDate_parser_;
      ::mods::v3::dateType_pskel* dateOther_parser_;
      ::xml_schema::any_type_pskel* edition_parser_;
      ::mods::v3::issuance_pskel* issuance_parser_;
      ::xml_schema::any_type_pskel* frequency_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::originInfoType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class placeType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      placeTerm ();

      virtual void
      post_placeType ();

      // Parser construction API.
      //
      void
      placeTerm_parser (::mods::v3::placeTermType_pskel&);

      void
      parsers (::mods::v3::placeTermType_pskel& /* placeTerm */);

      // Constructor.
      //
      placeType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::mods::v3::placeTermType_pskel* placeTerm_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::placeType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class placeTermType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      type ();

      virtual void
      post_placeTermType ();

      // Parser construction API.
      //
      void
      authority_parser (::mods::v3::placeAuthority_pskel&);

      void
      type_parser (::mods::v3::codeOrText_pskel&);

      void
      parsers (::mods::v3::placeAuthority_pskel& /* authority */,
               ::mods::v3::codeOrText_pskel& /* type */);

      // Constructor.
      //
      placeTermType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::placeAuthority_pskel* authority_parser_;
      ::mods::v3::codeOrText_pskel* type_parser_;
    };

    class languageType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      languageTerm ();

      virtual void
      post_languageType ();

      // Parser construction API.
      //
      void
      languageTerm_parser (::mods::v3::languageTerm_pskel&);

      void
      parsers (::mods::v3::languageTerm_pskel& /* languageTerm */);

      // Constructor.
      //
      languageType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::mods::v3::languageTerm_pskel* languageTerm_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::languageType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class physicalDescriptionType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      form ();

      virtual void
      reformattingQuality ();

      virtual void
      internetMediaType ();

      virtual void
      extent ();

      virtual void
      digitalOrigin ();

      virtual void
      note ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_physicalDescriptionType ();

      // Parser construction API.
      //
      void
      form_parser (::mods::v3::form_pskel&);

      void
      reformattingQuality_parser (::mods::v3::reformattingQuality_pskel&);

      void
      internetMediaType_parser (::xml_schema::any_type_pskel&);

      void
      extent_parser (::xml_schema::any_type_pskel&);

      void
      digitalOrigin_parser (::mods::v3::digitalOrigin_pskel&);

      void
      note_parser (::mods::v3::unstructuredText_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::mods::v3::form_pskel& /* form */,
               ::mods::v3::reformattingQuality_pskel& /* reformattingQuality */,
               ::xml_schema::any_type_pskel& /* internetMediaType */,
               ::xml_schema::any_type_pskel& /* extent */,
               ::mods::v3::digitalOrigin_pskel& /* digitalOrigin */,
               ::mods::v3::unstructuredText_pskel& /* note */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      physicalDescriptionType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::form_pskel* form_parser_;
      ::mods::v3::reformattingQuality_pskel* reformattingQuality_parser_;
      ::xml_schema::any_type_pskel* internetMediaType_parser_;
      ::xml_schema::any_type_pskel* extent_parser_;
      ::mods::v3::digitalOrigin_pskel* digitalOrigin_parser_;
      ::mods::v3::unstructuredText_pskel* note_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::physicalDescriptionType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class targetAudienceType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_targetAudienceType ();

      // Parser construction API.
      //
      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* authority */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      targetAudienceType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* authority_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;
    };

    class subjectType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      topic ();

      virtual void
      geographic ();

      virtual void
      temporal ();

      virtual void
      titleInfo ();

      virtual void
      name ();

      virtual void
      geographicCode ();

      virtual void
      hierarchicalGeographic ();

      virtual void
      cartographics ();

      virtual void
      occupation ();

      virtual void
      ID (const ::std::string&);

      virtual void
      type (const ::std::string&);

      virtual void
      href (const ::std::string&);

      virtual void
      role (const ::std::string&);

      virtual void
      arcrole (const ::std::string&);

      virtual void
      title (const ::std::string&);

      virtual void
      show ();

      virtual void
      actuate ();

      virtual void
      authority ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_subjectType ();

      // Parser construction API.
      //
      void
      topic_parser (::xml_schema::any_type_pskel&);

      void
      geographic_parser (::xml_schema::any_type_pskel&);

      void
      temporal_parser (::mods::v3::dateType_pskel&);

      void
      titleInfo_parser (::mods::v3::titleInfoType_pskel&);

      void
      name_parser (::mods::v3::nameType_pskel&);

      void
      geographicCode_parser (::mods::v3::geographicCode_pskel&);

      void
      hierarchicalGeographic_parser (::mods::v3::hierarchicalGeographic_pskel&);

      void
      cartographics_parser (::mods::v3::cartographics_pskel&);

      void
      occupation_parser (::xml_schema::any_type_pskel&);

      void
      ID_parser (::xml_schema::id_pskel&);

      void
      type_parser (::xml_schema::string_pskel&);

      void
      href_parser (::xml_schema::uri_pskel&);

      void
      role_parser (::xml_schema::string_pskel&);

      void
      arcrole_parser (::xml_schema::string_pskel&);

      void
      title_parser (::xml_schema::string_pskel&);

      void
      show_parser (::xlink::show_pskel&);

      void
      actuate_parser (::xlink::actuate_pskel&);

      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_type_pskel& /* topic */,
               ::xml_schema::any_type_pskel& /* geographic */,
               ::mods::v3::dateType_pskel& /* temporal */,
               ::mods::v3::titleInfoType_pskel& /* titleInfo */,
               ::mods::v3::nameType_pskel& /* name */,
               ::mods::v3::geographicCode_pskel& /* geographicCode */,
               ::mods::v3::hierarchicalGeographic_pskel& /* hierarchicalGeographic */,
               ::mods::v3::cartographics_pskel& /* cartographics */,
               ::xml_schema::any_type_pskel& /* occupation */,
               ::xml_schema::id_pskel& /* ID */,
               ::xml_schema::string_pskel& /* type */,
               ::xml_schema::uri_pskel& /* href */,
               ::xml_schema::string_pskel& /* role */,
               ::xml_schema::string_pskel& /* arcrole */,
               ::xml_schema::string_pskel& /* title */,
               ::xlink::show_pskel& /* show */,
               ::xlink::actuate_pskel& /* actuate */,
               ::xml_schema::any_simple_type_pskel& /* authority */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      subjectType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_type_pskel* topic_parser_;
      ::xml_schema::any_type_pskel* geographic_parser_;
      ::mods::v3::dateType_pskel* temporal_parser_;
      ::mods::v3::titleInfoType_pskel* titleInfo_parser_;
      ::mods::v3::nameType_pskel* name_parser_;
      ::mods::v3::geographicCode_pskel* geographicCode_parser_;
      ::mods::v3::hierarchicalGeographic_pskel* hierarchicalGeographic_parser_;
      ::mods::v3::cartographics_pskel* cartographics_parser_;
      ::xml_schema::any_type_pskel* occupation_parser_;
      ::xml_schema::id_pskel* ID_parser_;
      ::xml_schema::string_pskel* type_parser_;
      ::xml_schema::uri_pskel* href_parser_;
      ::xml_schema::string_pskel* role_parser_;
      ::xml_schema::string_pskel* arcrole_parser_;
      ::xml_schema::string_pskel* title_parser_;
      ::xlink::show_pskel* show_parser_;
      ::xlink::actuate_pskel* actuate_parser_;
      ::xml_schema::any_simple_type_pskel* authority_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::subjectType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class classificationType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      edition ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_classificationType ();

      // Parser construction API.
      //
      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      edition_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* authority */,
               ::xml_schema::any_simple_type_pskel& /* edition */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      classificationType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* authority_parser_;
      ::xml_schema::any_simple_type_pskel* edition_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;
    };

    class relatedItemType_pskel: public virtual ::mods::v3::modsType_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      part ();

      virtual void
      type ();

      virtual void
      displayLabel (const ::std::string&);

      virtual void
      type1 (const ::std::string&);

      virtual void
      href (const ::std::string&);

      virtual void
      role (const ::std::string&);

      virtual void
      arcrole (const ::std::string&);

      virtual void
      title (const ::std::string&);

      virtual void
      show ();

      virtual void
      actuate ();

      virtual void
      post_relatedItemType ();

      // Parser construction API.
      //
      void
      part_parser (::mods::v3::partType_pskel&);

      void
      type_parser (::mods::v3::type3_pskel&);

      void
      displayLabel_parser (::xml_schema::string_pskel&);

      void
      type_parser1 (::xml_schema::string_pskel&);

      void
      href_parser (::xml_schema::uri_pskel&);

      void
      role_parser (::xml_schema::string_pskel&);

      void
      arcrole_parser (::xml_schema::string_pskel&);

      void
      title_parser (::xml_schema::string_pskel&);

      void
      show_parser (::xlink::show_pskel&);

      void
      actuate_parser (::xlink::actuate_pskel&);

      void
      parsers (::mods::v3::titleInfoType_pskel& /* titleInfo */,
               ::mods::v3::nameType_pskel& /* name */,
               ::mods::v3::typeOfResourceType_pskel& /* typeOfResource */,
               ::mods::v3::genreType_pskel& /* genre */,
               ::mods::v3::originInfoType_pskel& /* originInfo */,
               ::mods::v3::languageType_pskel& /* language */,
               ::mods::v3::physicalDescriptionType_pskel& /* physicalDescription */,
               ::mods::v3::unstructuredText_pskel& /* abstract */,
               ::mods::v3::unstructuredText_pskel& /* tableOfContents */,
               ::mods::v3::targetAudienceType_pskel& /* targetAudience */,
               ::mods::v3::unstructuredText_pskel& /* note */,
               ::mods::v3::subjectType_pskel& /* subject */,
               ::mods::v3::classificationType_pskel& /* classification */,
               ::mods::v3::relatedItemType_pskel& /* relatedItem */,
               ::mods::v3::identifierType_pskel& /* identifier */,
               ::mods::v3::locationType_pskel& /* location */,
               ::mods::v3::unstructuredText_pskel& /* accessCondition */,
               ::mods::v3::extensionType_pskel& /* extension */,
               ::mods::v3::recordInfoType_pskel& /* recordInfo */,
               ::xml_schema::id_pskel& /* ID */,
               ::mods::v3::version_pskel& /* version */,
               ::mods::v3::partType_pskel& /* part */,
               ::mods::v3::type3_pskel& /* type */,
               ::xml_schema::string_pskel& /* displayLabel */,
               ::xml_schema::string_pskel& /* type */,
               ::xml_schema::uri_pskel& /* href */,
               ::xml_schema::string_pskel& /* role */,
               ::xml_schema::string_pskel& /* arcrole */,
               ::xml_schema::string_pskel& /* title */,
               ::xlink::show_pskel& /* show */,
               ::xlink::actuate_pskel& /* actuate */);

      // Constructor.
      //
      relatedItemType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::partType_pskel* part_parser_;
      ::mods::v3::type3_pskel* type_parser_;
      ::xml_schema::string_pskel* displayLabel_parser_;
      ::xml_schema::string_pskel* type1_parser_;
      ::xml_schema::uri_pskel* href_parser_;
      ::xml_schema::string_pskel* role_parser_;
      ::xml_schema::string_pskel* arcrole_parser_;
      ::xml_schema::string_pskel* title_parser_;
      ::xlink::show_pskel* show_parser_;
      ::xlink::actuate_pskel* actuate_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::relatedItemType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class partType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      detail ();

      virtual void
      extent ();

      virtual void
      date ();

      virtual void
      text ();

      virtual void
      post_partType ();

      // Parser construction API.
      //
      void
      detail_parser (::mods::v3::detailType_pskel&);

      void
      extent_parser (::mods::v3::extentType_pskel&);

      void
      date_parser (::mods::v3::baseDateType_pskel&);

      void
      text_parser (::mods::v3::unstructuredText_pskel&);

      void
      parsers (::mods::v3::detailType_pskel& /* detail */,
               ::mods::v3::extentType_pskel& /* extent */,
               ::mods::v3::baseDateType_pskel& /* date */,
               ::mods::v3::unstructuredText_pskel& /* text */);

      // Constructor.
      //
      partType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::mods::v3::detailType_pskel* detail_parser_;
      ::mods::v3::extentType_pskel* extent_parser_;
      ::mods::v3::baseDateType_pskel* date_parser_;
      ::mods::v3::unstructuredText_pskel* text_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::partType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class detailType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      number ();

      virtual void
      caption ();

      virtual void
      title ();

      virtual void
      type ();

      virtual void
      level (unsigned long long);

      virtual void
      post_detailType ();

      // Parser construction API.
      //
      void
      number_parser (::xml_schema::any_type_pskel&);

      void
      caption_parser (::xml_schema::any_type_pskel&);

      void
      title_parser (::xml_schema::any_type_pskel&);

      void
      type_parser (::xml_schema::any_simple_type_pskel&);

      void
      level_parser (::xml_schema::positive_integer_pskel&);

      void
      parsers (::xml_schema::any_type_pskel& /* number */,
               ::xml_schema::any_type_pskel& /* caption */,
               ::xml_schema::any_type_pskel& /* title */,
               ::xml_schema::any_simple_type_pskel& /* type */,
               ::xml_schema::positive_integer_pskel& /* level */);

      // Constructor.
      //
      detailType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_type_pskel* number_parser_;
      ::xml_schema::any_type_pskel* caption_parser_;
      ::xml_schema::any_type_pskel* title_parser_;
      ::xml_schema::any_simple_type_pskel* type_parser_;
      ::xml_schema::positive_integer_pskel* level_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::detailType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class extentType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      start ();

      virtual void
      end ();

      virtual void
      total (unsigned long long);

      virtual void
      list ();

      virtual void
      unit ();

      virtual void
      post_extentType ();

      // Parser construction API.
      //
      void
      start_parser (::xml_schema::any_type_pskel&);

      void
      end_parser (::xml_schema::any_type_pskel&);

      void
      total_parser (::xml_schema::positive_integer_pskel&);

      void
      list_parser (::xml_schema::any_type_pskel&);

      void
      unit_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_type_pskel& /* start */,
               ::xml_schema::any_type_pskel& /* end */,
               ::xml_schema::positive_integer_pskel& /* total */,
               ::xml_schema::any_type_pskel& /* list */,
               ::xml_schema::any_simple_type_pskel& /* unit */);

      // Constructor.
      //
      extentType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_type_pskel* start_parser_;
      ::xml_schema::any_type_pskel* end_parser_;
      ::xml_schema::positive_integer_pskel* total_parser_;
      ::xml_schema::any_type_pskel* list_parser_;
      ::xml_schema::any_simple_type_pskel* unit_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::extentType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class identifierType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      type ();

      virtual void
      displayLabel ();

      virtual void
      invalid ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_identifierType ();

      // Parser construction API.
      //
      void
      type_parser (::xml_schema::any_simple_type_pskel&);

      void
      displayLabel_parser (::xml_schema::any_simple_type_pskel&);

      void
      invalid_parser (::mods::v3::invalid_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* type */,
               ::xml_schema::any_simple_type_pskel& /* displayLabel */,
               ::mods::v3::invalid_pskel& /* invalid */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      identifierType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* type_parser_;
      ::xml_schema::any_simple_type_pskel* displayLabel_parser_;
      ::mods::v3::invalid_pskel* invalid_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;
    };

    class locationType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      physicalLocation ();

      virtual void
      url ();

      virtual void
      post_locationType ();

      // Parser construction API.
      //
      void
      physicalLocation_parser (::mods::v3::physicalLocation_pskel&);

      void
      url_parser (::mods::v3::url_pskel&);

      void
      parsers (::mods::v3::physicalLocation_pskel& /* physicalLocation */,
               ::mods::v3::url_pskel& /* url */);

      // Constructor.
      //
      locationType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::mods::v3::physicalLocation_pskel* physicalLocation_parser_;
      ::mods::v3::url_pskel* url_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::locationType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class extensionType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_extensionType ();

      // Constructor.
      //
      extensionType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _characters_impl (const ::xml_schema::ro_string&);

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::extensionType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class recordInfoType_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      recordContentSource ();

      virtual void
      recordCreationDate ();

      virtual void
      recordChangeDate ();

      virtual void
      recordIdentifier ();

      virtual void
      languageOfCataloging ();

      virtual void
      recordOrigin ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_recordInfoType ();

      // Parser construction API.
      //
      void
      recordContentSource_parser (::mods::v3::sourceType_pskel&);

      void
      recordCreationDate_parser (::mods::v3::dateType_pskel&);

      void
      recordChangeDate_parser (::mods::v3::dateType_pskel&);

      void
      recordIdentifier_parser (::mods::v3::recordIdentifier_pskel&);

      void
      languageOfCataloging_parser (::mods::v3::languageType_pskel&);

      void
      recordOrigin_parser (::xml_schema::any_type_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::mods::v3::sourceType_pskel& /* recordContentSource */,
               ::mods::v3::dateType_pskel& /* recordCreationDate */,
               ::mods::v3::dateType_pskel& /* recordChangeDate */,
               ::mods::v3::recordIdentifier_pskel& /* recordIdentifier */,
               ::mods::v3::languageType_pskel& /* languageOfCataloging */,
               ::xml_schema::any_type_pskel& /* recordOrigin */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      recordInfoType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::sourceType_pskel* recordContentSource_parser_;
      ::mods::v3::dateType_pskel* recordCreationDate_parser_;
      ::mods::v3::dateType_pskel* recordChangeDate_parser_;
      ::mods::v3::recordIdentifier_pskel* recordIdentifier_parser_;
      ::mods::v3::languageType_pskel* languageOfCataloging_parser_;
      ::xml_schema::any_type_pskel* recordOrigin_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::recordInfoType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class unstructuredText_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      type (const ::std::string&);

      virtual void
      href (const ::std::string&);

      virtual void
      role (const ::std::string&);

      virtual void
      arcrole (const ::std::string&);

      virtual void
      title (const ::std::string&);

      virtual void
      show ();

      virtual void
      actuate ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      displayLabel (const ::std::string&);

      virtual void
      type1 (const ::std::string&);

      virtual void
      post_unstructuredText ();

      // Parser construction API.
      //
      void
      type_parser (::xml_schema::string_pskel&);

      void
      href_parser (::xml_schema::uri_pskel&);

      void
      role_parser (::xml_schema::string_pskel&);

      void
      arcrole_parser (::xml_schema::string_pskel&);

      void
      title_parser (::xml_schema::string_pskel&);

      void
      show_parser (::xlink::show_pskel&);

      void
      actuate_parser (::xlink::actuate_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      displayLabel_parser (::xml_schema::string_pskel&);

      void
      type_parser1 (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* type */,
               ::xml_schema::uri_pskel& /* href */,
               ::xml_schema::string_pskel& /* role */,
               ::xml_schema::string_pskel& /* arcrole */,
               ::xml_schema::string_pskel& /* title */,
               ::xlink::show_pskel& /* show */,
               ::xlink::actuate_pskel& /* actuate */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */,
               ::xml_schema::string_pskel& /* displayLabel */,
               ::xml_schema::string_pskel& /* type */);

      // Constructor.
      //
      unstructuredText_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::string_pskel* type_parser_;
      ::xml_schema::uri_pskel* href_parser_;
      ::xml_schema::string_pskel* role_parser_;
      ::xml_schema::string_pskel* arcrole_parser_;
      ::xml_schema::string_pskel* title_parser_;
      ::xlink::show_pskel* show_parser_;
      ::xlink::actuate_pskel* actuate_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;
      ::xml_schema::string_pskel* displayLabel_parser_;
      ::xml_schema::string_pskel* type1_parser_;
    };

    class baseDateType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      encoding ();

      virtual void
      qualifier ();

      virtual void
      point ();

      virtual void
      post_baseDateType ();

      // Parser construction API.
      //
      void
      encoding_parser (::mods::v3::encoding_pskel&);

      void
      qualifier_parser (::mods::v3::qualifier_pskel&);

      void
      point_parser (::mods::v3::point_pskel&);

      void
      parsers (::mods::v3::encoding_pskel& /* encoding */,
               ::mods::v3::qualifier_pskel& /* qualifier */,
               ::mods::v3::point_pskel& /* point */);

      // Constructor.
      //
      baseDateType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::encoding_pskel* encoding_parser_;
      ::mods::v3::qualifier_pskel* qualifier_parser_;
      ::mods::v3::point_pskel* point_parser_;
    };

    class dateType_pskel: public virtual ::mods::v3::baseDateType_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      keyDate ();

      virtual void
      post_dateType ();

      // Parser construction API.
      //
      void
      keyDate_parser (::mods::v3::keyDate_pskel&);

      void
      parsers (::mods::v3::encoding_pskel& /* encoding */,
               ::mods::v3::qualifier_pskel& /* qualifier */,
               ::mods::v3::point_pskel& /* point */,
               ::mods::v3::keyDate_pskel& /* keyDate */);

      // Constructor.
      //
      dateType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::keyDate_pskel* keyDate_parser_;
    };

    class sourceType_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      lang ();

      virtual void
      lang1 (const ::std::string&);

      virtual void
      script ();

      virtual void
      transliteration ();

      virtual void
      post_sourceType ();

      // Parser construction API.
      //
      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser (::xml_schema::any_simple_type_pskel&);

      void
      lang_parser1 (::xml_schema::language_pskel&);

      void
      script_parser (::xml_schema::any_simple_type_pskel&);

      void
      transliteration_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* authority */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */);

      // Constructor.
      //
      sourceType_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* authority_parser_;
      ::xml_schema::any_simple_type_pskel* lang_parser_;
      ::xml_schema::language_pskel* lang1_parser_;
      ::xml_schema::any_simple_type_pskel* script_parser_;
      ::xml_schema::any_simple_type_pskel* transliteration_parser_;
    };

    class codeOrText_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_codeOrText ();
    };

    class placeAuthority_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_placeAuthority ();
    };

    class modsCollection_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      mods ();

      virtual void
      post_modsCollection ();

      // Parser construction API.
      //
      void
      mods_parser (::mods::v3::modsType_pskel&);

      void
      parsers (::mods::v3::modsType_pskel& /* mods */);

      // Constructor.
      //
      modsCollection_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::mods::v3::modsType_pskel* mods_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::modsCollection_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class version_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_version ();
    };

    class type_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_type ();
    };

    class type1_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_type1 ();
    };

    class type2_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_type2 ();
    };

    class roleTerm_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      type ();

      virtual void
      post_roleTerm ();

      // Parser construction API.
      //
      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      type_parser (::mods::v3::codeOrText_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* authority */,
               ::mods::v3::codeOrText_pskel& /* type */);

      // Constructor.
      //
      roleTerm_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* authority_parser_;
      ::mods::v3::codeOrText_pskel* type_parser_;
    };

    class collection_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_collection ();
    };

    class manuscript_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_manuscript ();
    };

    class issuance_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_issuance ();
    };

    class languageTerm_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      type ();

      virtual void
      post_languageTerm ();

      // Parser construction API.
      //
      void
      authority_parser (::mods::v3::authority_pskel&);

      void
      type_parser (::mods::v3::codeOrText_pskel&);

      void
      parsers (::mods::v3::authority_pskel& /* authority */,
               ::mods::v3::codeOrText_pskel& /* type */);

      // Constructor.
      //
      languageTerm_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::authority_pskel* authority_parser_;
      ::mods::v3::codeOrText_pskel* type_parser_;
    };

    class form_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      post_form ();

      // Parser construction API.
      //
      void
      authority_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* authority */);

      // Constructor.
      //
      form_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* authority_parser_;
    };

    class reformattingQuality_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_reformattingQuality ();
    };

    class digitalOrigin_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_digitalOrigin ();
    };

    class geographicCode_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      authority ();

      virtual void
      post_geographicCode ();

      // Parser construction API.
      //
      void
      authority_parser (::mods::v3::placeAuthority_pskel&);

      void
      parsers (::mods::v3::placeAuthority_pskel& /* authority */);

      // Constructor.
      //
      geographicCode_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::mods::v3::placeAuthority_pskel* authority_parser_;
    };

    class hierarchicalGeographic_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      continent ();

      virtual void
      country ();

      virtual void
      province ();

      virtual void
      region ();

      virtual void
      state ();

      virtual void
      territory ();

      virtual void
      county ();

      virtual void
      city ();

      virtual void
      island ();

      virtual void
      area ();

      virtual void
      post_hierarchicalGeographic ();

      // Parser construction API.
      //
      void
      continent_parser (::xml_schema::any_type_pskel&);

      void
      country_parser (::xml_schema::any_type_pskel&);

      void
      province_parser (::xml_schema::any_type_pskel&);

      void
      region_parser (::xml_schema::any_type_pskel&);

      void
      state_parser (::xml_schema::any_type_pskel&);

      void
      territory_parser (::xml_schema::any_type_pskel&);

      void
      county_parser (::xml_schema::any_type_pskel&);

      void
      city_parser (::xml_schema::any_type_pskel&);

      void
      island_parser (::xml_schema::any_type_pskel&);

      void
      area_parser (::xml_schema::any_type_pskel&);

      void
      parsers (::xml_schema::any_type_pskel& /* continent */,
               ::xml_schema::any_type_pskel& /* country */,
               ::xml_schema::any_type_pskel& /* province */,
               ::xml_schema::any_type_pskel& /* region */,
               ::xml_schema::any_type_pskel& /* state */,
               ::xml_schema::any_type_pskel& /* territory */,
               ::xml_schema::any_type_pskel& /* county */,
               ::xml_schema::any_type_pskel& /* city */,
               ::xml_schema::any_type_pskel& /* island */,
               ::xml_schema::any_type_pskel& /* area */);

      // Constructor.
      //
      hierarchicalGeographic_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::any_type_pskel* continent_parser_;
      ::xml_schema::any_type_pskel* country_parser_;
      ::xml_schema::any_type_pskel* province_parser_;
      ::xml_schema::any_type_pskel* region_parser_;
      ::xml_schema::any_type_pskel* state_parser_;
      ::xml_schema::any_type_pskel* territory_parser_;
      ::xml_schema::any_type_pskel* county_parser_;
      ::xml_schema::any_type_pskel* city_parser_;
      ::xml_schema::any_type_pskel* island_parser_;
      ::xml_schema::any_type_pskel* area_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::hierarchicalGeographic_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      choice_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
    };

    class cartographics_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      scale ();

      virtual void
      projection ();

      virtual void
      coordinates ();

      virtual void
      post_cartographics ();

      // Parser construction API.
      //
      void
      scale_parser (::xml_schema::any_type_pskel&);

      void
      projection_parser (::xml_schema::any_type_pskel&);

      void
      coordinates_parser (::xml_schema::any_type_pskel&);

      void
      parsers (::xml_schema::any_type_pskel& /* scale */,
               ::xml_schema::any_type_pskel& /* projection */,
               ::xml_schema::any_type_pskel& /* coordinates */);

      // Constructor.
      //
      cartographics_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::any_type_pskel* scale_parser_;
      ::xml_schema::any_type_pskel* projection_parser_;
      ::xml_schema::any_type_pskel* coordinates_parser_;

      protected:
      struct v_state_descr_
      {
        void (::mods::v3::cartographics_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string&,
          const ::xml_schema::ro_string*,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      v_state_ v_state_first_;
      ::xsd::cxx::parser::pod_stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long& state,
                  unsigned long& count,
                  const ::xml_schema::ro_string& ns,
                  const ::xml_schema::ro_string& n,
                  const ::xml_schema::ro_string* t,
                  bool start);
    };

    class type3_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_type3 ();
    };

    class invalid_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_invalid ();
    };

    class physicalLocation_pskel: public virtual ::mods::v3::sourceType_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      displayLabel ();

      virtual void
      post_physicalLocation ();

      // Parser construction API.
      //
      void
      displayLabel_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* authority */,
               ::xml_schema::any_simple_type_pskel& /* lang */,
               ::xml_schema::language_pskel& /* lang */,
               ::xml_schema::any_simple_type_pskel& /* script */,
               ::xml_schema::any_simple_type_pskel& /* transliteration */,
               ::xml_schema::any_simple_type_pskel& /* displayLabel */);

      // Constructor.
      //
      physicalLocation_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* displayLabel_parser_;
    };

    class url_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      dateLastAccessed ();

      virtual void
      displayLabel ();

      virtual void
      post_url ();

      // Parser construction API.
      //
      void
      dateLastAccessed_parser (::xml_schema::any_simple_type_pskel&);

      void
      displayLabel_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* dateLastAccessed */,
               ::xml_schema::any_simple_type_pskel& /* displayLabel */);

      // Constructor.
      //
      url_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* dateLastAccessed_parser_;
      ::xml_schema::any_simple_type_pskel* displayLabel_parser_;
    };

    class recordIdentifier_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      source ();

      virtual void
      post_recordIdentifier ();

      // Parser construction API.
      //
      void
      source_parser (::xml_schema::any_simple_type_pskel&);

      void
      parsers (::xml_schema::any_simple_type_pskel& /* source */);

      // Constructor.
      //
      recordIdentifier_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&,
                                 const ::xml_schema::ro_string&);


      protected:
      ::xml_schema::any_simple_type_pskel* source_parser_;
    };

    class encoding_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_encoding ();
    };

    class qualifier_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_qualifier ();
    };

    class point_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_point ();
    };

    class keyDate_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_keyDate ();
    };

    class authority_pskel: public virtual ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_authority ();
    };
  }
}

#include "mods-3-0-pskel.ixx"
#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_________DATA_SCHEMAS_MODS_3_0_PSKEL_HXX
