// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "mets-pimpl.hxx"

namespace METS
{
  // metsType_pimpl
  //

  void metsType_pimpl::
  pre ()
  {
  }

  void metsType_pimpl::
  metsHdr ()
  {
  }

  void metsType_pimpl::
  dmdSec ()
  {
  }

  void metsType_pimpl::
  amdSec ()
  {
  }

  void metsType_pimpl::
  fileSec ()
  {
  }

  void metsType_pimpl::
  structMap ()
  {
  }

  void metsType_pimpl::
  structLink ()
  {
  }

  void metsType_pimpl::
  behaviorSec ()
  {
  }

  void metsType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void metsType_pimpl::
  OBJID (const ::std::string& OBJID)
  {
    // TODO
    //
  }

  void metsType_pimpl::
  LABEL (const ::std::string& LABEL)
  {
    // TODO
    //
  }

  void metsType_pimpl::
  TYPE (const ::std::string& TYPE)
  {
    // TODO
    //
  }

  void metsType_pimpl::
  PROFILE (const ::std::string& PROFILE)
  {
    // TODO
    //
  }

  void metsType_pimpl::
  post_metsType ()
  {
  }

  // amdSecType_pimpl
  //

  void amdSecType_pimpl::
  pre ()
  {
  }

  void amdSecType_pimpl::
  techMD ()
  {
  }

  void amdSecType_pimpl::
  rightsMD ()
  {
  }

  void amdSecType_pimpl::
  sourceMD ()
  {
  }

  void amdSecType_pimpl::
  digiprovMD ()
  {
  }

  void amdSecType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void amdSecType_pimpl::
  post_amdSecType ()
  {
  }

  // fileGrpType_pimpl
  //

  void fileGrpType_pimpl::
  pre ()
  {
  }

  void fileGrpType_pimpl::
  fileGrp ()
  {
  }

  void fileGrpType_pimpl::
  file ()
  {
  }

  void fileGrpType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void fileGrpType_pimpl::
  VERSDATE (const ::xml_schema::date_time& VERSDATE)
  {
    // TODO
    //
  }

  void fileGrpType_pimpl::
  ADMID (const ::xml_schema::string_sequence& ADMID)
  {
    // TODO
    //
  }

  void fileGrpType_pimpl::
  USE (const ::std::string& USE)
  {
    // TODO
    //
  }

  void fileGrpType_pimpl::
  post_fileGrpType ()
  {
  }

  // structMapType_pimpl
  //

  void structMapType_pimpl::
  pre ()
  {
  }

  void structMapType_pimpl::
  div ()
  {
  }

  void structMapType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void structMapType_pimpl::
  TYPE (const ::std::string& TYPE)
  {
    // TODO
    //
  }

  void structMapType_pimpl::
  LABEL (const ::std::string& LABEL)
  {
    // TODO
    //
  }

  void structMapType_pimpl::
  post_structMapType ()
  {
  }

  // divType_pimpl
  //

  void divType_pimpl::
  pre ()
  {
  }

  void divType_pimpl::
  mptr ()
  {
  }

  void divType_pimpl::
  fptr ()
  {
  }

  void divType_pimpl::
  div ()
  {
  }

  void divType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void divType_pimpl::
  ORDER (long long ORDER)
  {
    // TODO
    //
  }

  void divType_pimpl::
  ORDERLABEL (const ::std::string& ORDERLABEL)
  {
    // TODO
    //
  }

  void divType_pimpl::
  LABEL (const ::std::string& LABEL)
  {
    // TODO
    //
  }

  void divType_pimpl::
  DMDID (const ::xml_schema::string_sequence& DMDID)
  {
    // TODO
    //
  }

  void divType_pimpl::
  ADMID (const ::xml_schema::string_sequence& ADMID)
  {
    // TODO
    //
  }

  void divType_pimpl::
  TYPE (const ::std::string& TYPE)
  {
    // TODO
    //
  }

  void divType_pimpl::
  post_divType ()
  {
  }

  // seqType_pimpl
  //

  void seqType_pimpl::
  pre ()
  {
  }

  void seqType_pimpl::
  area ()
  {
  }

  void seqType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void seqType_pimpl::
  post_seqType ()
  {
  }

  // areaType_pimpl
  //

  void areaType_pimpl::
  pre ()
  {
  }

  void areaType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void areaType_pimpl::
  FILEID (const ::std::string& FILEID)
  {
    // TODO
    //
  }

  void areaType_pimpl::
  SHAPE ()
  {
  }

  void areaType_pimpl::
  COORDS (const ::std::string& COORDS)
  {
    // TODO
    //
  }

  void areaType_pimpl::
  BEGIN (const ::std::string& BEGIN)
  {
    // TODO
    //
  }

  void areaType_pimpl::
  END (const ::std::string& END)
  {
    // TODO
    //
  }

  void areaType_pimpl::
  BETYPE ()
  {
  }

  void areaType_pimpl::
  EXTENT (const ::std::string& EXTENT)
  {
    // TODO
    //
  }

  void areaType_pimpl::
  EXTTYPE ()
  {
  }

  void areaType_pimpl::
  ADMID (const ::xml_schema::string_sequence& ADMID)
  {
    // TODO
    //
  }

  void areaType_pimpl::
  post_areaType ()
  {
  }

  // structLinkType_pimpl
  //

  void structLinkType_pimpl::
  pre ()
  {
  }

  void structLinkType_pimpl::
  smLink ()
  {
  }

  void structLinkType_pimpl::
  post_structLinkType ()
  {
  }

  // behaviorSecType_pimpl
  //

  void behaviorSecType_pimpl::
  pre ()
  {
  }

  void behaviorSecType_pimpl::
  behaviorSec ()
  {
  }

  void behaviorSecType_pimpl::
  behavior ()
  {
  }

  void behaviorSecType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void behaviorSecType_pimpl::
  CREATED (const ::xml_schema::date_time& CREATED)
  {
    // TODO
    //
  }

  void behaviorSecType_pimpl::
  LABEL (const ::std::string& LABEL)
  {
    // TODO
    //
  }

  void behaviorSecType_pimpl::
  post_behaviorSecType ()
  {
  }

  // behaviorType_pimpl
  //

  void behaviorType_pimpl::
  pre ()
  {
  }

  void behaviorType_pimpl::
  interfaceDef ()
  {
  }

  void behaviorType_pimpl::
  mechanism ()
  {
  }

  void behaviorType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void behaviorType_pimpl::
  STRUCTID (const ::xml_schema::string_sequence& STRUCTID)
  {
    // TODO
    //
  }

  void behaviorType_pimpl::
  BTYPE (const ::std::string& BTYPE)
  {
    // TODO
    //
  }

  void behaviorType_pimpl::
  CREATED (const ::xml_schema::date_time& CREATED)
  {
    // TODO
    //
  }

  void behaviorType_pimpl::
  LABEL (const ::std::string& LABEL)
  {
    // TODO
    //
  }

  void behaviorType_pimpl::
  GROUPID (const ::std::string& GROUPID)
  {
    // TODO
    //
  }

  void behaviorType_pimpl::
  ADMID (const ::xml_schema::string_sequence& ADMID)
  {
    // TODO
    //
  }

  void behaviorType_pimpl::
  post_behaviorType ()
  {
  }

  // objectType_pimpl
  //

  void objectType_pimpl::
  pre ()
  {
  }

  void objectType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void objectType_pimpl::
  LABEL (const ::std::string& LABEL)
  {
    // TODO
    //
  }

  void objectType_pimpl::
  LOCTYPE ()
  {
  }

  void objectType_pimpl::
  OTHERLOCTYPE (const ::std::string& OTHERLOCTYPE)
  {
    // TODO
    //
  }

  void objectType_pimpl::
  type (const ::std::string& type)
  {
    // TODO
    //
  }

  void objectType_pimpl::
  href (const ::std::string& href)
  {
    // TODO
    //
  }

  void objectType_pimpl::
  role (const ::std::string& role)
  {
    // TODO
    //
  }

  void objectType_pimpl::
  arcrole (const ::std::string& arcrole)
  {
    // TODO
    //
  }

  void objectType_pimpl::
  title (const ::std::string& title)
  {
    // TODO
    //
  }

  void objectType_pimpl::
  show ()
  {
  }

  void objectType_pimpl::
  actuate ()
  {
  }

  void objectType_pimpl::
  post_objectType ()
  {
  }

  // mdSecType_pimpl
  //

  void mdSecType_pimpl::
  pre ()
  {
  }

  void mdSecType_pimpl::
  mdRef ()
  {
  }

  void mdSecType_pimpl::
  mdWrap ()
  {
  }

  void mdSecType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void mdSecType_pimpl::
  GROUPID (const ::std::string& GROUPID)
  {
    // TODO
    //
  }

  void mdSecType_pimpl::
  ADMID (const ::xml_schema::string_sequence& ADMID)
  {
    // TODO
    //
  }

  void mdSecType_pimpl::
  CREATED (const ::xml_schema::date_time& CREATED)
  {
    // TODO
    //
  }

  void mdSecType_pimpl::
  STATUS (const ::std::string& STATUS)
  {
    // TODO
    //
  }

  void mdSecType_pimpl::
  post_mdSecType ()
  {
  }

  // mets_pimpl
  //

  void mets_pimpl::
  pre ()
  {
  }

  void mets_pimpl::
  post_mets ()
  {
    post_metsType ();
  }

  // metsHdr_pimpl
  //

  void metsHdr_pimpl::
  pre ()
  {
  }

  void metsHdr_pimpl::
  agent ()
  {
  }

  void metsHdr_pimpl::
  altRecordID ()
  {
  }

  void metsHdr_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void metsHdr_pimpl::
  CREATEDATE (const ::xml_schema::date_time& CREATEDATE)
  {
    // TODO
    //
  }

  void metsHdr_pimpl::
  LASTMODDATE (const ::xml_schema::date_time& LASTMODDATE)
  {
    // TODO
    //
  }

  void metsHdr_pimpl::
  RECORDSTATUS (const ::std::string& RECORDSTATUS)
  {
    // TODO
    //
  }

  void metsHdr_pimpl::
  post_metsHdr ()
  {
  }

  // fileSec_pimpl
  //

  void fileSec_pimpl::
  pre ()
  {
  }

  void fileSec_pimpl::
  fileGrp ()
  {
  }

  void fileSec_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void fileSec_pimpl::
  post_fileSec ()
  {
  }

  // file_pimpl
  //

  void file_pimpl::
  pre ()
  {
  }

  void file_pimpl::
  FLocat ()
  {
  }

  void file_pimpl::
  FContent ()
  {
  }

  void file_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void file_pimpl::
  MIMETYPE (const ::std::string& MIMETYPE)
  {
    // TODO
    //
  }

  void file_pimpl::
  SEQ (int SEQ)
  {
    // TODO
    //
  }

  void file_pimpl::
  SIZE (long long SIZE)
  {
    // TODO
    //
  }

  void file_pimpl::
  CREATED (const ::xml_schema::date_time& CREATED)
  {
    // TODO
    //
  }

  void file_pimpl::
  CHECKSUM (const ::std::string& CHECKSUM)
  {
    // TODO
    //
  }

  void file_pimpl::
  CHECKSUMTYPE ()
  {
  }

  void file_pimpl::
  OWNERID (const ::std::string& OWNERID)
  {
    // TODO
    //
  }

  void file_pimpl::
  ADMID (const ::xml_schema::string_sequence& ADMID)
  {
    // TODO
    //
  }

  void file_pimpl::
  DMDID (const ::xml_schema::string_sequence& DMDID)
  {
    // TODO
    //
  }

  void file_pimpl::
  GROUPID (const ::std::string& GROUPID)
  {
    // TODO
    //
  }

  void file_pimpl::
  USE (const ::std::string& USE)
  {
    // TODO
    //
  }

  void file_pimpl::
  post_file ()
  {
  }

  // mptr_pimpl
  //

  void mptr_pimpl::
  pre ()
  {
  }

  void mptr_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void mptr_pimpl::
  LOCTYPE ()
  {
  }

  void mptr_pimpl::
  OTHERLOCTYPE (const ::std::string& OTHERLOCTYPE)
  {
    // TODO
    //
  }

  void mptr_pimpl::
  type (const ::std::string& type)
  {
    // TODO
    //
  }

  void mptr_pimpl::
  href (const ::std::string& href)
  {
    // TODO
    //
  }

  void mptr_pimpl::
  role (const ::std::string& role)
  {
    // TODO
    //
  }

  void mptr_pimpl::
  arcrole (const ::std::string& arcrole)
  {
    // TODO
    //
  }

  void mptr_pimpl::
  title (const ::std::string& title)
  {
    // TODO
    //
  }

  void mptr_pimpl::
  show ()
  {
  }

  void mptr_pimpl::
  actuate ()
  {
  }

  void mptr_pimpl::
  post_mptr ()
  {
  }

  // fptr_pimpl
  //

  void fptr_pimpl::
  pre ()
  {
  }

  void fptr_pimpl::
  par ()
  {
  }

  void fptr_pimpl::
  seq ()
  {
  }

  void fptr_pimpl::
  area ()
  {
  }

  void fptr_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void fptr_pimpl::
  FILEID (const ::std::string& FILEID)
  {
    // TODO
    //
  }

  void fptr_pimpl::
  post_fptr ()
  {
  }

  // SHAPE_pimpl
  //

  void SHAPE_pimpl::
  pre ()
  {
  }

  void SHAPE_pimpl::
  post_SHAPE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // BETYPE_pimpl
  //

  void BETYPE_pimpl::
  pre ()
  {
  }

  void BETYPE_pimpl::
  post_BETYPE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // EXTTYPE_pimpl
  //

  void EXTTYPE_pimpl::
  pre ()
  {
  }

  void EXTTYPE_pimpl::
  post_EXTTYPE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // smLink_pimpl
  //

  void smLink_pimpl::
  pre ()
  {
  }

  void smLink_pimpl::
  arcrole (const ::std::string& arcrole)
  {
    // TODO
    //
  }

  void smLink_pimpl::
  title (const ::std::string& title)
  {
    // TODO
    //
  }

  void smLink_pimpl::
  show ()
  {
  }

  void smLink_pimpl::
  actuate ()
  {
  }

  void smLink_pimpl::
  to (const ::std::string& to)
  {
    // TODO
    //
  }

  void smLink_pimpl::
  from (const ::std::string& from)
  {
    // TODO
    //
  }

  void smLink_pimpl::
  post_smLink ()
  {
  }

  // mdRef_pimpl
  //

  void mdRef_pimpl::
  pre ()
  {
  }

  void mdRef_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  LOCTYPE ()
  {
  }

  void mdRef_pimpl::
  OTHERLOCTYPE (const ::std::string& OTHERLOCTYPE)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  type (const ::std::string& type)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  href (const ::std::string& href)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  role (const ::std::string& role)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  arcrole (const ::std::string& arcrole)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  title (const ::std::string& title)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  show ()
  {
  }

  void mdRef_pimpl::
  actuate ()
  {
  }

  void mdRef_pimpl::
  MDTYPE ()
  {
  }

  void mdRef_pimpl::
  OTHERMDTYPE (const ::std::string& OTHERMDTYPE)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  MIMETYPE (const ::std::string& MIMETYPE)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  LABEL (const ::std::string& LABEL)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  XPTR (const ::std::string& XPTR)
  {
    // TODO
    //
  }

  void mdRef_pimpl::
  post_mdRef ()
  {
  }

  // mdWrap_pimpl
  //

  void mdWrap_pimpl::
  pre ()
  {
  }

  void mdWrap_pimpl::
  binData (::std::auto_ptr< ::xml_schema::buffer > binData)
  {
    // TODO
    //
  }

  void mdWrap_pimpl::
  xmlData ()
  {
  }

  void mdWrap_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void mdWrap_pimpl::
  MIMETYPE (const ::std::string& MIMETYPE)
  {
    // TODO
    //
  }

  void mdWrap_pimpl::
  MDTYPE ()
  {
  }

  void mdWrap_pimpl::
  OTHERMDTYPE (const ::std::string& OTHERMDTYPE)
  {
    // TODO
    //
  }

  void mdWrap_pimpl::
  LABEL (const ::std::string& LABEL)
  {
    // TODO
    //
  }

  void mdWrap_pimpl::
  post_mdWrap ()
  {
  }

  // MDTYPE_pimpl
  //

  void MDTYPE_pimpl::
  pre ()
  {
  }

  void MDTYPE_pimpl::
  post_MDTYPE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // LOCTYPE_pimpl
  //

  void LOCTYPE_pimpl::
  pre ()
  {
  }

  void LOCTYPE_pimpl::
  post_LOCTYPE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // agent_pimpl
  //

  void agent_pimpl::
  pre ()
  {
  }

  void agent_pimpl::
  name (const ::std::string& name)
  {
    // TODO
    //
  }

  void agent_pimpl::
  note (const ::std::string& note)
  {
    // TODO
    //
  }

  void agent_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void agent_pimpl::
  ROLE ()
  {
  }

  void agent_pimpl::
  OTHERROLE (const ::std::string& OTHERROLE)
  {
    // TODO
    //
  }

  void agent_pimpl::
  TYPE ()
  {
  }

  void agent_pimpl::
  OTHERTYPE (const ::std::string& OTHERTYPE)
  {
    // TODO
    //
  }

  void agent_pimpl::
  post_agent ()
  {
  }

  // altRecordID_pimpl
  //

  void altRecordID_pimpl::
  pre ()
  {
  }

  void altRecordID_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void altRecordID_pimpl::
  TYPE (const ::std::string& TYPE)
  {
    // TODO
    //
  }

  void altRecordID_pimpl::
  post_altRecordID ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // fileGrp_pimpl
  //

  void fileGrp_pimpl::
  pre ()
  {
  }

  void fileGrp_pimpl::
  post_fileGrp ()
  {
    post_fileGrpType ();
  }

  // FLocat_pimpl
  //

  void FLocat_pimpl::
  pre ()
  {
  }

  void FLocat_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void FLocat_pimpl::
  LOCTYPE ()
  {
  }

  void FLocat_pimpl::
  OTHERLOCTYPE (const ::std::string& OTHERLOCTYPE)
  {
    // TODO
    //
  }

  void FLocat_pimpl::
  USE (const ::std::string& USE)
  {
    // TODO
    //
  }

  void FLocat_pimpl::
  type (const ::std::string& type)
  {
    // TODO
    //
  }

  void FLocat_pimpl::
  href (const ::std::string& href)
  {
    // TODO
    //
  }

  void FLocat_pimpl::
  role (const ::std::string& role)
  {
    // TODO
    //
  }

  void FLocat_pimpl::
  arcrole (const ::std::string& arcrole)
  {
    // TODO
    //
  }

  void FLocat_pimpl::
  title (const ::std::string& title)
  {
    // TODO
    //
  }

  void FLocat_pimpl::
  show ()
  {
  }

  void FLocat_pimpl::
  actuate ()
  {
  }

  void FLocat_pimpl::
  post_FLocat ()
  {
  }

  // FContent_pimpl
  //

  void FContent_pimpl::
  pre ()
  {
  }

  void FContent_pimpl::
  binData (::std::auto_ptr< ::xml_schema::buffer > binData)
  {
    // TODO
    //
  }

  void FContent_pimpl::
  xmlData ()
  {
  }

  void FContent_pimpl::
  USE (const ::std::string& USE)
  {
    // TODO
    //
  }

  void FContent_pimpl::
  post_FContent ()
  {
  }

  // CHECKSUMTYPE_pimpl
  //

  void CHECKSUMTYPE_pimpl::
  pre ()
  {
  }

  void CHECKSUMTYPE_pimpl::
  post_CHECKSUMTYPE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // par_pimpl
  //

  void par_pimpl::
  pre ()
  {
  }

  void par_pimpl::
  area ()
  {
  }

  void par_pimpl::
  seq ()
  {
  }

  void par_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void par_pimpl::
  post_par ()
  {
  }

  // xmlData_pimpl
  //

  void xmlData_pimpl::
  pre ()
  {
  }

  void xmlData_pimpl::
  post_xmlData ()
  {
  }

  // ROLE_pimpl
  //

  void ROLE_pimpl::
  pre ()
  {
  }

  void ROLE_pimpl::
  post_ROLE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // TYPE_pimpl
  //

  void TYPE_pimpl::
  pre ()
  {
  }

  void TYPE_pimpl::
  post_TYPE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // xmlData1_pimpl
  //

  void xmlData1_pimpl::
  pre ()
  {
  }

  void xmlData1_pimpl::
  post_xmlData1 ()
  {
  }
}

