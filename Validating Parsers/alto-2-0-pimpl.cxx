// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "alto-2-0-pimpl.hxx"

namespace alto
{
  // BlockType_pimpl
  //

  void BlockType_pimpl::
  pre ()
  {
  }

  void BlockType_pimpl::
  Shape ()
  {
  }

  void BlockType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  STYLEREFS (const ::xml_schema::string_sequence& STYLEREFS)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  HEIGHT (int HEIGHT)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  WIDTH (int WIDTH)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  HPOS (int HPOS)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  VPOS (int VPOS)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  ROTATION (float ROTATION)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  IDNEXT (const ::std::string& IDNEXT)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  type (const ::std::string& type)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  href (const ::std::string& href)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  role (const ::std::string& role)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  arcrole (const ::std::string& arcrole)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  title (const ::std::string& title)
  {
    // TODO
    //
  }

  void BlockType_pimpl::
  show ()
  {
  }

  void BlockType_pimpl::
  actuate ()
  {
  }

  void BlockType_pimpl::
  post_BlockType ()
  {
  }

  // StringType_pimpl
  //

  void StringType_pimpl::
  pre ()
  {
  }

  void StringType_pimpl::
  ALTERNATIVE ()
  {
  }

  void StringType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void StringType_pimpl::
  STYLEREFS (const ::xml_schema::string_sequence& STYLEREFS)
  {
    // TODO
    //
  }

  void StringType_pimpl::
  HEIGHT (float HEIGHT)
  {
    // TODO
    //
  }

  void StringType_pimpl::
  WIDTH (float WIDTH)
  {
    // TODO
    //
  }

  void StringType_pimpl::
  HPOS (float HPOS)
  {
    // TODO
    //
  }

  void StringType_pimpl::
  VPOS (float VPOS)
  {
    // TODO
    //
  }

  void StringType_pimpl::
  CONTENT ()
  {
  }

  void StringType_pimpl::
  STYLE ()
  {
  }

  void StringType_pimpl::
  SUBS_TYPE ()
  {
  }

  void StringType_pimpl::
  SUBS_CONTENT (const ::std::string& SUBS_CONTENT)
  {
    // TODO
    //
  }

  void StringType_pimpl::
  WC ()
  {
  }

  void StringType_pimpl::
  CC (const ::std::string& CC)
  {
    // TODO
    //
  }

  void StringType_pimpl::
  post_StringType ()
  {
  }

  // PageSpaceType_pimpl
  //

  void PageSpaceType_pimpl::
  pre ()
  {
  }

  void PageSpaceType_pimpl::
  TextBlock ()
  {
  }

  void PageSpaceType_pimpl::
  Illustration ()
  {
  }

  void PageSpaceType_pimpl::
  GraphicalElement ()
  {
  }

  void PageSpaceType_pimpl::
  ComposedBlock ()
  {
  }

  void PageSpaceType_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void PageSpaceType_pimpl::
  STYLEREFS (const ::xml_schema::string_sequence& STYLEREFS)
  {
    // TODO
    //
  }

  void PageSpaceType_pimpl::
  HEIGHT (float HEIGHT)
  {
    // TODO
    //
  }

  void PageSpaceType_pimpl::
  WIDTH (float WIDTH)
  {
    // TODO
    //
  }

  void PageSpaceType_pimpl::
  HPOS (float HPOS)
  {
    // TODO
    //
  }

  void PageSpaceType_pimpl::
  VPOS (float VPOS)
  {
    // TODO
    //
  }

  void PageSpaceType_pimpl::
  post_PageSpaceType ()
  {
  }

  // PointsType_pimpl
  //

  void PointsType_pimpl::
  pre ()
  {
  }

  void PointsType_pimpl::
  post_PointsType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // ShapeType_pimpl
  //

  void ShapeType_pimpl::
  pre ()
  {
  }

  void ShapeType_pimpl::
  Polygon ()
  {
  }

  void ShapeType_pimpl::
  Ellipse ()
  {
  }

  void ShapeType_pimpl::
  Circle ()
  {
  }

  void ShapeType_pimpl::
  post_ShapeType ()
  {
  }

  // PolygonType_pimpl
  //

  void PolygonType_pimpl::
  pre ()
  {
  }

  void PolygonType_pimpl::
  POINTS ()
  {
  }

  void PolygonType_pimpl::
  post_PolygonType ()
  {
  }

  // EllipseType_pimpl
  //

  void EllipseType_pimpl::
  pre ()
  {
  }

  void EllipseType_pimpl::
  HPOS ()
  {
  }

  void EllipseType_pimpl::
  VPOS ()
  {
  }

  void EllipseType_pimpl::
  HLENGTH ()
  {
  }

  void EllipseType_pimpl::
  VLENGTH ()
  {
  }

  void EllipseType_pimpl::
  post_EllipseType ()
  {
  }

  // CircleType_pimpl
  //

  void CircleType_pimpl::
  pre ()
  {
  }

  void CircleType_pimpl::
  HPOS ()
  {
  }

  void CircleType_pimpl::
  VPOS ()
  {
  }

  void CircleType_pimpl::
  RADIUS ()
  {
  }

  void CircleType_pimpl::
  post_CircleType ()
  {
  }

  // fontTypeType_pimpl
  //

  void fontTypeType_pimpl::
  pre ()
  {
  }

  void fontTypeType_pimpl::
  post_fontTypeType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // fontWidthType_pimpl
  //

  void fontWidthType_pimpl::
  pre ()
  {
  }

  void fontWidthType_pimpl::
  post_fontWidthType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // sourceImageInformationType_pimpl
  //

  void sourceImageInformationType_pimpl::
  pre ()
  {
  }

  void sourceImageInformationType_pimpl::
  fileName (const ::std::string& fileName)
  {
    // TODO
    //
  }

  void sourceImageInformationType_pimpl::
  fileIdentifier ()
  {
  }

  void sourceImageInformationType_pimpl::
  post_sourceImageInformationType ()
  {
  }

  // fileIdentifierType_pimpl
  //

  void fileIdentifierType_pimpl::
  pre ()
  {
  }

  void fileIdentifierType_pimpl::
  fileIdentifierLocation ()
  {
  }

  void fileIdentifierType_pimpl::
  post_fileIdentifierType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // ocrProcessingType_pimpl
  //

  void ocrProcessingType_pimpl::
  pre ()
  {
  }

  void ocrProcessingType_pimpl::
  preProcessingStep ()
  {
  }

  void ocrProcessingType_pimpl::
  ocrProcessingStep ()
  {
  }

  void ocrProcessingType_pimpl::
  postProcessingStep ()
  {
  }

  void ocrProcessingType_pimpl::
  post_ocrProcessingType ()
  {
  }

  // processingStepType_pimpl
  //

  void processingStepType_pimpl::
  pre ()
  {
  }

  void processingStepType_pimpl::
  processingDateTime ()
  {
  }

  void processingStepType_pimpl::
  processingAgency (const ::std::string& processingAgency)
  {
    // TODO
    //
  }

  void processingStepType_pimpl::
  processingStepDescription (const ::std::string& processingStepDescription)
  {
    // TODO
    //
  }

  void processingStepType_pimpl::
  processingStepSettings (const ::std::string& processingStepSettings)
  {
    // TODO
    //
  }

  void processingStepType_pimpl::
  processingSoftware ()
  {
  }

  void processingStepType_pimpl::
  post_processingStepType ()
  {
  }

  // processingSoftwareType_pimpl
  //

  void processingSoftwareType_pimpl::
  pre ()
  {
  }

  void processingSoftwareType_pimpl::
  softwareCreator (const ::std::string& softwareCreator)
  {
    // TODO
    //
  }

  void processingSoftwareType_pimpl::
  softwareName (const ::std::string& softwareName)
  {
    // TODO
    //
  }

  void processingSoftwareType_pimpl::
  softwareVersion (const ::std::string& softwareVersion)
  {
    // TODO
    //
  }

  void processingSoftwareType_pimpl::
  applicationDescription (const ::std::string& applicationDescription)
  {
    // TODO
    //
  }

  void processingSoftwareType_pimpl::
  post_processingSoftwareType ()
  {
  }

  // dateTimeType_pimpl
  //

  void dateTimeType_pimpl::
  pre ()
  {
  }

  void dateTimeType_pimpl::
  _characters (const ::xml_schema::ro_string& s)
  {
    // TODO
    //
  }

  void dateTimeType_pimpl::
  post_dateTimeType ()
  {
  }

  // fontStylesType_base_pimpl
  //

  void fontStylesType_base_pimpl::
  pre ()
  {
  }

  void fontStylesType_base_pimpl::
  item ()
  {
  }

  void fontStylesType_base_pimpl::
  post_fontStylesType_base ()
  {
  }

  // fontStylesType_pimpl
  //

  void fontStylesType_pimpl::
  pre ()
  {
  }

  void fontStylesType_pimpl::
  post_fontStylesType ()
  {
    post_fontStylesType_base ();
  }

  // ComposedBlockType_pimpl
  //

  void ComposedBlockType_pimpl::
  pre ()
  {
  }

  void ComposedBlockType_pimpl::
  TextBlock ()
  {
  }

  void ComposedBlockType_pimpl::
  Illustration ()
  {
  }

  void ComposedBlockType_pimpl::
  GraphicalElement ()
  {
  }

  void ComposedBlockType_pimpl::
  ComposedBlock ()
  {
  }

  void ComposedBlockType_pimpl::
  TYPE (const ::std::string& TYPE)
  {
    // TODO
    //
  }

  void ComposedBlockType_pimpl::
  FILEID (const ::std::string& FILEID)
  {
    // TODO
    //
  }

  void ComposedBlockType_pimpl::
  post_ComposedBlockType ()
  {
    post_BlockType ();
  }

  // IllustrationType_pimpl
  //

  void IllustrationType_pimpl::
  pre ()
  {
  }

  void IllustrationType_pimpl::
  TYPE (const ::std::string& TYPE)
  {
    // TODO
    //
  }

  void IllustrationType_pimpl::
  FILEID (const ::std::string& FILEID)
  {
    // TODO
    //
  }

  void IllustrationType_pimpl::
  post_IllustrationType ()
  {
    post_BlockType ();
  }

  // GraphicalElementType_pimpl
  //

  void GraphicalElementType_pimpl::
  pre ()
  {
  }

  void GraphicalElementType_pimpl::
  post_GraphicalElementType ()
  {
    post_BlockType ();
  }

  // TextBlockType_pimpl
  //

  void TextBlockType_pimpl::
  pre ()
  {
  }

  void TextBlockType_pimpl::
  TextLine ()
  {
  }

  void TextBlockType_pimpl::
  language (const ::std::string& language)
  {
    // TODO
    //
  }

  void TextBlockType_pimpl::
  post_TextBlockType ()
  {
    post_BlockType ();
  }

  // alto_pimpl
  //

  void alto_pimpl::
  pre ()
  {
  }

  void alto_pimpl::
  Description ()
  {
  }

  void alto_pimpl::
  Styles ()
  {
  }

  void alto_pimpl::
  Layout ()
  {
  }

  void alto_pimpl::
  post_alto ()
  {
  }

  // ALTERNATIVE_pimpl
  //

  void ALTERNATIVE_pimpl::
  pre ()
  {
  }

  void ALTERNATIVE_pimpl::
  PURPOSE (const ::std::string& PURPOSE)
  {
    // TODO
    //
  }

  void ALTERNATIVE_pimpl::
  post_ALTERNATIVE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // CONTENT_pimpl
  //

  void CONTENT_pimpl::
  pre ()
  {
  }

  void CONTENT_pimpl::
  post_CONTENT ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // SUBS_TYPE_pimpl
  //

  void SUBS_TYPE_pimpl::
  pre ()
  {
  }

  void SUBS_TYPE_pimpl::
  post_SUBS_TYPE ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // WC_pimpl
  //

  void WC_pimpl::
  pre ()
  {
  }

  void WC_pimpl::
  post_WC ()
  {
    float v (post_float ());

    // TODO
    //
  }

  // TextLine_pimpl
  //

  void TextLine_pimpl::
  pre ()
  {
  }

  void TextLine_pimpl::
  String ()
  {
  }

  void TextLine_pimpl::
  SP ()
  {
  }

  void TextLine_pimpl::
  HYP ()
  {
  }

  void TextLine_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void TextLine_pimpl::
  STYLEREFS (const ::xml_schema::string_sequence& STYLEREFS)
  {
    // TODO
    //
  }

  void TextLine_pimpl::
  HEIGHT (float HEIGHT)
  {
    // TODO
    //
  }

  void TextLine_pimpl::
  WIDTH (float WIDTH)
  {
    // TODO
    //
  }

  void TextLine_pimpl::
  HPOS (float HPOS)
  {
    // TODO
    //
  }

  void TextLine_pimpl::
  VPOS (float VPOS)
  {
    // TODO
    //
  }

  void TextLine_pimpl::
  BASELINE (float BASELINE)
  {
    // TODO
    //
  }

  void TextLine_pimpl::
  CS (bool CS)
  {
    // TODO
    //
  }

  void TextLine_pimpl::
  post_TextLine ()
  {
  }

  // Description_pimpl
  //

  void Description_pimpl::
  pre ()
  {
  }

  void Description_pimpl::
  MeasurementUnit ()
  {
  }

  void Description_pimpl::
  sourceImageInformation ()
  {
  }

  void Description_pimpl::
  OCRProcessing ()
  {
  }

  void Description_pimpl::
  post_Description ()
  {
  }

  // Styles_pimpl
  //

  void Styles_pimpl::
  pre ()
  {
  }

  void Styles_pimpl::
  TextStyle ()
  {
  }

  void Styles_pimpl::
  ParagraphStyle ()
  {
  }

  void Styles_pimpl::
  post_Styles ()
  {
  }

  // Layout_pimpl
  //

  void Layout_pimpl::
  pre ()
  {
  }

  void Layout_pimpl::
  Page ()
  {
  }

  void Layout_pimpl::
  STYLEREFS (const ::xml_schema::string_sequence& STYLEREFS)
  {
    // TODO
    //
  }

  void Layout_pimpl::
  post_Layout ()
  {
  }

  // fontStylesType_base_item_pimpl
  //

  void fontStylesType_base_item_pimpl::
  pre ()
  {
  }

  void fontStylesType_base_item_pimpl::
  post_fontStylesType_base_item ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // SP_pimpl
  //

  void SP_pimpl::
  pre ()
  {
  }

  void SP_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void SP_pimpl::
  WIDTH (float WIDTH)
  {
    // TODO
    //
  }

  void SP_pimpl::
  HPOS (float HPOS)
  {
    // TODO
    //
  }

  void SP_pimpl::
  VPOS (float VPOS)
  {
    // TODO
    //
  }

  void SP_pimpl::
  post_SP ()
  {
  }

  // HYP_pimpl
  //

  void HYP_pimpl::
  pre ()
  {
  }

  void HYP_pimpl::
  WIDTH (float WIDTH)
  {
    // TODO
    //
  }

  void HYP_pimpl::
  HPOS (float HPOS)
  {
    // TODO
    //
  }

  void HYP_pimpl::
  VPOS (float VPOS)
  {
    // TODO
    //
  }

  void HYP_pimpl::
  CONTENT ()
  {
  }

  void HYP_pimpl::
  post_HYP ()
  {
  }

  // MeasurementUnit_pimpl
  //

  void MeasurementUnit_pimpl::
  pre ()
  {
  }

  void MeasurementUnit_pimpl::
  post_MeasurementUnit ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // OCRProcessing_pimpl
  //

  void OCRProcessing_pimpl::
  pre ()
  {
  }

  void OCRProcessing_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void OCRProcessing_pimpl::
  post_OCRProcessing ()
  {
    post_ocrProcessingType ();
  }

  // TextStyle_pimpl
  //

  void TextStyle_pimpl::
  pre ()
  {
  }

  void TextStyle_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void TextStyle_pimpl::
  FONTFAMILY (const ::std::string& FONTFAMILY)
  {
    // TODO
    //
  }

  void TextStyle_pimpl::
  FONTTYPE ()
  {
  }

  void TextStyle_pimpl::
  FONTWIDTH ()
  {
  }

  void TextStyle_pimpl::
  FONTSIZE (float FONTSIZE)
  {
    // TODO
    //
  }

  void TextStyle_pimpl::
  FONTCOLOR (::std::auto_ptr< ::xml_schema::buffer > FONTCOLOR)
  {
    // TODO
    //
  }

  void TextStyle_pimpl::
  FONTSTYLE ()
  {
  }

  void TextStyle_pimpl::
  post_TextStyle ()
  {
  }

  // ParagraphStyle_pimpl
  //

  void ParagraphStyle_pimpl::
  pre ()
  {
  }

  void ParagraphStyle_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void ParagraphStyle_pimpl::
  ALIGN ()
  {
  }

  void ParagraphStyle_pimpl::
  LEFT (float LEFT)
  {
    // TODO
    //
  }

  void ParagraphStyle_pimpl::
  RIGHT (float RIGHT)
  {
    // TODO
    //
  }

  void ParagraphStyle_pimpl::
  LINESPACE (float LINESPACE)
  {
    // TODO
    //
  }

  void ParagraphStyle_pimpl::
  FIRSTLINE (float FIRSTLINE)
  {
    // TODO
    //
  }

  void ParagraphStyle_pimpl::
  post_ParagraphStyle ()
  {
  }

  // Page_pimpl
  //

  void Page_pimpl::
  pre ()
  {
  }

  void Page_pimpl::
  TopMargin ()
  {
  }

  void Page_pimpl::
  LeftMargin ()
  {
  }

  void Page_pimpl::
  RightMargin ()
  {
  }

  void Page_pimpl::
  BottomMargin ()
  {
  }

  void Page_pimpl::
  PrintSpace ()
  {
  }

  void Page_pimpl::
  ID (const ::std::string& ID)
  {
    // TODO
    //
  }

  void Page_pimpl::
  PAGECLASS (const ::std::string& PAGECLASS)
  {
    // TODO
    //
  }

  void Page_pimpl::
  STYLEREFS (const ::xml_schema::string_sequence& STYLEREFS)
  {
    // TODO
    //
  }

  void Page_pimpl::
  HEIGHT (int HEIGHT)
  {
    // TODO
    //
  }

  void Page_pimpl::
  WIDTH (int WIDTH)
  {
    // TODO
    //
  }

  void Page_pimpl::
  PHYSICAL_IMG_NR (int PHYSICAL_IMG_NR)
  {
    // TODO
    //
  }

  void Page_pimpl::
  PRINTED_IMG_NR (const ::std::string& PRINTED_IMG_NR)
  {
    // TODO
    //
  }

  void Page_pimpl::
  QUALITY ()
  {
  }

  void Page_pimpl::
  QUALITY_DETAIL (const ::std::string& QUALITY_DETAIL)
  {
    // TODO
    //
  }

  void Page_pimpl::
  POSITION ()
  {
  }

  void Page_pimpl::
  PROCESSING (const ::std::string& PROCESSING)
  {
    // TODO
    //
  }

  void Page_pimpl::
  ACCURACY (float ACCURACY)
  {
    // TODO
    //
  }

  void Page_pimpl::
  PC ()
  {
  }

  void Page_pimpl::
  post_Page ()
  {
  }

  // ALIGN_pimpl
  //

  void ALIGN_pimpl::
  pre ()
  {
  }

  void ALIGN_pimpl::
  post_ALIGN ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // QUALITY_pimpl
  //

  void QUALITY_pimpl::
  pre ()
  {
  }

  void QUALITY_pimpl::
  post_QUALITY ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // POSITION_pimpl
  //

  void POSITION_pimpl::
  pre ()
  {
  }

  void POSITION_pimpl::
  post_POSITION ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
  }

  // PC_pimpl
  //

  void PC_pimpl::
  pre ()
  {
  }

  void PC_pimpl::
  post_PC ()
  {
    float v (post_float ());

    // TODO
    //
  }
}

