// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef CXX___ALTO_2_0_PIMPL_HXX
#define CXX___ALTO_2_0_PIMPL_HXX

#include "alto-2-0-pskel.hxx"

#include "xlink-pimpl.hxx"

namespace alto
{
  class BlockType_pimpl: public virtual BlockType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Shape ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (int);

    virtual void
    WIDTH (int);

    virtual void
    HPOS (int);

    virtual void
    VPOS (int);

    virtual void
    ROTATION (float);

    virtual void
    IDNEXT (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    href (const ::std::string&);

    virtual void
    role (const ::std::string&);

    virtual void
    arcrole (const ::std::string&);

    virtual void
    title (const ::std::string&);

    virtual void
    show ();

    virtual void
    actuate ();

    virtual void
    post_BlockType ();
  };

  class StringType_pimpl: public virtual StringType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ALTERNATIVE ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (float);

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    CONTENT ();

    virtual void
    STYLE ();

    virtual void
    SUBS_TYPE ();

    virtual void
    SUBS_CONTENT (const ::std::string&);

    virtual void
    WC ();

    virtual void
    CC (const ::std::string&);

    virtual void
    post_StringType ();
  };

  class PageSpaceType_pimpl: public virtual PageSpaceType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    TextBlock ();

    virtual void
    Illustration ();

    virtual void
    GraphicalElement ();

    virtual void
    ComposedBlock ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (float);

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    post_PageSpaceType ();
  };

  class PointsType_pimpl: public virtual PointsType_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_PointsType ();
  };

  class ShapeType_pimpl: public virtual ShapeType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Polygon ();

    virtual void
    Ellipse ();

    virtual void
    Circle ();

    virtual void
    post_ShapeType ();
  };

  class PolygonType_pimpl: public virtual PolygonType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    POINTS ();

    virtual void
    post_PolygonType ();
  };

  class EllipseType_pimpl: public virtual EllipseType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    HPOS ();

    virtual void
    VPOS ();

    virtual void
    HLENGTH ();

    virtual void
    VLENGTH ();

    virtual void
    post_EllipseType ();
  };

  class CircleType_pimpl: public virtual CircleType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    HPOS ();

    virtual void
    VPOS ();

    virtual void
    RADIUS ();

    virtual void
    post_CircleType ();
  };

  class fontTypeType_pimpl: public virtual fontTypeType_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_fontTypeType ();
  };

  class fontWidthType_pimpl: public virtual fontWidthType_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_fontWidthType ();
  };

  class sourceImageInformationType_pimpl: public virtual sourceImageInformationType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    fileName (const ::std::string&);

    virtual void
    fileIdentifier ();

    virtual void
    post_sourceImageInformationType ();
  };

  class fileIdentifierType_pimpl: public virtual fileIdentifierType_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    fileIdentifierLocation ();

    virtual void
    post_fileIdentifierType ();
  };

  class ocrProcessingType_pimpl: public virtual ocrProcessingType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    preProcessingStep ();

    virtual void
    ocrProcessingStep ();

    virtual void
    postProcessingStep ();

    virtual void
    post_ocrProcessingType ();
  };

  class processingStepType_pimpl: public virtual processingStepType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    processingDateTime ();

    virtual void
    processingAgency (const ::std::string&);

    virtual void
    processingStepDescription (const ::std::string&);

    virtual void
    processingStepSettings (const ::std::string&);

    virtual void
    processingSoftware ();

    virtual void
    post_processingStepType ();
  };

  class processingSoftwareType_pimpl: public virtual processingSoftwareType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    softwareCreator (const ::std::string&);

    virtual void
    softwareName (const ::std::string&);

    virtual void
    softwareVersion (const ::std::string&);

    virtual void
    applicationDescription (const ::std::string&);

    virtual void
    post_processingSoftwareType ();
  };

  class dateTimeType_pimpl: public virtual dateTimeType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    _characters (const ::xml_schema::ro_string&);

    virtual void
    post_dateTimeType ();
  };

  class fontStylesType_base_pimpl: public virtual fontStylesType_base_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    item ();

    virtual void
    post_fontStylesType_base ();
  };

  class fontStylesType_pimpl: public virtual fontStylesType_pskel,
    public ::alto::fontStylesType_base_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_fontStylesType ();
  };

  class ComposedBlockType_pimpl: public virtual ComposedBlockType_pskel,
    public ::alto::BlockType_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    TextBlock ();

    virtual void
    Illustration ();

    virtual void
    GraphicalElement ();

    virtual void
    ComposedBlock ();

    virtual void
    TYPE (const ::std::string&);

    virtual void
    FILEID (const ::std::string&);

    virtual void
    post_ComposedBlockType ();
  };

  class IllustrationType_pimpl: public virtual IllustrationType_pskel,
    public ::alto::BlockType_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    TYPE (const ::std::string&);

    virtual void
    FILEID (const ::std::string&);

    virtual void
    post_IllustrationType ();
  };

  class GraphicalElementType_pimpl: public virtual GraphicalElementType_pskel,
    public ::alto::BlockType_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_GraphicalElementType ();
  };

  class TextBlockType_pimpl: public virtual TextBlockType_pskel,
    public ::alto::BlockType_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    TextLine ();

    virtual void
    language (const ::std::string&);

    virtual void
    post_TextBlockType ();
  };

  class alto_pimpl: public virtual alto_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Description ();

    virtual void
    Styles ();

    virtual void
    Layout ();

    virtual void
    post_alto ();
  };

  class ALTERNATIVE_pimpl: public virtual ALTERNATIVE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    PURPOSE (const ::std::string&);

    virtual void
    post_ALTERNATIVE ();
  };

  class CONTENT_pimpl: public virtual CONTENT_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_CONTENT ();
  };

  class SUBS_TYPE_pimpl: public virtual SUBS_TYPE_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_SUBS_TYPE ();
  };

  class WC_pimpl: public virtual WC_pskel,
    public ::xml_schema::float_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_WC ();
  };

  class TextLine_pimpl: public virtual TextLine_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    String ();

    virtual void
    SP ();

    virtual void
    HYP ();

    virtual void
    ID (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (float);

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    BASELINE (float);

    virtual void
    CS (bool);

    virtual void
    post_TextLine ();
  };

  class Description_pimpl: public virtual Description_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    MeasurementUnit ();

    virtual void
    sourceImageInformation ();

    virtual void
    OCRProcessing ();

    virtual void
    post_Description ();
  };

  class Styles_pimpl: public virtual Styles_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    TextStyle ();

    virtual void
    ParagraphStyle ();

    virtual void
    post_Styles ();
  };

  class Layout_pimpl: public virtual Layout_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Page ();

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    post_Layout ();
  };

  class fontStylesType_base_item_pimpl: public virtual fontStylesType_base_item_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_fontStylesType_base_item ();
  };

  class SP_pimpl: public virtual SP_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    post_SP ();
  };

  class HYP_pimpl: public virtual HYP_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    WIDTH (float);

    virtual void
    HPOS (float);

    virtual void
    VPOS (float);

    virtual void
    CONTENT ();

    virtual void
    post_HYP ();
  };

  class MeasurementUnit_pimpl: public virtual MeasurementUnit_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_MeasurementUnit ();
  };

  class OCRProcessing_pimpl: public virtual OCRProcessing_pskel,
    public ::alto::ocrProcessingType_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    post_OCRProcessing ();
  };

  class TextStyle_pimpl: public virtual TextStyle_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    FONTFAMILY (const ::std::string&);

    virtual void
    FONTTYPE ();

    virtual void
    FONTWIDTH ();

    virtual void
    FONTSIZE (float);

    virtual void
    FONTCOLOR (::std::auto_ptr< ::xml_schema::buffer >);

    virtual void
    FONTSTYLE ();

    virtual void
    post_TextStyle ();
  };

  class ParagraphStyle_pimpl: public virtual ParagraphStyle_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ID (const ::std::string&);

    virtual void
    ALIGN ();

    virtual void
    LEFT (float);

    virtual void
    RIGHT (float);

    virtual void
    LINESPACE (float);

    virtual void
    FIRSTLINE (float);

    virtual void
    post_ParagraphStyle ();
  };

  class Page_pimpl: public virtual Page_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    TopMargin ();

    virtual void
    LeftMargin ();

    virtual void
    RightMargin ();

    virtual void
    BottomMargin ();

    virtual void
    PrintSpace ();

    virtual void
    ID (const ::std::string&);

    virtual void
    PAGECLASS (const ::std::string&);

    virtual void
    STYLEREFS (const ::xml_schema::string_sequence&);

    virtual void
    HEIGHT (int);

    virtual void
    WIDTH (int);

    virtual void
    PHYSICAL_IMG_NR (int);

    virtual void
    PRINTED_IMG_NR (const ::std::string&);

    virtual void
    QUALITY ();

    virtual void
    QUALITY_DETAIL (const ::std::string&);

    virtual void
    POSITION ();

    virtual void
    PROCESSING (const ::std::string&);

    virtual void
    ACCURACY (float);

    virtual void
    PC ();

    virtual void
    post_Page ();
  };

  class ALIGN_pimpl: public virtual ALIGN_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_ALIGN ();
  };

  class QUALITY_pimpl: public virtual QUALITY_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_QUALITY ();
  };

  class POSITION_pimpl: public virtual POSITION_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_POSITION ();
  };

  class PC_pimpl: public virtual PC_pskel,
    public ::xml_schema::float_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_PC ();
  };
}

#endif // CXX___ALTO_2_0_PIMPL_HXX
